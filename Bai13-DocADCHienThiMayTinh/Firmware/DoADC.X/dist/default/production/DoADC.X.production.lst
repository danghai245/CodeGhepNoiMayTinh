

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Feb 27 22:03:46 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1
    45                           	psect	text36,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48  0000                     
    49                           ; Version 1.41
    50                           ; Generated 25/01/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4520 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	smallconst
    85  000600                     __psmallconst:
    86                           	opt stack 0
    87  000600  00                 	db	0
    88  000601                     _dpowers:
    89                           	opt stack 0
    90  000601  0001               	dw	1
    91  000603  000A               	dw	10
    92  000605  0064               	dw	100
    93  000607  03E8               	dw	1000
    94  000609  2710               	dw	10000
    95  00060B                     __end_of_dpowers:
    96                           	opt stack 0
    97  0000                     _TXREG	set	4013
    98  0000                     _RCREG	set	4014
    99  0000                     _RCSTA	set	4011
   100  0000                     _TXSTA	set	4012
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _TXSTAbits	set	4012
   104  0000                     _PIR1bits	set	3998
   105  0000                     _TRISDbits	set	3989
   106  0000                     _LATDbits	set	3980
   107  0000                     _ADRESL	set	4035
   108  0000                     _ADRESH	set	4036
   109  0000                     _ADCON0bits	set	4034
   110  0000                     _ADCON2	set	4032
   111  0000                     _ADCON1	set	4033
   112  0000                     _ADCON0	set	4034
   113  0000                     _INTCONbits	set	4082
   114  0000                     _PIE1bits	set	3997
   115  0000                     _ADCON1bits	set	4033
   116  0000                     _ADCON2bits	set	4032
   117  00060B                     STR_1:
   118  00060B  44                 	db	68	;'D'
   119  00060C  4F                 	db	79	;'O'
   120  00060D  20                 	db	32
   121  00060E  41                 	db	65	;'A'
   122  00060F  44                 	db	68	;'D'
   123  000610  43                 	db	67	;'C'
   124  000611  00                 	db	0
   125  000612                     STR_2:
   126  000612  25                 	db	37
   127  000613  30                 	db	48	;'0'
   128  000614  2E                 	db	46
   129  000615  34                 	db	52	;'4'
   130  000616  64                 	db	100	;'d'
   131  000617  00                 	db	0
   132  000618                     STR_3:
   133  000618  0A                 	db	10
   134  000619  00                 	db	0
   135                           
   136                           ; #config settings
   137  00061A  00                 	db	0	; dummy byte at the end
   138  0000                     
   139                           	psect	cinit
   140  000DBA                     __pcinit:
   141                           	opt stack 0
   142  000DBA                     start_initialization:
   143                           	opt stack 0
   144  000DBA                     __initialization:
   145                           	opt stack 0
   146                           
   147                           ; Clear objects allocated to COMRAM (88 bytes)
   148  000DBA  EE00  F001         	lfsr	0,__pbssCOMRAM
   149  000DBE  0E58               	movlw	88
   150  000DC0                     clear_0:
   151  000DC0  6AEE               	clrf	postinc0,c
   152  000DC2  06E8               	decf	wreg,f,c
   153  000DC4  E1FD               	bnz	clear_0
   154  000DC6                     end_of_initialization:
   155                           	opt stack 0
   156  000DC6                     __end_of__initialization:
   157                           	opt stack 0
   158  000DC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   159  000DC8  6EF8               	movwf	tblptru,c
   160  000DCA  0100               	movlb	0
   161  000DCC  EF29  F005         	goto	_main	;jump to C main() function
   162                           tblptru	equ	0xFF8
   163                           postinc0	equ	0xFEE
   164                           wreg	equ	0xFE8
   165                           
   166                           	psect	bssCOMRAM
   167  000001                     __pbssCOMRAM:
   168                           	opt stack 0
   169  000001                     _ad:
   170                           	opt stack 0
   171  000001                     	ds	2
   172  000003                     _buff:
   173                           	opt stack 0
   174  000003                     	ds	86
   175                           tblptru	equ	0xFF8
   176                           postinc0	equ	0xFEE
   177                           wreg	equ	0xFE8
   178                           
   179                           	psect	cstackCOMRAM
   180  000059                     __pcstackCOMRAM:
   181                           	opt stack 0
   182  000059                     ??_isdigit:
   183  000059                     ??_adcAcqTime:
   184  000059                     ??_acdVoltRef:
   185  000059                     ??_adcSetChannel:
   186  000059                     ??_lcdNible:
   187  000059                     ?___wmul:
   188                           	opt stack 0
   189  000059                     ?___lwdiv:
   190                           	opt stack 0
   191  000059                     adcClock@clk:
   192                           	opt stack 0
   193  000059                     adcResultJust@just:
   194                           	opt stack 0
   195  000059                     adcInterrupt@config:
   196                           	opt stack 0
   197  000059                     adcPortConfig@config:
   198                           	opt stack 0
   199  000059                     uartIntMode@rxMode:
   200                           	opt stack 0
   201  000059                     uartBaudrateMode@mode:
   202                           	opt stack 0
   203  000059                     uartSetBaudrate@spbrg:
   204                           	opt stack 0
   205  000059                     uartRxMode@mode:
   206                           	opt stack 0
   207  000059                     uartSyncMode@mode:
   208                           	opt stack 0
   209  000059                     uartBitMode@mode:
   210                           	opt stack 0
   211  000059                     uartSynchMode@mode:
   212                           	opt stack 0
   213  000059                     uartWrite@data:
   214                           	opt stack 0
   215  000059                     ___wmul@multiplier:
   216                           	opt stack 0
   217  000059                     ___lwdiv@dividend:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221  000059                     	ds	1
   222  00005A                     adcAcqTime@tad:
   223                           	opt stack 0
   224  00005A                     acdVoltRef@vref:
   225                           	opt stack 0
   226  00005A                     adcSetChannel@channel:
   227                           	opt stack 0
   228  00005A                     uartIntMode@txMode:
   229                           	opt stack 0
   230  00005A                     _isdigit$926:
   231                           	opt stack 0
   232  00005A                     uartPuts@str:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x1
   236  00005A                     	ds	1
   237  00005B                     ?_adcRead:
   238                           	opt stack 0
   239  00005B                     lcdNible@nible:
   240                           	opt stack 0
   241  00005B                     isdigit@c:
   242                           	opt stack 0
   243  00005B                     ___wmul@multiplicand:
   244                           	opt stack 0
   245  00005B                     ___lwdiv@divisor:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x2
   249  00005B                     	ds	1
   250  00005C                     ??_uartPuts:
   251  00005C                     lcdByte@byte:
   252                           	opt stack 0
   253                           
   254                           ; 1 bytes @ 0x3
   255  00005C                     	ds	1
   256  00005D                     ??_adcRead:
   257  00005D                     lcdCmd@cmd:
   258                           	opt stack 0
   259  00005D                     lcdPutc@chr:
   260                           	opt stack 0
   261  00005D                     ___wmul@product:
   262                           	opt stack 0
   263  00005D                     ___lwdiv@quotient:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x4
   267  00005D                     	ds	1
   268  00005E                     ??_lcdInit:
   269  00005E                     lcdGotoxy@row:
   270                           	opt stack 0
   271  00005E                     lcdPuts@str:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x5
   275  00005E                     	ds	1
   276  00005F                     lcdGotoxy@col:
   277                           	opt stack 0
   278  00005F                     ___lwdiv@counter:
   279                           	opt stack 0
   280  00005F                     adcRead@adcResultMSB:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x6
   284  00005F                     	ds	1
   285  000060                     ?___lwmod:
   286                           	opt stack 0
   287  000060                     ___lwmod@dividend:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x7
   291  000060                     	ds	1
   292  000061                     adcRead@adcResultLSB:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x8
   296  000061                     	ds	1
   297  000062                     ___lwmod@divisor:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x9
   301  000062                     	ds	1
   302  000063                     adcRead@adcResult:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0xA
   306  000063                     	ds	1
   307  000064                     ___lwmod@counter:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0xB
   311  000064                     	ds	1
   312  000065                     ?_sprintf:
   313                           	opt stack 0
   314  000065                     adcRead@ch:
   315                           	opt stack 0
   316  000065                     sprintf@sp:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0xC
   320  000065                     	ds	2
   321  000067                     sprintf@f:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0xE
   325  000067                     	ds	4
   326  00006B                     ??_sprintf:
   327                           
   328                           ; 1 bytes @ 0x12
   329  00006B                     	ds	4
   330  00006F                     sprintf@ap:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x16
   334  00006F                     	ds	2
   335  000071                     sprintf@flag:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x18
   339  000071                     	ds	1
   340  000072                     sprintf@val:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x19
   344  000072                     	ds	2
   345  000074                     sprintf@width:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x1B
   349  000074                     	ds	2
   350  000076                     sprintf@prec:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x1D
   354  000076                     	ds	1
   355  000077                     sprintf@c:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x1E
   359  000077                     	ds	1
   360  000078                     ??_main:
   361                           
   362                           ; 1 bytes @ 0x1F
   363  000078                     	ds	2
   364                           tblptru	equ	0xFF8
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           
   368 ;;
   369 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   370 ;;
   371 ;; *************** function _main *****************
   372 ;; Defined at:
   373 ;;		line 12 in file "main.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;		None
   378 ;; Return value:  Size  Location     Type
   379 ;;                  1    wreg      void 
   380 ;; Registers used:
   381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   382 ;; Tracked objects:
   383 ;;		On entry : 0/0
   384 ;;		On exit  : 0/0
   385 ;;		Unchanged: 0/0
   386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   387 ;;      Params:         0       0       0       0       0       0       0
   388 ;;      Locals:         0       0       0       0       0       0       0
   389 ;;      Temps:          2       0       0       0       0       0       0
   390 ;;      Totals:         2       0       0       0       0       0       0
   391 ;;Total ram usage:        2 bytes
   392 ;; Hardware stack levels required when called:    4
   393 ;; This function calls:
   394 ;;		_adcInit
   395 ;;		_adcRead
   396 ;;		_lcdGotoxy
   397 ;;		_lcdInit
   398 ;;		_lcdPuts
   399 ;;		_sprintf
   400 ;;		_uartOpen
   401 ;;		_uartPuts
   402 ;; This function is called by:
   403 ;;		Startup code after reset
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text0
   408  000A52                     __ptext0:
   409                           	opt stack 0
   410  000A52                     _main:
   411                           	opt stack 27
   412                           
   413                           ;main.c: 14: lcdInit();
   414                           
   415                           ;incstack = 0
   416  000A52  EC96  F004         	call	_lcdInit	;wreg free
   417                           
   418                           ;main.c: 15: uartOpen();
   419  000A56  EC54  F006         	call	_uartOpen	;wreg free
   420                           
   421                           ;main.c: 16: adcInit();
   422  000A5A  EC72  F006         	call	_adcInit	;wreg free
   423                           
   424                           ;main.c: 18: lcdPuts("DO ADC");
   425  000A5E  0E0B               	movlw	low STR_1
   426  000A60  6E5E               	movwf	lcdPuts@str,c
   427  000A62  0E06               	movlw	high STR_1
   428  000A64  6E5F               	movwf	lcdPuts@str+1,c
   429  000A66  ECC8  F005         	call	_lcdPuts	;wreg free
   430  000A6A                     l1597:
   431                           
   432                           ;main.c: 20: {
   433                           ;main.c: 21: ad = adcRead(0);
   434  000A6A  0E00               	movlw	0
   435  000A6C  EC33  F006         	call	_adcRead
   436  000A70  C05B  F001         	movff	?_adcRead,_ad
   437  000A74  C05C  F002         	movff	?_adcRead+1,_ad+1
   438                           
   439                           ;main.c: 22: sprintf(&buff[0],"%0.4d",ad);
   440  000A78  0E03               	movlw	low _buff
   441  000A7A  6E65               	movwf	sprintf@sp,c
   442  000A7C  0E00               	movlw	high _buff
   443  000A7E  6E66               	movwf	sprintf@sp+1,c
   444  000A80  0E12               	movlw	low STR_2
   445  000A82  6E67               	movwf	sprintf@f,c
   446  000A84  0E06               	movlw	high STR_2
   447  000A86  6E68               	movwf	sprintf@f+1,c
   448  000A88  C001  F069         	movff	_ad,?_sprintf+4
   449  000A8C  C002  F06A         	movff	_ad+1,?_sprintf+5
   450  000A90  EC0E  F003         	call	_sprintf	;wreg free
   451                           
   452                           ;main.c: 23: lcdGotoxy(0,2);
   453  000A94  0E02               	movlw	2
   454  000A96  6E5E               	movwf	lcdGotoxy@row,c
   455  000A98  0E00               	movlw	0
   456  000A9A  EC12  F006         	call	_lcdGotoxy
   457                           
   458                           ;main.c: 24: lcdPuts(&buff[0]);
   459  000A9E  0E03               	movlw	low _buff
   460  000AA0  6E5E               	movwf	lcdPuts@str,c
   461  000AA2  0E00               	movlw	high _buff
   462  000AA4  6E5F               	movwf	lcdPuts@str+1,c
   463  000AA6  ECC8  F005         	call	_lcdPuts	;wreg free
   464                           
   465                           ;main.c: 25: uartPuts(&buff[0]);
   466  000AAA  0E03               	movlw	low _buff
   467  000AAC  6E5A               	movwf	uartPuts@str,c
   468  000AAE  0E00               	movlw	high _buff
   469  000AB0  6E5B               	movwf	uartPuts@str+1,c
   470  000AB2  EC6E  F005         	call	_uartPuts	;wreg free
   471                           
   472                           ;main.c: 26: uartPuts("\n");
   473  000AB6  0E18               	movlw	low STR_3
   474  000AB8  6E5A               	movwf	uartPuts@str,c
   475  000ABA  0E06               	movlw	high STR_3
   476  000ABC  6E5B               	movwf	uartPuts@str+1,c
   477  000ABE  EC6E  F005         	call	_uartPuts	;wreg free
   478                           
   479                           ;main.c: 27: _delay((unsigned long)((300)*(11059200/4000.0)));
   480  000AC2  0E05               	movlw	5
   481  000AC4  6E79               	movwf	(??_main+1)& (0+255),c
   482  000AC6  0E36               	movlw	54
   483  000AC8  6E78               	movwf	??_main& (0+255),c
   484  000ACA  0E2C               	movlw	44
   485  000ACC                     u1137:
   486  000ACC  2EE8               	decfsz	wreg,f,c
   487  000ACE  D7FE               	bra	u1137
   488  000AD0  2E78               	decfsz	??_main& (0+255),f,c
   489  000AD2  D7FC               	bra	u1137
   490  000AD4  2E79               	decfsz	(??_main+1)& (0+255),f,c
   491  000AD6  D7FA               	bra	u1137
   492  000AD8  D000               	nop2	
   493  000ADA  D7C7               	goto	l1597
   494  000ADC                     __end_of_main:
   495                           	opt stack 0
   496                           tblptru	equ	0xFF8
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           
   500 ;; *************** function _uartPuts *****************
   501 ;; Defined at:
   502 ;;		line 97 in file "myUart.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;  str             2    1[COMRAM] PTR unsigned char 
   505 ;;		 -> STR_3(2), buff(86), 
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   517 ;;      Params:         2       0       0       0       0       0       0
   518 ;;      Locals:         0       0       0       0       0       0       0
   519 ;;      Temps:          2       0       0       0       0       0       0
   520 ;;      Totals:         4       0       0       0       0       0       0
   521 ;;Total ram usage:        4 bytes
   522 ;; Hardware stack levels used:    1
   523 ;; Hardware stack levels required when called:    1
   524 ;; This function calls:
   525 ;;		_uartBusy
   526 ;;		_uartWrite
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text1
   533  000ADC                     __ptext1:
   534                           	opt stack 0
   535  000ADC                     _uartPuts:
   536                           	opt stack 29
   537  000ADC                     l1583:
   538  000ADC  EC44  F007         	call	_uartBusy	;wreg free
   539  000AE0  0900               	iorlw	0
   540  000AE2  A4D8               	btfss	status,2,c
   541  000AE4  D7FB               	goto	l1583
   542                           
   543                           ;myUart.c: 103: uartWrite(*str);
   544  000AE6  C05A  FFF6         	movff	uartPuts@str,tblptrl
   545  000AEA  C05B  FFF7         	movff	uartPuts@str+1,tblptrh
   546  000AEE  6AF8               	clrf	tblptru,c
   547  000AF0  0E05               	movlw	(high __ramtop+-1)
   548  000AF2  64F7               	cpfsgt	tblptrh,c
   549  000AF4  D003               	bra	u1107
   550  000AF6  0008               	tblrd		*
   551  000AF8  50F5               	movf	tablat,w,c
   552  000AFA  D005               	bra	u1100
   553  000AFC                     u1107:
   554  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
   555  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
   556  000B04  50EF               	movf	indf0,w,c
   557  000B06                     u1100:
   558  000B06  EC50  F007         	call	_uartWrite
   559                           
   560                           ;myUart.c: 104: }
   561                           ;myUart.c: 105: while( *str++ );
   562  000B0A  505A               	movf	uartPuts@str,w,c
   563  000B0C  6E5C               	movwf	??_uartPuts& (0+255),c
   564  000B0E  505B               	movf	uartPuts@str+1,w,c
   565  000B10  6E5D               	movwf	(??_uartPuts+1)& (0+255),c
   566  000B12  4A5A               	infsnz	uartPuts@str,f,c
   567  000B14  2A5B               	incf	uartPuts@str+1,f,c
   568  000B16  C05C  FFF6         	movff	??_uartPuts,tblptrl
   569  000B1A  C05D  FFF7         	movff	??_uartPuts+1,tblptrh
   570  000B1E  6AF8               	clrf	tblptru,c
   571  000B20  0E05               	movlw	(high __ramtop+-1)
   572  000B22  64F7               	cpfsgt	tblptrh,c
   573  000B24  D003               	bra	u1117
   574  000B26  0008               	tblrd		*
   575  000B28  50F5               	movf	tablat,w,c
   576  000B2A  D005               	bra	u1110
   577  000B2C                     u1117:
   578  000B2C  CFF6 FFE9          	movff	tblptrl,fsr0l
   579  000B30  CFF7 FFEA          	movff	tblptrh,fsr0h
   580  000B34  50EF               	movf	indf0,w,c
   581  000B36                     u1110:
   582  000B36  0900               	iorlw	0
   583  000B38  B4D8               	btfsc	status,2,c
   584  000B3A  0012               	return	
   585  000B3C  D7CF               	goto	l1583
   586  000B3E                     __end_of_uartPuts:
   587                           	opt stack 0
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           indf0	equ	0xFEF
   593                           postinc0	equ	0xFEE
   594                           fsr0h	equ	0xFEA
   595                           fsr0l	equ	0xFE9
   596                           wreg	equ	0xFE8
   597                           status	equ	0xFD8
   598                           
   599 ;; *************** function _uartWrite *****************
   600 ;; Defined at:
   601 ;;		line 78 in file "myUart.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  data            1    wreg     unsigned char 
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  data            1    0[COMRAM] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   615 ;;      Params:         0       0       0       0       0       0       0
   616 ;;      Locals:         1       0       0       0       0       0       0
   617 ;;      Temps:          0       0       0       0       0       0       0
   618 ;;      Totals:         1       0       0       0       0       0       0
   619 ;;Total ram usage:        1 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; This function calls:
   622 ;;		Nothing
   623 ;; This function is called by:
   624 ;;		_uartPuts
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text2
   629  000EA0                     __ptext2:
   630                           	opt stack 0
   631  000EA0                     _uartWrite:
   632                           	opt stack 29
   633                           
   634                           ;incstack = 0
   635                           ;uartWrite@data stored from wreg
   636  000EA0  6E59               	movwf	uartWrite@data,c
   637                           
   638                           ;myUart.c: 80: TXREG = data;
   639  000EA2  C059  FFAD         	movff	uartWrite@data,4013	;volatile
   640  000EA6  0012               	return		;funcret
   641  000EA8                     __end_of_uartWrite:
   642                           	opt stack 0
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           indf0	equ	0xFEF
   648                           postinc0	equ	0xFEE
   649                           fsr0h	equ	0xFEA
   650                           fsr0l	equ	0xFE9
   651                           wreg	equ	0xFE8
   652                           status	equ	0xFD8
   653                           
   654 ;; *************** function _uartBusy *****************
   655 ;; Defined at:
   656 ;;		line 116 in file "myUart.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      unsigned char 
   663 ;; Registers used:
   664 ;;		wreg
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   670 ;;      Params:         0       0       0       0       0       0       0
   671 ;;      Locals:         0       0       0       0       0       0       0
   672 ;;      Temps:          0       0       0       0       0       0       0
   673 ;;      Totals:         0       0       0       0       0       0       0
   674 ;;Total ram usage:        0 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_uartPuts
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           	psect	text3
   684  000E88                     __ptext3:
   685                           	opt stack 0
   686  000E88                     _uartBusy:
   687                           	opt stack 29
   688                           
   689                           ;myUart.c: 118: if(!TXSTAbits.TRMT)
   690                           
   691                           ;incstack = 0
   692  000E88  B2AC               	btfsc	4012,1,c	;volatile
   693  000E8A  D002               	goto	l965
   694                           
   695                           ;myUart.c: 119: return 1;
   696  000E8C  0E01               	movlw	1
   697  000E8E  0012               	return	
   698  000E90                     l965:
   699                           
   700                           ;myUart.c: 120: else
   701                           ;myUart.c: 121: return 0;
   702  000E90  0E00               	movlw	0
   703  000E92  0012               	return	
   704  000E94                     __end_of_uartBusy:
   705                           	opt stack 0
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           indf0	equ	0xFEF
   711                           postinc0	equ	0xFEE
   712                           fsr0h	equ	0xFEA
   713                           fsr0l	equ	0xFE9
   714                           wreg	equ	0xFE8
   715                           status	equ	0xFD8
   716                           
   717 ;; *************** function _uartOpen *****************
   718 ;; Defined at:
   719 ;;		line 55 in file "myUart.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, status,2, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   733 ;;      Params:         0       0       0       0       0       0       0
   734 ;;      Locals:         0       0       0       0       0       0       0
   735 ;;      Temps:          0       0       0       0       0       0       0
   736 ;;      Totals:         0       0       0       0       0       0       0
   737 ;;Total ram usage:        0 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    1
   740 ;; This function calls:
   741 ;;		_uartBaudrateMode
   742 ;;		_uartBitMode
   743 ;;		_uartIntMode
   744 ;;		_uartRxMode
   745 ;;		_uartSetBaudrate
   746 ;;		_uartStart
   747 ;;		_uartSyncMode
   748 ;;		_uartSynchMode
   749 ;; This function is called by:
   750 ;;		_main
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text4
   755  000CA8                     __ptext4:
   756                           	opt stack 0
   757  000CA8                     _uartOpen:
   758                           	opt stack 29
   759                           
   760                           ;myUart.c: 58: TXSTA = 0;
   761                           
   762                           ;incstack = 0
   763  000CA8  0E00               	movlw	0
   764  000CAA  6EAC               	movwf	4012,c	;volatile
   765                           
   766                           ;myUart.c: 59: RCSTA = 0;
   767  000CAC  0E00               	movlw	0
   768  000CAE  6EAB               	movwf	4011,c	;volatile
   769                           
   770                           ;myUart.c: 61: uartSyncMode(0);
   771  000CB0  0E00               	movlw	0
   772  000CB2  EC0C  F007         	call	_uartSyncMode
   773                           
   774                           ;myUart.c: 64: uartSynchMode(0);
   775  000CB6  0E00               	movlw	0
   776  000CB8  EC05  F007         	call	_uartSynchMode
   777                           
   778                           ;myUart.c: 66: uartBitMode(0);
   779  000CBC  0E00               	movlw	0
   780  000CBE  ECB9  F006         	call	_uartBitMode
   781                           
   782                           ;myUart.c: 67: uartRxMode(1);
   783  000CC2  0E01               	movlw	1
   784  000CC4  EC13  F007         	call	_uartRxMode
   785                           
   786                           ;myUart.c: 68: uartBaudrateMode(0);
   787  000CC8  0E00               	movlw	0
   788  000CCA  EC1A  F007         	call	_uartBaudrateMode
   789                           
   790                           ;myUart.c: 69: uartIntMode(0, 1);
   791  000CCE  0E01               	movlw	1
   792  000CD0  6E59               	movwf	uartIntMode@rxMode,c
   793  000CD2  0E00               	movlw	0
   794  000CD4  ECAD  F006         	call	_uartIntMode
   795                           
   796                           ;myUart.c: 70: uartSetBaudrate(17);
   797  000CD8  0E11               	movlw	17
   798  000CDA  EC54  F007         	call	_uartSetBaudrate
   799                           
   800                           ;myUart.c: 71: uartStart();
   801  000CDE  EC58  F007         	call	_uartStart	;wreg free
   802  000CE2  0012               	return		;funcret
   803  000CE4                     __end_of_uartOpen:
   804                           	opt stack 0
   805                           tblptru	equ	0xFF8
   806                           tblptrh	equ	0xFF7
   807                           tblptrl	equ	0xFF6
   808                           tablat	equ	0xFF5
   809                           indf0	equ	0xFEF
   810                           postinc0	equ	0xFEE
   811                           fsr0h	equ	0xFEA
   812                           fsr0l	equ	0xFE9
   813                           wreg	equ	0xFE8
   814                           status	equ	0xFD8
   815                           
   816 ;; *************** function _uartSynchMode *****************
   817 ;; Defined at:
   818 ;;		line 38 in file "myUart.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  mode            1    wreg     unsigned char 
   821 ;; Auto vars:     Size  Location     Type
   822 ;;  mode            1    0[COMRAM] unsigned char 
   823 ;; Return value:  Size  Location     Type
   824 ;;                  1    wreg      void 
   825 ;; Registers used:
   826 ;;		wreg
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   832 ;;      Params:         0       0       0       0       0       0       0
   833 ;;      Locals:         1       0       0       0       0       0       0
   834 ;;      Temps:          0       0       0       0       0       0       0
   835 ;;      Totals:         1       0       0       0       0       0       0
   836 ;;Total ram usage:        1 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; This function calls:
   839 ;;		Nothing
   840 ;; This function is called by:
   841 ;;		_uartOpen
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text5
   846  000E0A                     __ptext5:
   847                           	opt stack 0
   848  000E0A                     _uartSynchMode:
   849                           	opt stack 29
   850                           
   851                           ;incstack = 0
   852                           ;uartSynchMode@mode stored from wreg
   853  000E0A  6E59               	movwf	uartSynchMode@mode,c
   854                           
   855                           ;myUart.c: 40: TXSTAbits.CSRC = mode;
   856  000E0C  B059               	btfsc	uartSynchMode@mode,0,c
   857  000E0E  D002               	bra	u145
   858  000E10  9EAC               	bcf	4012,7,c	;volatile
   859  000E12  D001               	bra	u146
   860  000E14                     u145:
   861  000E14  8EAC               	bsf	4012,7,c	;volatile
   862  000E16                     u146:
   863  000E16  0012               	return		;funcret
   864  000E18                     __end_of_uartSynchMode:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           indf0	equ	0xFEF
   871                           postinc0	equ	0xFEE
   872                           fsr0h	equ	0xFEA
   873                           fsr0l	equ	0xFE9
   874                           wreg	equ	0xFE8
   875                           status	equ	0xFD8
   876                           
   877 ;; *************** function _uartSyncMode *****************
   878 ;; Defined at:
   879 ;;		line 27 in file "myUart.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  mode            1    wreg     unsigned char 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  mode            1    0[COMRAM] unsigned char 
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   893 ;;      Params:         0       0       0       0       0       0       0
   894 ;;      Locals:         1       0       0       0       0       0       0
   895 ;;      Temps:          0       0       0       0       0       0       0
   896 ;;      Totals:         1       0       0       0       0       0       0
   897 ;;Total ram usage:        1 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_uartOpen
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text6
   907  000E18                     __ptext6:
   908                           	opt stack 0
   909  000E18                     _uartSyncMode:
   910                           	opt stack 29
   911                           
   912                           ;incstack = 0
   913                           ;uartSyncMode@mode stored from wreg
   914  000E18  6E59               	movwf	uartSyncMode@mode,c
   915                           
   916                           ;myUart.c: 29: TXSTAbits.SYNC = mode;
   917  000E1A  B059               	btfsc	uartSyncMode@mode,0,c
   918  000E1C  D002               	bra	u115
   919  000E1E  98AC               	bcf	4012,4,c	;volatile
   920  000E20  D001               	bra	u116
   921  000E22                     u115:
   922  000E22  88AC               	bsf	4012,4,c	;volatile
   923  000E24                     u116:
   924  000E24  0012               	return		;funcret
   925  000E26                     __end_of_uartSyncMode:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           indf0	equ	0xFEF
   932                           postinc0	equ	0xFEE
   933                           fsr0h	equ	0xFEA
   934                           fsr0l	equ	0xFE9
   935                           wreg	equ	0xFE8
   936                           status	equ	0xFD8
   937                           
   938 ;; *************** function _uartStart *****************
   939 ;; Defined at:
   940 ;;		line 43 in file "myUart.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;		None
   943 ;; Auto vars:     Size  Location     Type
   944 ;;		None
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      void 
   947 ;; Registers used:
   948 ;;		None
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   954 ;;      Params:         0       0       0       0       0       0       0
   955 ;;      Locals:         0       0       0       0       0       0       0
   956 ;;      Temps:          0       0       0       0       0       0       0
   957 ;;      Totals:         0       0       0       0       0       0       0
   958 ;;Total ram usage:        0 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; This function calls:
   961 ;;		Nothing
   962 ;; This function is called by:
   963 ;;		_uartOpen
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text7
   968  000EB0                     __ptext7:
   969                           	opt stack 0
   970  000EB0                     _uartStart:
   971                           	opt stack 29
   972                           
   973                           ;myUart.c: 45: TXSTAbits.TXEN = 1;
   974                           
   975                           ;incstack = 0
   976  000EB0  8AAC               	bsf	4012,5,c	;volatile
   977                           
   978                           ;myUart.c: 46: RCSTAbits.SPEN = 1;
   979  000EB2  8EAB               	bsf	4011,7,c	;volatile
   980  000EB4  0012               	return		;funcret
   981  000EB6                     __end_of_uartStart:
   982                           	opt stack 0
   983                           tblptru	equ	0xFF8
   984                           tblptrh	equ	0xFF7
   985                           tblptrl	equ	0xFF6
   986                           tablat	equ	0xFF5
   987                           indf0	equ	0xFEF
   988                           postinc0	equ	0xFEE
   989                           fsr0h	equ	0xFEA
   990                           fsr0l	equ	0xFE9
   991                           wreg	equ	0xFE8
   992                           status	equ	0xFD8
   993                           
   994 ;; *************** function _uartSetBaudrate *****************
   995 ;; Defined at:
   996 ;;		line 18 in file "myUart.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;  spbrg           1    wreg     unsigned char 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  spbrg           1    0[COMRAM] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1010 ;;      Params:         0       0       0       0       0       0       0
  1011 ;;      Locals:         1       0       0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0       0       0
  1013 ;;      Totals:         1       0       0       0       0       0       0
  1014 ;;Total ram usage:        1 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_uartOpen
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           	psect	text8
  1024  000EA8                     __ptext8:
  1025                           	opt stack 0
  1026  000EA8                     _uartSetBaudrate:
  1027                           	opt stack 29
  1028                           
  1029                           ;incstack = 0
  1030                           ;uartSetBaudrate@spbrg stored from wreg
  1031  000EA8  6E59               	movwf	uartSetBaudrate@spbrg,c
  1032                           
  1033                           ;myUart.c: 20: SPBRG = spbrg;
  1034  000EAA  C059  FFAF         	movff	uartSetBaudrate@spbrg,4015	;volatile
  1035  000EAE  0012               	return		;funcret
  1036  000EB0                     __end_of_uartSetBaudrate:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           indf0	equ	0xFEF
  1043                           postinc0	equ	0xFEE
  1044                           fsr0h	equ	0xFEA
  1045                           fsr0l	equ	0xFE9
  1046                           wreg	equ	0xFE8
  1047                           status	equ	0xFD8
  1048                           
  1049 ;; *************** function _uartRxMode *****************
  1050 ;; Defined at:
  1051 ;;		line 22 in file "myUart.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  mode            1    wreg     unsigned char 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  mode            1    0[COMRAM] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1065 ;;      Params:         0       0       0       0       0       0       0
  1066 ;;      Locals:         1       0       0       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0       0       0
  1068 ;;      Totals:         1       0       0       0       0       0       0
  1069 ;;Total ram usage:        1 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_uartOpen
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text9
  1079  000E26                     __ptext9:
  1080                           	opt stack 0
  1081  000E26                     _uartRxMode:
  1082                           	opt stack 29
  1083                           
  1084                           ;incstack = 0
  1085                           ;uartRxMode@mode stored from wreg
  1086  000E26  6E59               	movwf	uartRxMode@mode,c
  1087                           
  1088                           ;myUart.c: 24: RCSTAbits.CREN = mode;
  1089  000E28  B059               	btfsc	uartRxMode@mode,0,c
  1090  000E2A  D002               	bra	u105
  1091  000E2C  98AB               	bcf	4011,4,c	;volatile
  1092  000E2E  D001               	bra	u106
  1093  000E30                     u105:
  1094  000E30  88AB               	bsf	4011,4,c	;volatile
  1095  000E32                     u106:
  1096  000E32  0012               	return		;funcret
  1097  000E34                     __end_of_uartRxMode:
  1098                           	opt stack 0
  1099                           tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           indf0	equ	0xFEF
  1104                           postinc0	equ	0xFEE
  1105                           fsr0h	equ	0xFEA
  1106                           fsr0l	equ	0xFE9
  1107                           wreg	equ	0xFE8
  1108                           status	equ	0xFD8
  1109                           
  1110 ;; *************** function _uartIntMode *****************
  1111 ;; Defined at:
  1112 ;;		line 7 in file "myUart.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  txMode          1    wreg     unsigned char 
  1115 ;;  rxMode          1    0[COMRAM] unsigned char 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  txMode          1    1[COMRAM] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1127 ;;      Params:         1       0       0       0       0       0       0
  1128 ;;      Locals:         1       0       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0
  1130 ;;      Totals:         2       0       0       0       0       0       0
  1131 ;;Total ram usage:        2 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; This function calls:
  1134 ;;		Nothing
  1135 ;; This function is called by:
  1136 ;;		_uartOpen
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text10
  1141  000D5A                     __ptext10:
  1142                           	opt stack 0
  1143  000D5A                     _uartIntMode:
  1144                           	opt stack 29
  1145                           
  1146                           ;incstack = 0
  1147                           ;uartIntMode@txMode stored from wreg
  1148  000D5A  6E5A               	movwf	uartIntMode@txMode,c
  1149                           
  1150                           ;myUart.c: 9: PIR1bits.TXIF = txMode;
  1151  000D5C  B05A               	btfsc	uartIntMode@txMode,0,c
  1152  000D5E  D002               	bra	u655
  1153  000D60  989E               	bcf	3998,4,c	;volatile
  1154  000D62  D001               	bra	u656
  1155  000D64                     u655:
  1156  000D64  889E               	bsf	3998,4,c	;volatile
  1157  000D66                     u656:
  1158                           
  1159                           ;myUart.c: 10: PIR1bits.RCIF = rxMode;
  1160  000D66  B059               	btfsc	uartIntMode@rxMode,0,c
  1161  000D68  D002               	bra	u665
  1162  000D6A  9A9E               	bcf	3998,5,c	;volatile
  1163  000D6C  D001               	bra	u666
  1164  000D6E                     u665:
  1165  000D6E  8A9E               	bsf	3998,5,c	;volatile
  1166  000D70                     u666:
  1167  000D70  0012               	return		;funcret
  1168  000D72                     __end_of_uartIntMode:
  1169                           	opt stack 0
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           indf0	equ	0xFEF
  1175                           postinc0	equ	0xFEE
  1176                           fsr0h	equ	0xFEA
  1177                           fsr0l	equ	0xFE9
  1178                           wreg	equ	0xFE8
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _uartBitMode *****************
  1182 ;; Defined at:
  1183 ;;		line 32 in file "myUart.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;  mode            1    wreg     unsigned char 
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  mode            1    0[COMRAM] unsigned char 
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1197 ;;      Params:         0       0       0       0       0       0       0
  1198 ;;      Locals:         1       0       0       0       0       0       0
  1199 ;;      Temps:          0       0       0       0       0       0       0
  1200 ;;      Totals:         1       0       0       0       0       0       0
  1201 ;;Total ram usage:        1 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; This function calls:
  1204 ;;		Nothing
  1205 ;; This function is called by:
  1206 ;;		_uartOpen
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text11
  1211  000D72                     __ptext11:
  1212                           	opt stack 0
  1213  000D72                     _uartBitMode:
  1214                           	opt stack 29
  1215                           
  1216                           ;incstack = 0
  1217                           ;uartBitMode@mode stored from wreg
  1218  000D72  6E59               	movwf	uartBitMode@mode,c
  1219                           
  1220                           ;myUart.c: 34: TXSTAbits.TX9 = mode;
  1221  000D74  B059               	btfsc	uartBitMode@mode,0,c
  1222  000D76  D002               	bra	u125
  1223  000D78  9CAC               	bcf	4012,6,c	;volatile
  1224  000D7A  D001               	bra	u126
  1225  000D7C                     u125:
  1226  000D7C  8CAC               	bsf	4012,6,c	;volatile
  1227  000D7E                     u126:
  1228                           
  1229                           ;myUart.c: 35: RCSTAbits.RX9 = mode;
  1230  000D7E  B059               	btfsc	uartBitMode@mode,0,c
  1231  000D80  D002               	bra	u135
  1232  000D82  9CAB               	bcf	4011,6,c	;volatile
  1233  000D84  D001               	bra	u136
  1234  000D86                     u135:
  1235  000D86  8CAB               	bsf	4011,6,c	;volatile
  1236  000D88                     u136:
  1237  000D88  0012               	return		;funcret
  1238  000D8A                     __end_of_uartBitMode:
  1239                           	opt stack 0
  1240                           tblptru	equ	0xFF8
  1241                           tblptrh	equ	0xFF7
  1242                           tblptrl	equ	0xFF6
  1243                           tablat	equ	0xFF5
  1244                           indf0	equ	0xFEF
  1245                           postinc0	equ	0xFEE
  1246                           fsr0h	equ	0xFEA
  1247                           fsr0l	equ	0xFE9
  1248                           wreg	equ	0xFE8
  1249                           status	equ	0xFD8
  1250                           
  1251 ;; *************** function _uartBaudrateMode *****************
  1252 ;; Defined at:
  1253 ;;		line 13 in file "myUart.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  mode            1    wreg     unsigned char 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  mode            1    0[COMRAM] unsigned char 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1267 ;;      Params:         0       0       0       0       0       0       0
  1268 ;;      Locals:         1       0       0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0
  1270 ;;      Totals:         1       0       0       0       0       0       0
  1271 ;;Total ram usage:        1 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; This function calls:
  1274 ;;		Nothing
  1275 ;; This function is called by:
  1276 ;;		_uartOpen
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text12
  1281  000E34                     __ptext12:
  1282                           	opt stack 0
  1283  000E34                     _uartBaudrateMode:
  1284                           	opt stack 29
  1285                           
  1286                           ;incstack = 0
  1287                           ;uartBaudrateMode@mode stored from wreg
  1288  000E34  6E59               	movwf	uartBaudrateMode@mode,c
  1289                           
  1290                           ;myUart.c: 15: TXSTAbits.BRGH = mode;
  1291  000E36  B059               	btfsc	uartBaudrateMode@mode,0,c
  1292  000E38  D002               	bra	u95
  1293  000E3A  94AC               	bcf	4012,2,c	;volatile
  1294  000E3C  D001               	bra	u96
  1295  000E3E                     u95:
  1296  000E3E  84AC               	bsf	4012,2,c	;volatile
  1297  000E40                     u96:
  1298  000E40  0012               	return		;funcret
  1299  000E42                     __end_of_uartBaudrateMode:
  1300                           	opt stack 0
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           indf0	equ	0xFEF
  1306                           postinc0	equ	0xFEE
  1307                           fsr0h	equ	0xFEA
  1308                           fsr0l	equ	0xFE9
  1309                           wreg	equ	0xFE8
  1310                           status	equ	0xFD8
  1311                           
  1312 ;; *************** function _sprintf *****************
  1313 ;; Defined at:
  1314 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1317 ;;		 -> buff(86), 
  1318 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1319 ;;		 -> STR_2(6), 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;  tmpval          4    0        struct .
  1322 ;;  cp              3    0        PTR const unsigned char 
  1323 ;;  width           2   27[COMRAM] int 
  1324 ;;  val             2   25[COMRAM] unsigned int 
  1325 ;;  ap              2   22[COMRAM] PTR void [1]
  1326 ;;		 -> ?_sprintf(2), 
  1327 ;;  len             2    0        unsigned int 
  1328 ;;  c               1   30[COMRAM] char 
  1329 ;;  prec            1   29[COMRAM] char 
  1330 ;;  flag            1   24[COMRAM] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  2   12[COMRAM] int 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1340 ;;      Params:         6       0       0       0       0       0       0
  1341 ;;      Locals:         9       0       0       0       0       0       0
  1342 ;;      Temps:          4       0       0       0       0       0       0
  1343 ;;      Totals:        19       0       0       0       0       0       0
  1344 ;;Total ram usage:       19 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    1
  1347 ;; This function calls:
  1348 ;;		___lwdiv
  1349 ;;		___lwmod
  1350 ;;		___wmul
  1351 ;;		_isdigit
  1352 ;; This function is called by:
  1353 ;;		_main
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text13
  1358  00061C                     __ptext13:
  1359                           	opt stack 0
  1360  00061C                     _sprintf:
  1361                           	opt stack 29
  1362                           
  1363                           ;doprnt.c: 494: va_list ap;
  1364                           ;doprnt.c: 499: signed char c;
  1365                           ;doprnt.c: 501: int width;
  1366                           ;doprnt.c: 506: signed char prec;
  1367                           ;doprnt.c: 508: unsigned char flag;
  1368                           ;doprnt.c: 523: union {
  1369                           ;doprnt.c: 524: unsigned long vd;
  1370                           ;doprnt.c: 525: double integ;
  1371                           ;doprnt.c: 526: } tmpval;
  1372                           ;doprnt.c: 528: unsigned int val;
  1373                           ;doprnt.c: 529: unsigned len;
  1374                           ;doprnt.c: 530: const char * cp;
  1375                           ;doprnt.c: 533: *ap = __va_start();
  1376                           
  1377                           ;incstack = 0
  1378  00061C  0E69               	movlw	low (?_sprintf+4)
  1379  00061E  6E6F               	movwf	sprintf@ap,c
  1380  000620  0E00               	movlw	high (?_sprintf+4)
  1381  000622  6E70               	movwf	sprintf@ap+1,c
  1382                           
  1383                           ;doprnt.c: 536: while(c = *f++) {
  1384  000624  D170               	goto	l1561
  1385  000626                     l1423:
  1386                           
  1387                           ;doprnt.c: 538: if(c != '%')
  1388  000626  0E25               	movlw	37
  1389  000628  1877               	xorwf	sprintf@c,w,c
  1390  00062A  B4D8               	btfsc	status,2,c
  1391  00062C  D009               	goto	l1429
  1392                           
  1393                           ;doprnt.c: 540: {
  1394                           ;doprnt.c: 541: ((*sp++ = (c)));
  1395  00062E  C065  FFD9         	movff	sprintf@sp,fsr2l
  1396  000632  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1397  000636  C077  FFDF         	movff	sprintf@c,indf2
  1398  00063A  4A65               	infsnz	sprintf@sp,f,c
  1399  00063C  2A66               	incf	sprintf@sp+1,f,c
  1400                           
  1401                           ;doprnt.c: 542: continue;
  1402  00063E  D163               	goto	l1561
  1403  000640                     l1429:
  1404                           
  1405                           ;doprnt.c: 543: }
  1406                           ;doprnt.c: 546: width = 0;
  1407  000640  0E00               	movlw	0
  1408  000642  6E75               	movwf	sprintf@width+1,c
  1409  000644  0E00               	movlw	0
  1410  000646  6E74               	movwf	sprintf@width,c
  1411                           
  1412                           ;doprnt.c: 548: flag = 0;
  1413  000648  0E00               	movlw	0
  1414  00064A  6E71               	movwf	sprintf@flag,c
  1415                           
  1416                           ;doprnt.c: 551: switch(*f) {
  1417                           
  1418                           ;doprnt.c: 550: for(;;) {
  1419  00064C  D003               	goto	l1435
  1420  00064E                     l1431:
  1421                           
  1422                           ;doprnt.c: 580: flag |= 0x04;
  1423  00064E  8471               	bsf	sprintf@flag,2,c
  1424                           
  1425                           ;doprnt.c: 581: f++;
  1426  000650  4A67               	infsnz	sprintf@f,f,c
  1427  000652  2A68               	incf	sprintf@f+1,f,c
  1428  000654                     l1435:
  1429  000654  C067  FFF6         	movff	sprintf@f,tblptrl
  1430  000658  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1431  00065C                     	if	0	;tblptru may be non-zero
  1432  00065C                     	endif
  1433  00065C                     	if	0	;tblptru may be non-zero
  1434  00065C                     	endif
  1435  00065C  0008               	tblrd		*
  1436  00065E  50F5               	movf	tablat,w,c
  1437                           
  1438                           ; Switch size 1, requested type "space"
  1439                           ; Number of cases is 1, Range of values is 48 to 48
  1440                           ; switch strategies available:
  1441                           ; Name         Instructions Cycles
  1442                           ; simple_byte            4     3 (average)
  1443                           ;	Chosen strategy is simple_byte
  1444  000660  0A30               	xorlw	48	; case 48
  1445  000662  B4D8               	btfsc	status,2,c
  1446  000664  D7F4               	goto	l1431
  1447                           
  1448                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1449                           
  1450                           ;doprnt.c: 586: }
  1451                           
  1452                           ;doprnt.c: 585: break;
  1453  000666  C067  FFF6         	movff	sprintf@f,tblptrl
  1454  00066A  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1455  00066E                     	if	0	;tblptru may be non-zero
  1456  00066E                     	endif
  1457  00066E                     	if	0	;tblptru may be non-zero
  1458  00066E                     	endif
  1459  00066E  0008               	tblrd		*
  1460  000670  50F5               	movf	tablat,w,c
  1461  000672  EC9E  F006         	call	_isdigit
  1462  000676  A0D8               	btfss	status,0,c
  1463  000678  D032               	goto	l1449
  1464                           
  1465                           ;doprnt.c: 598: width = 0;
  1466  00067A  0E00               	movlw	0
  1467  00067C  6E75               	movwf	sprintf@width+1,c
  1468  00067E  0E00               	movlw	0
  1469  000680  6E74               	movwf	sprintf@width,c
  1470  000682                     l1441:
  1471                           
  1472                           ;doprnt.c: 600: width *= 10;
  1473  000682  C074  F059         	movff	sprintf@width,___wmul@multiplier
  1474  000686  C075  F05A         	movff	sprintf@width+1,___wmul@multiplier+1
  1475  00068A  0E00               	movlw	0
  1476  00068C  6E5C               	movwf	___wmul@multiplicand+1,c
  1477  00068E  0E0A               	movlw	10
  1478  000690  6E5B               	movwf	___wmul@multiplicand,c
  1479  000692  EC8B  F006         	call	___wmul	;wreg free
  1480  000696  C059  F074         	movff	?___wmul,sprintf@width
  1481  00069A  C05A  F075         	movff	?___wmul+1,sprintf@width+1
  1482                           
  1483                           ;doprnt.c: 601: width += *f++ - '0';
  1484  00069E  0ED0               	movlw	208
  1485  0006A0  6E6B               	movwf	??_sprintf& (0+255),c
  1486  0006A2  0EFF               	movlw	255
  1487  0006A4  6E6C               	movwf	(??_sprintf+1)& (0+255),c
  1488  0006A6  C067  FFF6         	movff	sprintf@f,tblptrl
  1489  0006AA  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1490  0006AE                     	if	0	;tblptru may be non-zero
  1491  0006AE                     	endif
  1492  0006AE                     	if	0	;tblptru may be non-zero
  1493  0006AE                     	endif
  1494  0006AE  0008               	tblrd		*
  1495  0006B0  50F5               	movf	tablat,w,c
  1496  0006B2  6E6D               	movwf	(??_sprintf+2)& (0+255),c
  1497  0006B4  6A6E               	clrf	(??_sprintf+3)& (0+255),c
  1498  0006B6  506B               	movf	??_sprintf,w,c
  1499  0006B8  266D               	addwf	??_sprintf+2,f,c
  1500  0006BA  506C               	movf	??_sprintf+1,w,c
  1501  0006BC  226E               	addwfc	??_sprintf+3,f,c
  1502  0006BE  506D               	movf	??_sprintf+2,w,c
  1503  0006C0  2674               	addwf	sprintf@width,f,c
  1504  0006C2  506E               	movf	??_sprintf+3,w,c
  1505  0006C4  2275               	addwfc	sprintf@width+1,f,c
  1506  0006C6  4A67               	infsnz	sprintf@f,f,c
  1507  0006C8  2A68               	incf	sprintf@f+1,f,c
  1508                           
  1509                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1510  0006CA  C067  FFF6         	movff	sprintf@f,tblptrl
  1511  0006CE  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1512  0006D2                     	if	0	;tblptru may be non-zero
  1513  0006D2                     	endif
  1514  0006D2                     	if	0	;tblptru may be non-zero
  1515  0006D2                     	endif
  1516  0006D2  0008               	tblrd		*
  1517  0006D4  50F5               	movf	tablat,w,c
  1518  0006D6  EC9E  F006         	call	_isdigit
  1519  0006DA  B0D8               	btfsc	status,0,c
  1520  0006DC  D7D2               	goto	l1441
  1521  0006DE                     l1449:
  1522                           
  1523                           ;doprnt.c: 608: }
  1524                           ;doprnt.c: 611: if(*f == '.') {
  1525  0006DE  C067  FFF6         	movff	sprintf@f,tblptrl
  1526  0006E2  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1527  0006E6                     	if	0	;tblptru may be non-zero
  1528  0006E6                     	endif
  1529  0006E6                     	if	0	;tblptru may be non-zero
  1530  0006E6                     	endif
  1531  0006E6  0008               	tblrd		*
  1532  0006E8  50F5               	movf	tablat,w,c
  1533  0006EA  0A2E               	xorlw	46
  1534  0006EC  A4D8               	btfss	status,2,c
  1535  0006EE  D01F               	goto	l1461
  1536                           
  1537                           ;doprnt.c: 613: f++;
  1538  0006F0  4A67               	infsnz	sprintf@f,f,c
  1539  0006F2  2A68               	incf	sprintf@f+1,f,c
  1540                           
  1541                           ;doprnt.c: 620: {
  1542                           ;doprnt.c: 621: prec = 0;
  1543  0006F4  0E00               	movlw	0
  1544  0006F6  6E76               	movwf	sprintf@prec,c
  1545                           
  1546                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1547  0006F8  D00F               	goto	l1459
  1548  0006FA                     l1455:
  1549                           
  1550                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1551  0006FA  C067  FFF6         	movff	sprintf@f,tblptrl
  1552  0006FE  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1553  000702                     	if	0	;tblptru may be non-zero
  1554  000702                     	endif
  1555  000702                     	if	0	;tblptru may be non-zero
  1556  000702                     	endif
  1557  000702  0008               	tblrd		*
  1558  000704  CFF5 F06B          	movff	tablat,??_sprintf
  1559  000708  5076               	movf	sprintf@prec,w,c
  1560  00070A  0D0A               	mullw	10
  1561  00070C  50F3               	movf	prodl,w,c
  1562  00070E  246B               	addwf	??_sprintf,w,c
  1563  000710  0FD0               	addlw	208
  1564  000712  6E76               	movwf	sprintf@prec,c
  1565  000714  4A67               	infsnz	sprintf@f,f,c
  1566  000716  2A68               	incf	sprintf@f+1,f,c
  1567  000718                     l1459:
  1568  000718  C067  FFF6         	movff	sprintf@f,tblptrl
  1569  00071C  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1570  000720                     	if	0	;tblptru may be non-zero
  1571  000720                     	endif
  1572  000720                     	if	0	;tblptru may be non-zero
  1573  000720                     	endif
  1574  000720  0008               	tblrd		*
  1575  000722  50F5               	movf	tablat,w,c
  1576  000724  EC9E  F006         	call	_isdigit
  1577  000728  A0D8               	btfss	status,0,c
  1578  00072A  D003               	goto	l1465
  1579  00072C  D7E6               	goto	l1455
  1580  00072E                     l1461:
  1581                           
  1582                           ;doprnt.c: 626: prec = 0;
  1583  00072E  0E00               	movlw	0
  1584  000730  6E76               	movwf	sprintf@prec,c
  1585  000732                     l1465:
  1586  000732  C067  FFF6         	movff	sprintf@f,tblptrl
  1587  000736  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1588  00073A  4A67               	infsnz	sprintf@f,f,c
  1589  00073C  2A68               	incf	sprintf@f+1,f,c
  1590  00073E                     	if	0	;tblptru may be non-zero
  1591  00073E                     	endif
  1592  00073E                     	if	0	;tblptru may be non-zero
  1593  00073E                     	endif
  1594  00073E  0008               	tblrd		*
  1595  000740  CFF5 F077          	movff	tablat,sprintf@c
  1596  000744  5077               	movf	sprintf@c,w,c
  1597                           
  1598                           ; Switch size 1, requested type "space"
  1599                           ; Number of cases is 3, Range of values is 0 to 105
  1600                           ; switch strategies available:
  1601                           ; Name         Instructions Cycles
  1602                           ; simple_byte           10     6 (average)
  1603                           ;	Chosen strategy is simple_byte
  1604  000746  0A00               	xorlw	0	; case 0
  1605  000748  B4D8               	btfsc	status,2,c
  1606  00074A  D0E9               	goto	l1563
  1607  00074C  0A64               	xorlw	100	; case 100
  1608  00074E  B4D8               	btfsc	status,2,c
  1609  000750  D003               	goto	l1467
  1610  000752  0A0D               	xorlw	13	; case 105
  1611  000754  A4D8               	btfss	status,2,c
  1612  000756  D0D7               	goto	l1561
  1613  000758                     l1467:
  1614                           
  1615                           ;doprnt.c: 1253: {
  1616                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1617  000758  C06F  FFD9         	movff	sprintf@ap,fsr2l
  1618  00075C  C070  FFDA         	movff	sprintf@ap+1,fsr2h
  1619  000760  CFDE F072          	movff	postinc2,sprintf@val
  1620  000764  CFDD F073          	movff	postdec2,sprintf@val+1
  1621  000768  0E02               	movlw	2
  1622  00076A  266F               	addwf	sprintf@ap,f,c
  1623  00076C  0E00               	movlw	0
  1624  00076E  2270               	addwfc	sprintf@ap+1,f,c
  1625                           
  1626                           ;doprnt.c: 1261: if((int)val < 0) {
  1627  000770  AE73               	btfss	sprintf@val+1,7,c
  1628  000772  D006               	goto	l1477
  1629                           
  1630                           ;doprnt.c: 1262: flag |= 0x03;
  1631  000774  0E03               	movlw	3
  1632  000776  1271               	iorwf	sprintf@flag,f,c
  1633                           
  1634                           ;doprnt.c: 1263: val = -val;
  1635  000778  6C72               	negf	sprintf@val,c
  1636  00077A  1E73               	comf	sprintf@val+1,f,c
  1637  00077C  B0D8               	btfsc	status,0,c
  1638  00077E  2A73               	incf	sprintf@val+1,f,c
  1639  000780                     l1477:
  1640                           
  1641                           ;doprnt.c: 1264: }
  1642                           ;doprnt.c: 1266: }
  1643                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1644  000780  5076               	movf	sprintf@prec,w,c
  1645  000782  A4D8               	btfss	status,2,c
  1646  000784  D004               	goto	l1483
  1647  000786  5072               	movf	sprintf@val,w,c
  1648  000788  1073               	iorwf	sprintf@val+1,w,c
  1649  00078A  B4D8               	btfsc	status,2,c
  1650                           
  1651                           ;doprnt.c: 1291: prec++;
  1652  00078C  2A76               	incf	sprintf@prec,f,c
  1653  00078E                     l1483:
  1654                           
  1655                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1656  00078E  0E01               	movlw	1
  1657  000790  6E77               	movwf	sprintf@c,c
  1658  000792                     l1485:
  1659  000792  0E05               	movlw	5
  1660  000794  1877               	xorwf	sprintf@c,w,c
  1661  000796  B4D8               	btfsc	status,2,c
  1662  000798  D012               	goto	l1497
  1663                           
  1664                           ;doprnt.c: 1306: if(val < dpowers[c])
  1665  00079A  5077               	movf	sprintf@c,w,c
  1666  00079C  0D02               	mullw	2
  1667  00079E  0E01               	movlw	low _dpowers
  1668  0007A0  24F3               	addwf	prodl,w,c
  1669  0007A2  6EF6               	movwf	tblptrl,c
  1670  0007A4  0E06               	movlw	high _dpowers
  1671  0007A6  20F4               	addwfc	prodh,w,c
  1672  0007A8  6EF7               	movwf	tblptrh,c
  1673  0007AA                     	if	0	;There are less than 3 active tblptr bytes
  1674  0007AA                     	endif
  1675  0007AA  0009               	tblrd		*+
  1676  0007AC  50F5               	movf	tablat,w,c
  1677  0007AE  5C72               	subwf	sprintf@val,w,c
  1678  0007B0  0009               	tblrd		*+
  1679  0007B2  50F5               	movf	tablat,w,c
  1680  0007B4  5873               	subwfb	sprintf@val+1,w,c
  1681  0007B6  A0D8               	btfss	status,0,c
  1682  0007B8  D002               	goto	l1497
  1683                           
  1684                           ;doprnt.c: 1307: break;
  1685  0007BA  2A77               	incf	sprintf@c,f,c
  1686  0007BC  D7EA               	goto	l1485
  1687  0007BE                     l1497:
  1688                           
  1689                           ;doprnt.c: 1339: if(c < prec)
  1690  0007BE  5077               	movf	sprintf@c,w,c
  1691  0007C0  0A80               	xorlw	128
  1692  0007C2  6E6B               	movwf	??_sprintf& (0+255),c
  1693  0007C4  5076               	movf	sprintf@prec,w,c
  1694  0007C6  0A80               	xorlw	128
  1695  0007C8  5C6B               	subwf	??_sprintf& (0+255),w,c
  1696  0007CA  B0D8               	btfsc	status,0,c
  1697  0007CC  D003               	goto	l1501
  1698                           
  1699                           ;doprnt.c: 1340: c = prec;
  1700  0007CE  C076  F077         	movff	sprintf@prec,sprintf@c
  1701  0007D2  D009               	goto	l1505
  1702  0007D4                     l1501:
  1703                           
  1704                           ;doprnt.c: 1341: else if(prec < c)
  1705  0007D4  5076               	movf	sprintf@prec,w,c
  1706  0007D6  0A80               	xorlw	128
  1707  0007D8  6E6B               	movwf	??_sprintf& (0+255),c
  1708  0007DA  5077               	movf	sprintf@c,w,c
  1709  0007DC  0A80               	xorlw	128
  1710  0007DE  5C6B               	subwf	??_sprintf& (0+255),w,c
  1711  0007E0  A0D8               	btfss	status,0,c
  1712                           
  1713                           ;doprnt.c: 1342: prec = c;
  1714  0007E2  C077  F076         	movff	sprintf@c,sprintf@prec
  1715  0007E6                     l1505:
  1716                           
  1717                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1718  0007E6  5074               	movf	sprintf@width,w,c
  1719  0007E8  1075               	iorwf	sprintf@width+1,w,c
  1720  0007EA  B4D8               	btfsc	status,2,c
  1721  0007EC  D009               	goto	l1517
  1722  0007EE  C071  F06B         	movff	sprintf@flag,??_sprintf
  1723  0007F2  0E03               	movlw	3
  1724  0007F4  166B               	andwf	??_sprintf,f,c
  1725  0007F6  B4D8               	btfsc	status,2,c
  1726  0007F8  D003               	goto	l1517
  1727                           
  1728                           ;doprnt.c: 1346: width--;
  1729  0007FA  0674               	decf	sprintf@width,f,c
  1730  0007FC  A0D8               	btfss	status,0,c
  1731  0007FE  0675               	decf	sprintf@width+1,f,c
  1732  000800                     l1517:
  1733                           
  1734                           ;doprnt.c: 1353: }
  1735                           ;doprnt.c: 1381: if(width > c)
  1736  000800  0E80               	movlw	128
  1737  000802  BE77               	btfsc	sprintf@c,7,c
  1738  000804  0E7F               	movlw	127
  1739  000806  6E6B               	movwf	??_sprintf& (0+255),c
  1740  000808  5074               	movf	sprintf@width,w,c
  1741  00080A  5C77               	subwf	sprintf@c,w,c
  1742  00080C  5075               	movf	sprintf@width+1,w,c
  1743  00080E  0A80               	xorlw	128
  1744  000810  586B               	subwfb	??_sprintf& (0+255),w,c
  1745  000812  B0D8               	btfsc	status,0,c
  1746  000814  D007               	goto	l1521
  1747                           
  1748                           ;doprnt.c: 1382: width -= c;
  1749  000816  5077               	movf	sprintf@c,w,c
  1750  000818  5E74               	subwf	sprintf@width,f,c
  1751  00081A  0E00               	movlw	0
  1752  00081C  BE77               	btfsc	sprintf@c,7,c
  1753  00081E  0EFF               	movlw	255
  1754  000820  5A75               	subwfb	sprintf@width+1,f,c
  1755  000822  D004               	goto	l1523
  1756  000824                     l1521:
  1757                           
  1758                           ;doprnt.c: 1383: else
  1759                           ;doprnt.c: 1384: width = 0;
  1760  000824  0E00               	movlw	0
  1761  000826  6E75               	movwf	sprintf@width+1,c
  1762  000828  0E00               	movlw	0
  1763  00082A  6E74               	movwf	sprintf@width,c
  1764  00082C                     l1523:
  1765                           
  1766                           ;doprnt.c: 1387: if(flag & 0x04) {
  1767  00082C  A471               	btfss	sprintf@flag,2,c
  1768  00082E  D01E               	goto	l1539
  1769                           
  1770                           ;doprnt.c: 1392: if(flag & 0x03)
  1771  000830  C071  F06B         	movff	sprintf@flag,??_sprintf
  1772  000834  0E03               	movlw	3
  1773  000836  166B               	andwf	??_sprintf,f,c
  1774  000838  B4D8               	btfsc	status,2,c
  1775  00083A  D008               	goto	l1531
  1776                           
  1777                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1778  00083C  C065  FFD9         	movff	sprintf@sp,fsr2l
  1779  000840  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1780  000844  0E2D               	movlw	45
  1781  000846  6EDF               	movwf	indf2,c
  1782  000848  4A65               	infsnz	sprintf@sp,f,c
  1783  00084A  2A66               	incf	sprintf@sp+1,f,c
  1784  00084C                     l1531:
  1785                           
  1786                           ;doprnt.c: 1415: if(width)
  1787  00084C  5074               	movf	sprintf@width,w,c
  1788  00084E  1075               	iorwf	sprintf@width+1,w,c
  1789  000850  B4D8               	btfsc	status,2,c
  1790  000852  D055               	goto	l1559
  1791                           
  1792                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1793                           
  1794                           ;doprnt.c: 1416: do
  1795  000854  C065  FFD9         	movff	sprintf@sp,fsr2l
  1796  000858  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1797  00085C  0E30               	movlw	48
  1798  00085E  6EDF               	movwf	indf2,c
  1799  000860  4A65               	infsnz	sprintf@sp,f,c
  1800  000862  2A66               	incf	sprintf@sp+1,f,c
  1801                           
  1802                           ;doprnt.c: 1418: while(--width);
  1803  000864  0674               	decf	sprintf@width,f,c
  1804  000866  A0D8               	btfss	status,0,c
  1805  000868  0675               	decf	sprintf@width+1,f,c
  1806  00086A  D7F0               	goto	l1531
  1807  00086C                     l1539:
  1808                           
  1809                           ;doprnt.c: 1422: {
  1810                           ;doprnt.c: 1424: if(width
  1811                           ;doprnt.c: 1428: )
  1812  00086C  5074               	movf	sprintf@width,w,c
  1813  00086E  1075               	iorwf	sprintf@width+1,w,c
  1814  000870  B4D8               	btfsc	status,2,c
  1815  000872  D00F               	goto	l1547
  1816  000874                     l1541:
  1817                           
  1818                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1819  000874  C065  FFD9         	movff	sprintf@sp,fsr2l
  1820  000878  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1821  00087C  0E20               	movlw	32
  1822  00087E  6EDF               	movwf	indf2,c
  1823  000880  4A65               	infsnz	sprintf@sp,f,c
  1824  000882  2A66               	incf	sprintf@sp+1,f,c
  1825                           
  1826                           ;doprnt.c: 1431: while(--width);
  1827  000884  0674               	decf	sprintf@width,f,c
  1828  000886  A0D8               	btfss	status,0,c
  1829  000888  0675               	decf	sprintf@width+1,f,c
  1830  00088A  5074               	movf	sprintf@width,w,c
  1831  00088C  1075               	iorwf	sprintf@width+1,w,c
  1832  00088E  A4D8               	btfss	status,2,c
  1833  000890  D7F1               	goto	l1541
  1834  000892                     l1547:
  1835                           
  1836                           ;doprnt.c: 1438: if(flag & 0x03)
  1837  000892  C071  F06B         	movff	sprintf@flag,??_sprintf
  1838  000896  0E03               	movlw	3
  1839  000898  166B               	andwf	??_sprintf,f,c
  1840  00089A  B4D8               	btfsc	status,2,c
  1841  00089C  D030               	goto	l1559
  1842                           
  1843                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1844  00089E  C065  FFD9         	movff	sprintf@sp,fsr2l
  1845  0008A2  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1846  0008A6  0E2D               	movlw	45
  1847  0008A8  6EDF               	movwf	indf2,c
  1848  0008AA  D027               	goto	l1557
  1849  0008AC                     l1553:
  1850                           
  1851                           ;doprnt.c: 1478: {
  1852                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1853  0008AC  5076               	movf	sprintf@prec,w,c
  1854  0008AE  0D02               	mullw	2
  1855  0008B0  0E01               	movlw	low _dpowers
  1856  0008B2  24F3               	addwf	prodl,w,c
  1857  0008B4  6EF6               	movwf	tblptrl,c
  1858  0008B6  0E06               	movlw	high _dpowers
  1859  0008B8  20F4               	addwfc	prodh,w,c
  1860  0008BA  6EF7               	movwf	tblptrh,c
  1861  0008BC                     	if	0	;There are less than 3 active tblptr bytes
  1862  0008BC                     	endif
  1863  0008BC  0009               	tblrd		*+
  1864  0008BE  CFF5 F05B          	movff	tablat,___lwdiv@divisor
  1865  0008C2  000A               	tblrd		*-
  1866  0008C4  CFF5 F05C          	movff	tablat,___lwdiv@divisor+1
  1867  0008C8  C072  F059         	movff	sprintf@val,___lwdiv@dividend
  1868  0008CC  C073  F05A         	movff	sprintf@val+1,___lwdiv@dividend+1
  1869  0008D0  EC9F  F005         	call	___lwdiv	;wreg free
  1870  0008D4  C059  F060         	movff	?___lwdiv,___lwmod@dividend
  1871  0008D8  C05A  F061         	movff	?___lwdiv+1,___lwmod@dividend+1
  1872  0008DC  0E00               	movlw	0
  1873  0008DE  6E63               	movwf	___lwmod@divisor+1,c
  1874  0008E0  0E0A               	movlw	10
  1875  0008E2  6E62               	movwf	___lwmod@divisor,c
  1876  0008E4  ECF1  F005         	call	___lwmod	;wreg free
  1877  0008E8  5060               	movf	?___lwmod,w,c
  1878  0008EA  0F30               	addlw	48
  1879  0008EC  6E77               	movwf	sprintf@c,c
  1880                           
  1881                           ;doprnt.c: 1523: }
  1882                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1883  0008EE  C065  FFD9         	movff	sprintf@sp,fsr2l
  1884  0008F2  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1885  0008F6  C077  FFDF         	movff	sprintf@c,indf2
  1886  0008FA                     l1557:
  1887  0008FA  4A65               	infsnz	sprintf@sp,f,c
  1888  0008FC  2A66               	incf	sprintf@sp+1,f,c
  1889  0008FE                     l1559:
  1890  0008FE  0676               	decf	sprintf@prec,f,c
  1891  000900  2876               	incf	sprintf@prec,w,c
  1892  000902  A4D8               	btfss	status,2,c
  1893  000904  D7D3               	goto	l1553
  1894  000906                     l1561:
  1895  000906  C067  FFF6         	movff	sprintf@f,tblptrl
  1896  00090A  C068  FFF7         	movff	sprintf@f+1,tblptrh
  1897  00090E  4A67               	infsnz	sprintf@f,f,c
  1898  000910  2A68               	incf	sprintf@f+1,f,c
  1899  000912                     	if	0	;tblptru may be non-zero
  1900  000912                     	endif
  1901  000912                     	if	0	;tblptru may be non-zero
  1902  000912                     	endif
  1903  000912  0008               	tblrd		*
  1904  000914  CFF5 F077          	movff	tablat,sprintf@c
  1905  000918  5077               	movf	sprintf@c,w,c
  1906  00091A  A4D8               	btfss	status,2,c
  1907  00091C  D684               	goto	l1423
  1908  00091E                     l1563:
  1909                           
  1910                           ;doprnt.c: 1538: *sp = 0;
  1911  00091E  C065  FFD9         	movff	sprintf@sp,fsr2l
  1912  000922  C066  FFDA         	movff	sprintf@sp+1,fsr2h
  1913  000926  0E00               	movlw	0
  1914  000928  6EDF               	movwf	indf2,c
  1915  00092A  0012               	return	
  1916  00092C                     __end_of_sprintf:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           prodh	equ	0xFF4
  1923                           prodl	equ	0xFF3
  1924                           indf0	equ	0xFEF
  1925                           postinc0	equ	0xFEE
  1926                           fsr0h	equ	0xFEA
  1927                           fsr0l	equ	0xFE9
  1928                           wreg	equ	0xFE8
  1929                           indf2	equ	0xFDF
  1930                           postinc2	equ	0xFDE
  1931                           postdec2	equ	0xFDD
  1932                           fsr2h	equ	0xFDA
  1933                           fsr2l	equ	0xFD9
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _isdigit *****************
  1937 ;; Defined at:
  1938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  c               1    wreg     unsigned char 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  c               1    2[COMRAM] unsigned char 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;		None               void
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1952 ;;      Params:         0       0       0       0       0       0       0
  1953 ;;      Locals:         2       0       0       0       0       0       0
  1954 ;;      Temps:          1       0       0       0       0       0       0
  1955 ;;      Totals:         3       0       0       0       0       0       0
  1956 ;;Total ram usage:        3 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_sprintf
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text14
  1966  000D3C                     __ptext14:
  1967                           	opt stack 0
  1968  000D3C                     _isdigit:
  1969                           	opt stack 29
  1970                           
  1971                           ;incstack = 0
  1972                           ;isdigit@c stored from wreg
  1973  000D3C  6E5B               	movwf	isdigit@c,c
  1974  000D3E  0E00               	movlw	0
  1975  000D40  6E5A               	movwf	_isdigit$926,c
  1976  000D42  0E3A               	movlw	58
  1977  000D44  605B               	cpfslt	isdigit@c,c
  1978  000D46  D005               	goto	l1335
  1979  000D48  0E2F               	movlw	47
  1980  000D4A  645B               	cpfsgt	isdigit@c,c
  1981  000D4C  D002               	goto	l1335
  1982  000D4E  0E01               	movlw	1
  1983  000D50  6E5A               	movwf	_isdigit$926,c
  1984  000D52                     l1335:
  1985  000D52  C05A  F059         	movff	_isdigit$926,??_isdigit
  1986  000D56  3059               	rrcf	??_isdigit,w,c
  1987  000D58  0012               	return	
  1988  000D5A                     __end_of_isdigit:
  1989                           	opt stack 0
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           indf0	equ	0xFEF
  1997                           postinc0	equ	0xFEE
  1998                           fsr0h	equ	0xFEA
  1999                           fsr0l	equ	0xFE9
  2000                           wreg	equ	0xFE8
  2001                           indf2	equ	0xFDF
  2002                           postinc2	equ	0xFDE
  2003                           postdec2	equ	0xFDD
  2004                           fsr2h	equ	0xFDA
  2005                           fsr2l	equ	0xFD9
  2006                           status	equ	0xFD8
  2007                           
  2008 ;; *************** function ___wmul *****************
  2009 ;; Defined at:
  2010 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  multiplier      2    0[COMRAM] unsigned int 
  2013 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  product         2    4[COMRAM] unsigned int 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  2    0[COMRAM] unsigned int 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, status,0, prodl, prodh
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2025 ;;      Params:         4       0       0       0       0       0       0
  2026 ;;      Locals:         2       0       0       0       0       0       0
  2027 ;;      Temps:          0       0       0       0       0       0       0
  2028 ;;      Totals:         6       0       0       0       0       0       0
  2029 ;;Total ram usage:        6 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_sprintf
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text15
  2039  000D16                     __ptext15:
  2040                           	opt stack 0
  2041  000D16                     ___wmul:
  2042                           	opt stack 29
  2043                           
  2044                           ;incstack = 0
  2045  000D16  5059               	movf	___wmul@multiplier,w,c
  2046  000D18  025B               	mulwf	___wmul@multiplicand,c
  2047  000D1A  CFF3 F05D          	movff	prodl,___wmul@product
  2048  000D1E  CFF4 F05E          	movff	prodh,___wmul@product+1
  2049  000D22  5059               	movf	___wmul@multiplier,w,c
  2050  000D24  025C               	mulwf	___wmul@multiplicand+1,c
  2051  000D26  50F3               	movf	prodl,w,c
  2052  000D28  265E               	addwf	___wmul@product+1,f,c
  2053  000D2A  505A               	movf	___wmul@multiplier+1,w,c
  2054  000D2C  025B               	mulwf	___wmul@multiplicand,c
  2055  000D2E  50F3               	movf	prodl,w,c
  2056  000D30  265E               	addwf	___wmul@product+1,f,c
  2057  000D32  C05D  F059         	movff	___wmul@product,?___wmul
  2058  000D36  C05E  F05A         	movff	___wmul@product+1,?___wmul+1
  2059  000D3A  0012               	return	
  2060  000D3C                     __end_of___wmul:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           indf0	equ	0xFEF
  2069                           postinc0	equ	0xFEE
  2070                           fsr0h	equ	0xFEA
  2071                           fsr0l	equ	0xFE9
  2072                           wreg	equ	0xFE8
  2073                           indf2	equ	0xFDF
  2074                           postinc2	equ	0xFDE
  2075                           postdec2	equ	0xFDD
  2076                           fsr2h	equ	0xFDA
  2077                           fsr2l	equ	0xFD9
  2078                           status	equ	0xFD8
  2079                           
  2080 ;; *************** function ___lwmod *****************
  2081 ;; Defined at:
  2082 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  dividend        2    7[COMRAM] unsigned int 
  2085 ;;  divisor         2    9[COMRAM] unsigned int 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  counter         1   11[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  2    7[COMRAM] unsigned int 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2097 ;;      Params:         4       0       0       0       0       0       0
  2098 ;;      Locals:         1       0       0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0
  2100 ;;      Totals:         5       0       0       0       0       0       0
  2101 ;;Total ram usage:        5 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_sprintf
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text16
  2111  000BE2                     __ptext16:
  2112                           	opt stack 0
  2113  000BE2                     ___lwmod:
  2114                           	opt stack 29
  2115                           
  2116                           ;incstack = 0
  2117  000BE2  5062               	movf	___lwmod@divisor,w,c
  2118  000BE4  1063               	iorwf	___lwmod@divisor+1,w,c
  2119  000BE6  B4D8               	btfsc	status,2,c
  2120  000BE8  D018               	goto	l690
  2121  000BEA  0E01               	movlw	1
  2122  000BEC  6E64               	movwf	___lwmod@counter,c
  2123  000BEE  D004               	goto	l1373
  2124  000BF0                     l1371:
  2125  000BF0  90D8               	bcf	status,0,c
  2126  000BF2  3662               	rlcf	___lwmod@divisor,f,c
  2127  000BF4  3663               	rlcf	___lwmod@divisor+1,f,c
  2128  000BF6  2A64               	incf	___lwmod@counter,f,c
  2129  000BF8                     l1373:
  2130  000BF8  AE63               	btfss	___lwmod@divisor+1,7,c
  2131  000BFA  D7FA               	goto	l1371
  2132  000BFC                     l1375:
  2133  000BFC  5062               	movf	___lwmod@divisor,w,c
  2134  000BFE  5C60               	subwf	___lwmod@dividend,w,c
  2135  000C00  5063               	movf	___lwmod@divisor+1,w,c
  2136  000C02  5861               	subwfb	___lwmod@dividend+1,w,c
  2137  000C04  A0D8               	btfss	status,0,c
  2138  000C06  D004               	goto	l1379
  2139  000C08  5062               	movf	___lwmod@divisor,w,c
  2140  000C0A  5E60               	subwf	___lwmod@dividend,f,c
  2141  000C0C  5063               	movf	___lwmod@divisor+1,w,c
  2142  000C0E  5A61               	subwfb	___lwmod@dividend+1,f,c
  2143  000C10                     l1379:
  2144  000C10  90D8               	bcf	status,0,c
  2145  000C12  3263               	rrcf	___lwmod@divisor+1,f,c
  2146  000C14  3262               	rrcf	___lwmod@divisor,f,c
  2147  000C16  2E64               	decfsz	___lwmod@counter,f,c
  2148  000C18  D7F1               	goto	l1375
  2149  000C1A                     l690:
  2150  000C1A  C060  F060         	movff	___lwmod@dividend,?___lwmod
  2151  000C1E  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  2152  000C22  0012               	return		;funcret
  2153  000C24                     __end_of___lwmod:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           prodh	equ	0xFF4
  2160                           prodl	equ	0xFF3
  2161                           indf0	equ	0xFEF
  2162                           postinc0	equ	0xFEE
  2163                           fsr0h	equ	0xFEA
  2164                           fsr0l	equ	0xFE9
  2165                           wreg	equ	0xFE8
  2166                           indf2	equ	0xFDF
  2167                           postinc2	equ	0xFDE
  2168                           postdec2	equ	0xFDD
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function ___lwdiv *****************
  2174 ;; Defined at:
  2175 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  dividend        2    0[COMRAM] unsigned int 
  2178 ;;  divisor         2    2[COMRAM] unsigned int 
  2179 ;; Auto vars:     Size  Location     Type
  2180 ;;  quotient        2    4[COMRAM] unsigned int 
  2181 ;;  counter         1    6[COMRAM] unsigned char 
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  2    0[COMRAM] unsigned int 
  2184 ;; Registers used:
  2185 ;;		wreg, status,2, status,0
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2191 ;;      Params:         4       0       0       0       0       0       0
  2192 ;;      Locals:         3       0       0       0       0       0       0
  2193 ;;      Temps:          0       0       0       0       0       0       0
  2194 ;;      Totals:         7       0       0       0       0       0       0
  2195 ;;Total ram usage:        7 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; This function calls:
  2198 ;;		Nothing
  2199 ;; This function is called by:
  2200 ;;		_sprintf
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           	psect	text17
  2205  000B3E                     __ptext17:
  2206                           	opt stack 0
  2207  000B3E                     ___lwdiv:
  2208                           	opt stack 29
  2209                           
  2210                           ;incstack = 0
  2211  000B3E  0E00               	movlw	0
  2212  000B40  6E5E               	movwf	___lwdiv@quotient+1,c
  2213  000B42  0E00               	movlw	0
  2214  000B44  6E5D               	movwf	___lwdiv@quotient,c
  2215  000B46  505B               	movf	___lwdiv@divisor,w,c
  2216  000B48  105C               	iorwf	___lwdiv@divisor+1,w,c
  2217  000B4A  B4D8               	btfsc	status,2,c
  2218  000B4C  D01C               	goto	l680
  2219  000B4E  0E01               	movlw	1
  2220  000B50  6E5F               	movwf	___lwdiv@counter,c
  2221  000B52  D004               	goto	l1353
  2222  000B54                     l1351:
  2223  000B54  90D8               	bcf	status,0,c
  2224  000B56  365B               	rlcf	___lwdiv@divisor,f,c
  2225  000B58  365C               	rlcf	___lwdiv@divisor+1,f,c
  2226  000B5A  2A5F               	incf	___lwdiv@counter,f,c
  2227  000B5C                     l1353:
  2228  000B5C  AE5C               	btfss	___lwdiv@divisor+1,7,c
  2229  000B5E  D7FA               	goto	l1351
  2230  000B60                     l1355:
  2231  000B60  90D8               	bcf	status,0,c
  2232  000B62  365D               	rlcf	___lwdiv@quotient,f,c
  2233  000B64  365E               	rlcf	___lwdiv@quotient+1,f,c
  2234  000B66  505B               	movf	___lwdiv@divisor,w,c
  2235  000B68  5C59               	subwf	___lwdiv@dividend,w,c
  2236  000B6A  505C               	movf	___lwdiv@divisor+1,w,c
  2237  000B6C  585A               	subwfb	___lwdiv@dividend+1,w,c
  2238  000B6E  A0D8               	btfss	status,0,c
  2239  000B70  D005               	goto	l1363
  2240  000B72  505B               	movf	___lwdiv@divisor,w,c
  2241  000B74  5E59               	subwf	___lwdiv@dividend,f,c
  2242  000B76  505C               	movf	___lwdiv@divisor+1,w,c
  2243  000B78  5A5A               	subwfb	___lwdiv@dividend+1,f,c
  2244  000B7A  805D               	bsf	___lwdiv@quotient,0,c
  2245  000B7C                     l1363:
  2246  000B7C  90D8               	bcf	status,0,c
  2247  000B7E  325C               	rrcf	___lwdiv@divisor+1,f,c
  2248  000B80  325B               	rrcf	___lwdiv@divisor,f,c
  2249  000B82  2E5F               	decfsz	___lwdiv@counter,f,c
  2250  000B84  D7ED               	goto	l1355
  2251  000B86                     l680:
  2252  000B86  C05D  F059         	movff	___lwdiv@quotient,?___lwdiv
  2253  000B8A  C05E  F05A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2254  000B8E  0012               	return		;funcret
  2255  000B90                     __end_of___lwdiv:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           indf0	equ	0xFEF
  2264                           postinc0	equ	0xFEE
  2265                           fsr0h	equ	0xFEA
  2266                           fsr0l	equ	0xFE9
  2267                           wreg	equ	0xFE8
  2268                           indf2	equ	0xFDF
  2269                           postinc2	equ	0xFDE
  2270                           postdec2	equ	0xFDD
  2271                           fsr2h	equ	0xFDA
  2272                           fsr2l	equ	0xFD9
  2273                           status	equ	0xFD8
  2274                           
  2275 ;; *************** function _lcdPuts *****************
  2276 ;; Defined at:
  2277 ;;		line 44 in file "myLCD.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  str             2    5[COMRAM] PTR unsigned char 
  2280 ;;		 -> buff(86), STR_1(7), 
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;		None
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2292 ;;      Params:         2       0       0       0       0       0       0
  2293 ;;      Locals:         0       0       0       0       0       0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0
  2295 ;;      Totals:         2       0       0       0       0       0       0
  2296 ;;Total ram usage:        2 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    3
  2299 ;; This function calls:
  2300 ;;		_lcdPutc
  2301 ;; This function is called by:
  2302 ;;		_main
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text18
  2307  000B90                     __ptext18:
  2308                           	opt stack 0
  2309  000B90                     _lcdPuts:
  2310                           	opt stack 27
  2311                           
  2312                           ;myLCD.c: 46: while(*str)
  2313                           
  2314                           ;incstack = 0
  2315  000B90  D014               	goto	l1419
  2316  000B92                     l1415:
  2317                           
  2318                           ;myLCD.c: 47: {
  2319                           ;myLCD.c: 48: lcdPutc(*str);
  2320  000B92  C05E  FFF6         	movff	lcdPuts@str,tblptrl
  2321  000B96  C05F  FFF7         	movff	lcdPuts@str+1,tblptrh
  2322  000B9A  6AF8               	clrf	tblptru,c
  2323  000B9C  0E05               	movlw	(high __ramtop+-1)
  2324  000B9E  64F7               	cpfsgt	tblptrh,c
  2325  000BA0  D003               	bra	u767
  2326  000BA2  0008               	tblrd		*
  2327  000BA4  50F5               	movf	tablat,w,c
  2328  000BA6  D005               	bra	u760
  2329  000BA8                     u767:
  2330  000BA8  CFF6 FFE9          	movff	tblptrl,fsr0l
  2331  000BAC  CFF7 FFEA          	movff	tblptrh,fsr0h
  2332  000BB0  50EF               	movf	indf0,w,c
  2333  000BB2                     u760:
  2334  000BB2  EC21  F007         	call	_lcdPutc
  2335                           
  2336                           ;myLCD.c: 49: str++;
  2337  000BB6  4A5E               	infsnz	lcdPuts@str,f,c
  2338  000BB8  2A5F               	incf	lcdPuts@str+1,f,c
  2339  000BBA                     l1419:
  2340  000BBA  C05E  FFF6         	movff	lcdPuts@str,tblptrl
  2341  000BBE  C05F  FFF7         	movff	lcdPuts@str+1,tblptrh
  2342  000BC2  6AF8               	clrf	tblptru,c
  2343  000BC4  0E05               	movlw	(high __ramtop+-1)
  2344  000BC6  64F7               	cpfsgt	tblptrh,c
  2345  000BC8  D003               	bra	u777
  2346  000BCA  0008               	tblrd		*
  2347  000BCC  50F5               	movf	tablat,w,c
  2348  000BCE  D005               	bra	u770
  2349  000BD0                     u777:
  2350  000BD0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2351  000BD4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2352  000BD8  50EF               	movf	indf0,w,c
  2353  000BDA                     u770:
  2354  000BDA  0900               	iorlw	0
  2355  000BDC  B4D8               	btfsc	status,2,c
  2356  000BDE  0012               	return	
  2357  000BE0  D7D8               	goto	l1415
  2358  000BE2                     __end_of_lcdPuts:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           indf0	equ	0xFEF
  2367                           postinc0	equ	0xFEE
  2368                           fsr0h	equ	0xFEA
  2369                           fsr0l	equ	0xFE9
  2370                           wreg	equ	0xFE8
  2371                           indf2	equ	0xFDF
  2372                           postinc2	equ	0xFDE
  2373                           postdec2	equ	0xFDD
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _lcdPutc *****************
  2379 ;; Defined at:
  2380 ;;		line 36 in file "myLCD.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  chr             1    wreg     unsigned char 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  chr             1    4[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2394 ;;      Params:         0       0       0       0       0       0       0
  2395 ;;      Locals:         1       0       0       0       0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0
  2397 ;;      Totals:         1       0       0       0       0       0       0
  2398 ;;Total ram usage:        1 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    2
  2401 ;; This function calls:
  2402 ;;		_lcdByte
  2403 ;; This function is called by:
  2404 ;;		_lcdPuts
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text19
  2409  000E42                     __ptext19:
  2410                           	opt stack 0
  2411  000E42                     _lcdPutc:
  2412                           	opt stack 27
  2413                           
  2414                           ;incstack = 0
  2415                           ;lcdPutc@chr stored from wreg
  2416  000E42  6E5D               	movwf	lcdPutc@chr,c
  2417                           
  2418                           ;myLCD.c: 38: LATDbits.LATD0 = 1;
  2419  000E44  808C               	bsf	3980,0,c	;volatile
  2420                           
  2421                           ;myLCD.c: 39: LATDbits.LATD1 = 0;
  2422  000E46  928C               	bcf	3980,1,c	;volatile
  2423                           
  2424                           ;myLCD.c: 40: lcdByte(chr);
  2425  000E48  505D               	movf	lcdPutc@chr,w,c
  2426  000E4A  ECC5  F006         	call	_lcdByte
  2427  000E4E  0012               	return		;funcret
  2428  000E50                     __end_of_lcdPutc:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           tblptrh	equ	0xFF7
  2432                           tblptrl	equ	0xFF6
  2433                           tablat	equ	0xFF5
  2434                           prodh	equ	0xFF4
  2435                           prodl	equ	0xFF3
  2436                           indf0	equ	0xFEF
  2437                           postinc0	equ	0xFEE
  2438                           fsr0h	equ	0xFEA
  2439                           fsr0l	equ	0xFE9
  2440                           wreg	equ	0xFE8
  2441                           indf2	equ	0xFDF
  2442                           postinc2	equ	0xFDE
  2443                           postdec2	equ	0xFDD
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _lcdInit *****************
  2449 ;; Defined at:
  2450 ;;		line 63 in file "myLCD.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;		None
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  1    wreg      void 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0, cstack
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2464 ;;      Params:         0       0       0       0       0       0       0
  2465 ;;      Locals:         0       0       0       0       0       0       0
  2466 ;;      Temps:          1       0       0       0       0       0       0
  2467 ;;      Totals:         1       0       0       0       0       0       0
  2468 ;;Total ram usage:        1 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    3
  2471 ;; This function calls:
  2472 ;;		_lcdCmd
  2473 ;;		_lcdNible
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text20
  2480  00092C                     __ptext20:
  2481                           	opt stack 0
  2482  00092C                     _lcdInit:
  2483                           	opt stack 27
  2484                           
  2485                           ;myLCD.c: 66: TRISDbits.TRISD3 = 0;
  2486                           
  2487                           ;incstack = 0
  2488  00092C  9695               	bcf	3989,3,c	;volatile
  2489                           
  2490                           ;myLCD.c: 67: TRISDbits.TRISD4 = 0;
  2491  00092E  9895               	bcf	3989,4,c	;volatile
  2492                           
  2493                           ;myLCD.c: 68: TRISDbits.TRISD5 = 0;
  2494  000930  9A95               	bcf	3989,5,c	;volatile
  2495                           
  2496                           ;myLCD.c: 69: TRISDbits.TRISD6 = 0;
  2497  000932  9C95               	bcf	3989,6,c	;volatile
  2498                           
  2499                           ;myLCD.c: 71: TRISDbits.TRISD0 = 0;
  2500  000934  9095               	bcf	3989,0,c	;volatile
  2501                           
  2502                           ;myLCD.c: 72: TRISDbits.TRISD1 = 0;
  2503  000936  9295               	bcf	3989,1,c	;volatile
  2504                           
  2505                           ;myLCD.c: 73: TRISDbits.TRISD2 = 0;
  2506  000938  9495               	bcf	3989,2,c	;volatile
  2507                           
  2508                           ;myLCD.c: 76: _delay((unsigned long)((20)*(11059200/4000.0)));
  2509  00093A  0E48               	movlw	72
  2510  00093C  6E5E               	movwf	??_lcdInit& (0+255),c
  2511  00093E  0ECF               	movlw	207
  2512  000940                     u1147:
  2513  000940  2EE8               	decfsz	wreg,f,c
  2514  000942  D7FE               	bra	u1147
  2515  000944  2E5E               	decfsz	??_lcdInit& (0+255),f,c
  2516  000946  D7FC               	bra	u1147
  2517  000948  F000               	nop	
  2518                           
  2519                           ;myLCD.c: 77: lcdNible(0x30);
  2520  00094A  0E30               	movlw	48
  2521  00094C  ECE1  F004         	call	_lcdNible
  2522                           
  2523                           ;myLCD.c: 79: _delay((unsigned long)((20)*(11059200/4000.0)));
  2524  000950  0E48               	movlw	72
  2525  000952  6E5E               	movwf	??_lcdInit& (0+255),c
  2526  000954  0ECF               	movlw	207
  2527  000956                     u1157:
  2528  000956  2EE8               	decfsz	wreg,f,c
  2529  000958  D7FE               	bra	u1157
  2530  00095A  2E5E               	decfsz	??_lcdInit& (0+255),f,c
  2531  00095C  D7FC               	bra	u1157
  2532  00095E  F000               	nop	
  2533                           
  2534                           ;myLCD.c: 80: lcdNible(0x30);
  2535  000960  0E30               	movlw	48
  2536  000962  ECE1  F004         	call	_lcdNible
  2537                           
  2538                           ;myLCD.c: 82: _delay((unsigned long)((20)*(11059200/4000.0)));
  2539  000966  0E48               	movlw	72
  2540  000968  6E5E               	movwf	??_lcdInit& (0+255),c
  2541  00096A  0ECF               	movlw	207
  2542  00096C                     u1167:
  2543  00096C  2EE8               	decfsz	wreg,f,c
  2544  00096E  D7FE               	bra	u1167
  2545  000970  2E5E               	decfsz	??_lcdInit& (0+255),f,c
  2546  000972  D7FC               	bra	u1167
  2547  000974  F000               	nop	
  2548                           
  2549                           ;myLCD.c: 83: lcdNible(0x30);
  2550  000976  0E30               	movlw	48
  2551  000978  ECE1  F004         	call	_lcdNible
  2552                           
  2553                           ;myLCD.c: 85: _delay((unsigned long)((20)*(11059200/4000.0)));
  2554  00097C  0E48               	movlw	72
  2555  00097E  6E5E               	movwf	??_lcdInit& (0+255),c
  2556  000980  0ECF               	movlw	207
  2557  000982                     u1177:
  2558  000982  2EE8               	decfsz	wreg,f,c
  2559  000984  D7FE               	bra	u1177
  2560  000986  2E5E               	decfsz	??_lcdInit& (0+255),f,c
  2561  000988  D7FC               	bra	u1177
  2562  00098A  F000               	nop	
  2563                           
  2564                           ;myLCD.c: 86: lcdNible(0x20);
  2565  00098C  0E20               	movlw	32
  2566  00098E  ECE1  F004         	call	_lcdNible
  2567                           
  2568                           ;myLCD.c: 88: lcdCmd(0x28);
  2569  000992  0E28               	movlw	40
  2570  000994  EC28  F007         	call	_lcdCmd
  2571                           
  2572                           ;myLCD.c: 89: lcdCmd(0x0C);
  2573  000998  0E0C               	movlw	12
  2574  00099A  EC28  F007         	call	_lcdCmd
  2575                           
  2576                           ;myLCD.c: 90: lcdCmd(0x06);
  2577  00099E  0E06               	movlw	6
  2578  0009A0  EC28  F007         	call	_lcdCmd
  2579                           
  2580                           ;myLCD.c: 91: lcdCmd(0x01);
  2581  0009A4  0E01               	movlw	1
  2582  0009A6  EC28  F007         	call	_lcdCmd
  2583                           
  2584                           ;myLCD.c: 92: lcdCmd(0x02);
  2585  0009AA  0E02               	movlw	2
  2586  0009AC  EC28  F007         	call	_lcdCmd
  2587                           
  2588                           ;myLCD.c: 94: _delay((unsigned long)((50)*(11059200/4000.0)));
  2589  0009B0  0EB4               	movlw	180
  2590  0009B2  6E5E               	movwf	??_lcdInit& (0+255),c
  2591  0009B4  0E87               	movlw	135
  2592  0009B6                     u1187:
  2593  0009B6  2EE8               	decfsz	wreg,f,c
  2594  0009B8  D7FE               	bra	u1187
  2595  0009BA  2E5E               	decfsz	??_lcdInit& (0+255),f,c
  2596  0009BC  D7FC               	bra	u1187
  2597  0009BE  F000               	nop	
  2598  0009C0  0012               	return		;funcret
  2599  0009C2                     __end_of_lcdInit:
  2600                           	opt stack 0
  2601                           tblptru	equ	0xFF8
  2602                           tblptrh	equ	0xFF7
  2603                           tblptrl	equ	0xFF6
  2604                           tablat	equ	0xFF5
  2605                           prodh	equ	0xFF4
  2606                           prodl	equ	0xFF3
  2607                           indf0	equ	0xFEF
  2608                           postinc0	equ	0xFEE
  2609                           fsr0h	equ	0xFEA
  2610                           fsr0l	equ	0xFE9
  2611                           wreg	equ	0xFE8
  2612                           indf2	equ	0xFDF
  2613                           postinc2	equ	0xFDE
  2614                           postdec2	equ	0xFDD
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _lcdGotoxy *****************
  2620 ;; Defined at:
  2621 ;;		line 54 in file "myLCD.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  col             1    wreg     unsigned char 
  2624 ;;  row             1    5[COMRAM] unsigned char 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  col             1    6[COMRAM] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2636 ;;      Params:         1       0       0       0       0       0       0
  2637 ;;      Locals:         1       0       0       0       0       0       0
  2638 ;;      Temps:          0       0       0       0       0       0       0
  2639 ;;      Totals:         2       0       0       0       0       0       0
  2640 ;;Total ram usage:        2 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    3
  2643 ;; This function calls:
  2644 ;;		_lcdCmd
  2645 ;; This function is called by:
  2646 ;;		_main
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text21
  2651  000C24                     __ptext21:
  2652                           	opt stack 0
  2653  000C24                     _lcdGotoxy:
  2654                           	opt stack 27
  2655                           
  2656                           ;incstack = 0
  2657                           ;lcdGotoxy@col stored from wreg
  2658  000C24  6E5F               	movwf	lcdGotoxy@col,c
  2659                           
  2660                           ;myLCD.c: 56: if(row == 1) lcdCmd(0x80 + col);
  2661  000C26  045E               	decf	lcdGotoxy@row,w,c
  2662  000C28  A4D8               	btfss	status,2,c
  2663  000C2A  D004               	goto	l1571
  2664  000C2C  505F               	movf	lcdGotoxy@col,w,c
  2665  000C2E  0F80               	addlw	128
  2666  000C30  EC28  F007         	call	_lcdCmd
  2667  000C34                     l1571:
  2668                           
  2669                           ;myLCD.c: 57: if(row == 2) lcdCmd(0xC0 + col);
  2670  000C34  0E02               	movlw	2
  2671  000C36  185E               	xorwf	lcdGotoxy@row,w,c
  2672  000C38  A4D8               	btfss	status,2,c
  2673  000C3A  D004               	goto	l1575
  2674  000C3C  505F               	movf	lcdGotoxy@col,w,c
  2675  000C3E  0FC0               	addlw	192
  2676  000C40  EC28  F007         	call	_lcdCmd
  2677  000C44                     l1575:
  2678                           
  2679                           ;myLCD.c: 58: if(row == 3) lcdCmd(0x94 + col);
  2680  000C44  0E03               	movlw	3
  2681  000C46  185E               	xorwf	lcdGotoxy@row,w,c
  2682  000C48  A4D8               	btfss	status,2,c
  2683  000C4A  D004               	goto	l1579
  2684  000C4C  505F               	movf	lcdGotoxy@col,w,c
  2685  000C4E  0F94               	addlw	148
  2686  000C50  EC28  F007         	call	_lcdCmd
  2687  000C54                     l1579:
  2688                           
  2689                           ;myLCD.c: 59: if(row == 4) lcdCmd(0xD4 + col);
  2690  000C54  0E04               	movlw	4
  2691  000C56  185E               	xorwf	lcdGotoxy@row,w,c
  2692  000C58  A4D8               	btfss	status,2,c
  2693  000C5A  0012               	return	
  2694  000C5C  505F               	movf	lcdGotoxy@col,w,c
  2695  000C5E  0FD4               	addlw	212
  2696  000C60  EC28  F007         	call	_lcdCmd
  2697  000C64  0012               	return	
  2698  000C66                     __end_of_lcdGotoxy:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           indf0	equ	0xFEF
  2707                           postinc0	equ	0xFEE
  2708                           fsr0h	equ	0xFEA
  2709                           fsr0l	equ	0xFE9
  2710                           wreg	equ	0xFE8
  2711                           indf2	equ	0xFDF
  2712                           postinc2	equ	0xFDE
  2713                           postdec2	equ	0xFDD
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           status	equ	0xFD8
  2717                           
  2718 ;; *************** function _lcdCmd *****************
  2719 ;; Defined at:
  2720 ;;		line 28 in file "myLCD.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  cmd             1    wreg     unsigned char 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  cmd             1    4[COMRAM] unsigned char 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, status,0, cstack
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2734 ;;      Params:         0       0       0       0       0       0       0
  2735 ;;      Locals:         1       0       0       0       0       0       0
  2736 ;;      Temps:          0       0       0       0       0       0       0
  2737 ;;      Totals:         1       0       0       0       0       0       0
  2738 ;;Total ram usage:        1 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    2
  2741 ;; This function calls:
  2742 ;;		_lcdByte
  2743 ;; This function is called by:
  2744 ;;		_lcdGotoxy
  2745 ;;		_lcdInit
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text22
  2750  000E50                     __ptext22:
  2751                           	opt stack 0
  2752  000E50                     _lcdCmd:
  2753                           	opt stack 27
  2754                           
  2755                           ;incstack = 0
  2756                           ;lcdCmd@cmd stored from wreg
  2757  000E50  6E5D               	movwf	lcdCmd@cmd,c
  2758                           
  2759                           ;myLCD.c: 30: LATDbits.LATD0 = 0;
  2760  000E52  908C               	bcf	3980,0,c	;volatile
  2761                           
  2762                           ;myLCD.c: 31: LATDbits.LATD1 = 0;
  2763  000E54  928C               	bcf	3980,1,c	;volatile
  2764                           
  2765                           ;myLCD.c: 32: lcdByte(cmd);
  2766  000E56  505D               	movf	lcdCmd@cmd,w,c
  2767  000E58  ECC5  F006         	call	_lcdByte
  2768  000E5C  0012               	return		;funcret
  2769  000E5E                     __end_of_lcdCmd:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           prodh	equ	0xFF4
  2776                           prodl	equ	0xFF3
  2777                           indf0	equ	0xFEF
  2778                           postinc0	equ	0xFEE
  2779                           fsr0h	equ	0xFEA
  2780                           fsr0l	equ	0xFE9
  2781                           wreg	equ	0xFE8
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _lcdByte *****************
  2790 ;; Defined at:
  2791 ;;		line 20 in file "myLCD.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  byte            1    wreg     unsigned char 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  byte            1    3[COMRAM] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      void 
  2798 ;; Registers used:
  2799 ;;		wreg, status,2, status,0, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2805 ;;      Params:         0       0       0       0       0       0       0
  2806 ;;      Locals:         1       0       0       0       0       0       0
  2807 ;;      Temps:          0       0       0       0       0       0       0
  2808 ;;      Totals:         1       0       0       0       0       0       0
  2809 ;;Total ram usage:        1 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    1
  2812 ;; This function calls:
  2813 ;;		_lcdNible
  2814 ;; This function is called by:
  2815 ;;		_lcdCmd
  2816 ;;		_lcdPutc
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text23
  2821  000D8A                     __ptext23:
  2822                           	opt stack 0
  2823  000D8A                     _lcdByte:
  2824                           	opt stack 27
  2825                           
  2826                           ;incstack = 0
  2827                           ;lcdByte@byte stored from wreg
  2828  000D8A  6E5C               	movwf	lcdByte@byte,c
  2829                           
  2830                           ;myLCD.c: 22: lcdNible(byte);
  2831  000D8C  505C               	movf	lcdByte@byte,w,c
  2832  000D8E  ECE1  F004         	call	_lcdNible
  2833                           
  2834                           ;myLCD.c: 23: lcdNible(byte << 4);
  2835  000D92  385C               	swapf	lcdByte@byte,w,c
  2836  000D94  0BF0               	andlw	240
  2837  000D96  ECE1  F004         	call	_lcdNible
  2838                           
  2839                           ;myLCD.c: 24: _delay((unsigned long)((10)*(11059200/4000000.0)));
  2840  000D9A  0E09               	movlw	9
  2841  000D9C                     u1197:
  2842  000D9C  2EE8               	decfsz	wreg,f,c
  2843  000D9E  D7FE               	bra	u1197
  2844  000DA0  0012               	return		;funcret
  2845  000DA2                     __end_of_lcdByte:
  2846                           	opt stack 0
  2847                           tblptru	equ	0xFF8
  2848                           tblptrh	equ	0xFF7
  2849                           tblptrl	equ	0xFF6
  2850                           tablat	equ	0xFF5
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           indf0	equ	0xFEF
  2854                           postinc0	equ	0xFEE
  2855                           fsr0h	equ	0xFEA
  2856                           fsr0l	equ	0xFE9
  2857                           wreg	equ	0xFE8
  2858                           indf2	equ	0xFDF
  2859                           postinc2	equ	0xFDE
  2860                           postdec2	equ	0xFDD
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _lcdNible *****************
  2866 ;; Defined at:
  2867 ;;		line 6 in file "myLCD.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  nible           1    wreg     unsigned char 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  nible           1    2[COMRAM] unsigned char 
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2881 ;;      Params:         0       0       0       0       0       0       0
  2882 ;;      Locals:         1       0       0       0       0       0       0
  2883 ;;      Temps:          2       0       0       0       0       0       0
  2884 ;;      Totals:         3       0       0       0       0       0       0
  2885 ;;Total ram usage:        3 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_lcdByte
  2891 ;;		_lcdInit
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text24
  2896  0009C2                     __ptext24:
  2897                           	opt stack 0
  2898  0009C2                     _lcdNible:
  2899                           	opt stack 27
  2900                           
  2901                           ;incstack = 0
  2902                           ;lcdNible@nible stored from wreg
  2903  0009C2  6E5B               	movwf	lcdNible@nible,c
  2904                           
  2905                           ;myLCD.c: 8: LATDbits.LATD3 = (nible >> 4) & 0x01;
  2906  0009C4  C05B  F059         	movff	lcdNible@nible,??_lcdNible
  2907  0009C8  3A59               	swapf	??_lcdNible,f,c
  2908  0009CA  0E0F               	movlw	15
  2909  0009CC  1659               	andwf	??_lcdNible,f,c
  2910  0009CE  0E01               	movlw	1
  2911  0009D0  1659               	andwf	??_lcdNible,f,c
  2912  0009D2  4659               	rlncf	??_lcdNible,f,c
  2913  0009D4  4659               	rlncf	??_lcdNible,f,c
  2914  0009D6  4659               	rlncf	??_lcdNible,f,c
  2915  0009D8  508C               	movf	3980,w,c	;volatile
  2916  0009DA  1859               	xorwf	??_lcdNible,w,c
  2917  0009DC  0BF7               	andlw	-9
  2918  0009DE  1859               	xorwf	??_lcdNible,w,c
  2919  0009E0  6E8C               	movwf	3980,c	;volatile
  2920                           
  2921                           ;myLCD.c: 9: LATDbits.LATD4 = (nible >> 5) & 0x01;
  2922  0009E2  C05B  F059         	movff	lcdNible@nible,??_lcdNible
  2923  0009E6  0E05               	movlw	5
  2924  0009E8  6E5A               	movwf	(??_lcdNible+1)& (0+255),c
  2925  0009EA                     u15:
  2926  0009EA  90D8               	bcf	status,0,c
  2927  0009EC  3259               	rrcf	??_lcdNible,f,c
  2928  0009EE  2E5A               	decfsz	(??_lcdNible+1)& (0+255),f,c
  2929  0009F0  D7FC               	goto	u15
  2930  0009F2  0E01               	movlw	1
  2931  0009F4  1659               	andwf	??_lcdNible,f,c
  2932  0009F6  3A59               	swapf	??_lcdNible,f,c
  2933  0009F8  508C               	movf	3980,w,c	;volatile
  2934  0009FA  1859               	xorwf	??_lcdNible,w,c
  2935  0009FC  0BEF               	andlw	-17
  2936  0009FE  1859               	xorwf	??_lcdNible,w,c
  2937  000A00  6E8C               	movwf	3980,c	;volatile
  2938                           
  2939                           ;myLCD.c: 10: LATDbits.LATD5 = (nible >> 6) & 0x01;
  2940  000A02  C05B  F059         	movff	lcdNible@nible,??_lcdNible
  2941  000A06  0E06               	movlw	6
  2942  000A08  6E5A               	movwf	(??_lcdNible+1)& (0+255),c
  2943  000A0A                     u25:
  2944  000A0A  90D8               	bcf	status,0,c
  2945  000A0C  3259               	rrcf	??_lcdNible,f,c
  2946  000A0E  2E5A               	decfsz	(??_lcdNible+1)& (0+255),f,c
  2947  000A10  D7FC               	goto	u25
  2948  000A12  0E01               	movlw	1
  2949  000A14  1659               	andwf	??_lcdNible,f,c
  2950  000A16  3A59               	swapf	??_lcdNible,f,c
  2951  000A18  4659               	rlncf	??_lcdNible,f,c
  2952  000A1A  508C               	movf	3980,w,c	;volatile
  2953  000A1C  1859               	xorwf	??_lcdNible,w,c
  2954  000A1E  0BDF               	andlw	-33
  2955  000A20  1859               	xorwf	??_lcdNible,w,c
  2956  000A22  6E8C               	movwf	3980,c	;volatile
  2957                           
  2958                           ;myLCD.c: 11: LATDbits.LATD6 = (nible >> 7) & 0x01;
  2959  000A24  6A59               	clrf	??_lcdNible& (0+255),c
  2960  000A26  AE5B               	btfss	lcdNible@nible,7,c
  2961  000A28  D001               	bra	u35
  2962  000A2A  2A59               	incf	??_lcdNible& (0+255),f,c
  2963  000A2C                     u35:
  2964  000A2C  0E01               	movlw	1
  2965  000A2E  1659               	andwf	??_lcdNible,f,c
  2966  000A30  3A59               	swapf	??_lcdNible,f,c
  2967  000A32  4659               	rlncf	??_lcdNible,f,c
  2968  000A34  4659               	rlncf	??_lcdNible,f,c
  2969  000A36  508C               	movf	3980,w,c	;volatile
  2970  000A38  1859               	xorwf	??_lcdNible,w,c
  2971  000A3A  0BBF               	andlw	-65
  2972  000A3C  1859               	xorwf	??_lcdNible,w,c
  2973  000A3E  6E8C               	movwf	3980,c	;volatile
  2974                           
  2975                           ;myLCD.c: 13: LATDbits.LATD2 = 1;
  2976  000A40  848C               	bsf	3980,2,c	;volatile
  2977                           
  2978                           ;myLCD.c: 14: _delay((unsigned long)((10)*(11059200/4000000.0)));
  2979  000A42  0E09               	movlw	9
  2980  000A44                     u1207:
  2981  000A44  2EE8               	decfsz	wreg,f,c
  2982  000A46  D7FE               	bra	u1207
  2983                           
  2984                           ;myLCD.c: 15: LATDbits.LATD2 = 0;
  2985  000A48  948C               	bcf	3980,2,c	;volatile
  2986                           
  2987                           ;myLCD.c: 16: _delay((unsigned long)((50)*(11059200/4000000.0)));
  2988  000A4A  0E2E               	movlw	46
  2989  000A4C                     u1217:
  2990  000A4C  2EE8               	decfsz	wreg,f,c
  2991  000A4E  D7FE               	bra	u1217
  2992  000A50  0012               	return		;funcret
  2993  000A52                     __end_of_lcdNible:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           indf0	equ	0xFEF
  3002                           postinc0	equ	0xFEE
  3003                           fsr0h	equ	0xFEA
  3004                           fsr0l	equ	0xFE9
  3005                           wreg	equ	0xFE8
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           postdec2	equ	0xFDD
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _adcRead *****************
  3014 ;; Defined at:
  3015 ;;		line 66 in file "myADC.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  ch              1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  ch              1   12[COMRAM] unsigned char 
  3020 ;;  adcResult       2   10[COMRAM] unsigned int 
  3021 ;;  adcResultLSB    2    8[COMRAM] unsigned int 
  3022 ;;  adcResultMSB    2    6[COMRAM] unsigned int 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  2    2[COMRAM] unsigned int 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3032 ;;      Params:         2       0       0       0       0       0       0
  3033 ;;      Locals:         7       0       0       0       0       0       0
  3034 ;;      Temps:          2       0       0       0       0       0       0
  3035 ;;      Totals:        11       0       0       0       0       0       0
  3036 ;;Total ram usage:       11 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    1
  3039 ;; This function calls:
  3040 ;;		_adcBusy
  3041 ;;		_adcSetChannel
  3042 ;;		_adcStart
  3043 ;;		_adcStop
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text25
  3050  000C66                     __ptext25:
  3051                           	opt stack 0
  3052  000C66                     _adcRead:
  3053                           	opt stack 29
  3054                           
  3055                           ;incstack = 0
  3056                           ;adcRead@ch stored from wreg
  3057  000C66  6E65               	movwf	adcRead@ch,c
  3058                           
  3059                           ;myADC.c: 68: unsigned int adcResultMSB, adcResultLSB, adcResult;
  3060                           ;myADC.c: 69: adcSetChannel(ch);
  3061  000C68  5065               	movf	adcRead@ch,w,c
  3062  000C6A  ECE8  F006         	call	_adcSetChannel
  3063                           
  3064                           ;myADC.c: 70: adcStart();
  3065  000C6E  EC5E  F007         	call	_adcStart	;wreg free
  3066  000C72                     l1387:
  3067  000C72  EC4A  F007         	call	_adcBusy	;wreg free
  3068  000C76  0900               	iorlw	0
  3069  000C78  A4D8               	btfss	status,2,c
  3070  000C7A  D7FB               	goto	l1387
  3071                           
  3072                           ;myADC.c: 73: adcResultMSB = ADRESH;
  3073  000C7C  CFC4 F05F          	movff	4036,adcRead@adcResultMSB	;volatile
  3074  000C80  6A60               	clrf	adcRead@adcResultMSB+1,c
  3075                           
  3076                           ;myADC.c: 74: adcResultLSB = ADRESL;
  3077  000C82  CFC3 F061          	movff	4035,adcRead@adcResultLSB	;volatile
  3078  000C86  6A62               	clrf	adcRead@adcResultLSB+1,c
  3079                           
  3080                           ;myADC.c: 75: adcResult = (adcResultMSB << 8) + adcResultLSB;
  3081  000C88  505F               	movf	adcRead@adcResultMSB,w,c
  3082  000C8A  6E5E               	movwf	(??_adcRead+1)& (0+255),c
  3083  000C8C  6A5D               	clrf	??_adcRead& (0+255),c
  3084  000C8E  5061               	movf	adcRead@adcResultLSB,w,c
  3085  000C90  245D               	addwf	??_adcRead,w,c
  3086  000C92  6E63               	movwf	adcRead@adcResult,c
  3087  000C94  5062               	movf	adcRead@adcResultLSB+1,w,c
  3088  000C96  205E               	addwfc	??_adcRead+1,w,c
  3089  000C98  6E64               	movwf	adcRead@adcResult+1,c
  3090                           
  3091                           ;myADC.c: 76: adcStop();
  3092  000C9A  EC5B  F007         	call	_adcStop	;wreg free
  3093                           
  3094                           ;myADC.c: 77: return adcResult;
  3095  000C9E  C063  F05B         	movff	adcRead@adcResult,?_adcRead
  3096  000CA2  C064  F05C         	movff	adcRead@adcResult+1,?_adcRead+1
  3097  000CA6  0012               	return	
  3098  000CA8                     __end_of_adcRead:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           indf0	equ	0xFEF
  3107                           postinc0	equ	0xFEE
  3108                           fsr0h	equ	0xFEA
  3109                           fsr0l	equ	0xFE9
  3110                           wreg	equ	0xFE8
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _adcStop *****************
  3119 ;; Defined at:
  3120 ;;		line 56 in file "myADC.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      void 
  3127 ;; Registers used:
  3128 ;;		None
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3134 ;;      Params:         0       0       0       0       0       0       0
  3135 ;;      Locals:         0       0       0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0
  3137 ;;      Totals:         0       0       0       0       0       0       0
  3138 ;;Total ram usage:        0 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; This function calls:
  3141 ;;		Nothing
  3142 ;; This function is called by:
  3143 ;;		_adcRead
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text26
  3148  000EB6                     __ptext26:
  3149                           	opt stack 0
  3150  000EB6                     _adcStop:
  3151                           	opt stack 29
  3152                           
  3153                           ;myADC.c: 58: ADCON0bits.ADON = 0;
  3154                           
  3155                           ;incstack = 0
  3156  000EB6  90C2               	bcf	4034,0,c	;volatile
  3157                           
  3158                           ;myADC.c: 59: ADCON0bits.GO = 0;
  3159  000EB8  92C2               	bcf	4034,1,c	;volatile
  3160  000EBA  0012               	return		;funcret
  3161  000EBC                     __end_of_adcStop:
  3162                           	opt stack 0
  3163                           tblptru	equ	0xFF8
  3164                           tblptrh	equ	0xFF7
  3165                           tblptrl	equ	0xFF6
  3166                           tablat	equ	0xFF5
  3167                           prodh	equ	0xFF4
  3168                           prodl	equ	0xFF3
  3169                           indf0	equ	0xFEF
  3170                           postinc0	equ	0xFEE
  3171                           fsr0h	equ	0xFEA
  3172                           fsr0l	equ	0xFE9
  3173                           wreg	equ	0xFE8
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _adcStart *****************
  3182 ;; Defined at:
  3183 ;;		line 50 in file "myADC.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		None
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3197 ;;      Params:         0       0       0       0       0       0       0
  3198 ;;      Locals:         0       0       0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0
  3200 ;;      Totals:         0       0       0       0       0       0       0
  3201 ;;Total ram usage:        0 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_adcRead
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text27
  3211  000EBC                     __ptext27:
  3212                           	opt stack 0
  3213  000EBC                     _adcStart:
  3214                           	opt stack 29
  3215                           
  3216                           ;myADC.c: 52: ADCON0bits.ADON = 1;
  3217                           
  3218                           ;incstack = 0
  3219  000EBC  80C2               	bsf	4034,0,c	;volatile
  3220                           
  3221                           ;myADC.c: 53: ADCON0bits.GO = 1;
  3222  000EBE  82C2               	bsf	4034,1,c	;volatile
  3223  000EC0  0012               	return		;funcret
  3224  000EC2                     __end_of_adcStart:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           indf0	equ	0xFEF
  3233                           postinc0	equ	0xFEE
  3234                           fsr0h	equ	0xFEA
  3235                           fsr0l	equ	0xFE9
  3236                           wreg	equ	0xFE8
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           fsr2h	equ	0xFDA
  3241                           fsr2l	equ	0xFD9
  3242                           status	equ	0xFD8
  3243                           
  3244 ;; *************** function _adcSetChannel *****************
  3245 ;; Defined at:
  3246 ;;		line 62 in file "myADC.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  channel         1    wreg     unsigned char 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  channel         1    1[COMRAM] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3260 ;;      Params:         0       0       0       0       0       0       0
  3261 ;;      Locals:         1       0       0       0       0       0       0
  3262 ;;      Temps:          1       0       0       0       0       0       0
  3263 ;;      Totals:         2       0       0       0       0       0       0
  3264 ;;Total ram usage:        2 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_adcRead
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text28
  3274  000DD0                     __ptext28:
  3275                           	opt stack 0
  3276  000DD0                     _adcSetChannel:
  3277                           	opt stack 29
  3278                           
  3279                           ;incstack = 0
  3280                           ;adcSetChannel@channel stored from wreg
  3281  000DD0  6E5A               	movwf	adcSetChannel@channel,c
  3282                           
  3283                           ;myADC.c: 64: ADCON0bits.CHS = channel;
  3284  000DD2  C05A  F059         	movff	adcSetChannel@channel,??_adcSetChannel
  3285  000DD6  4659               	rlncf	??_adcSetChannel,f,c
  3286  000DD8  4659               	rlncf	??_adcSetChannel,f,c
  3287  000DDA  50C2               	movf	4034,w,c	;volatile
  3288  000DDC  1859               	xorwf	??_adcSetChannel,w,c
  3289  000DDE  0BC3               	andlw	-61
  3290  000DE0  1859               	xorwf	??_adcSetChannel,w,c
  3291  000DE2  6EC2               	movwf	4034,c	;volatile
  3292  000DE4  0012               	return		;funcret
  3293  000DE6                     __end_of_adcSetChannel:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           indf0	equ	0xFEF
  3302                           postinc0	equ	0xFEE
  3303                           fsr0h	equ	0xFEA
  3304                           fsr0l	equ	0xFE9
  3305                           wreg	equ	0xFE8
  3306                           indf2	equ	0xFDF
  3307                           postinc2	equ	0xFDE
  3308                           postdec2	equ	0xFDD
  3309                           fsr2h	equ	0xFDA
  3310                           fsr2l	equ	0xFD9
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function _adcBusy *****************
  3314 ;; Defined at:
  3315 ;;		line 85 in file "myADC.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3329 ;;      Params:         0       0       0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0
  3331 ;;      Temps:          0       0       0       0       0       0       0
  3332 ;;      Totals:         0       0       0       0       0       0       0
  3333 ;;Total ram usage:        0 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_adcRead
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text29
  3343  000E94                     __ptext29:
  3344                           	opt stack 0
  3345  000E94                     _adcBusy:
  3346                           	opt stack 29
  3347                           
  3348                           ;myADC.c: 87: return(ADCON0bits.DONE);
  3349                           
  3350                           ;incstack = 0
  3351  000E94  A2C2               	btfss	4034,1,c	;volatile
  3352  000E96  D002               	goto	u60
  3353  000E98  0E01               	movlw	1
  3354  000E9A  0012               	return	
  3355  000E9C                     u60:
  3356  000E9C  0E00               	movlw	0
  3357  000E9E  0012               	return	
  3358  000EA0                     __end_of_adcBusy:
  3359                           	opt stack 0
  3360                           tblptru	equ	0xFF8
  3361                           tblptrh	equ	0xFF7
  3362                           tblptrl	equ	0xFF6
  3363                           tablat	equ	0xFF5
  3364                           prodh	equ	0xFF4
  3365                           prodl	equ	0xFF3
  3366                           indf0	equ	0xFEF
  3367                           postinc0	equ	0xFEE
  3368                           fsr0h	equ	0xFEA
  3369                           fsr0l	equ	0xFE9
  3370                           wreg	equ	0xFE8
  3371                           indf2	equ	0xFDF
  3372                           postinc2	equ	0xFDE
  3373                           postdec2	equ	0xFDD
  3374                           fsr2h	equ	0xFDA
  3375                           fsr2l	equ	0xFD9
  3376                           status	equ	0xFD8
  3377                           
  3378 ;; *************** function _adcInit *****************
  3379 ;; Defined at:
  3380 ;;		line 35 in file "myADC.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3394 ;;      Params:         0       0       0       0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0       0       0
  3396 ;;      Temps:          0       0       0       0       0       0       0
  3397 ;;      Totals:         0       0       0       0       0       0       0
  3398 ;;Total ram usage:        0 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    1
  3401 ;; This function calls:
  3402 ;;		_acdVoltRef
  3403 ;;		_adcAcqTime
  3404 ;;		_adcClock
  3405 ;;		_adcInterrupt
  3406 ;;		_adcPortConfig
  3407 ;;		_adcResultJust
  3408 ;; This function is called by:
  3409 ;;		_main
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           	psect	text30
  3414  000CE4                     __ptext30:
  3415                           	opt stack 0
  3416  000CE4                     _adcInit:
  3417                           	opt stack 29
  3418                           
  3419                           ;myADC.c: 38: ADCON0 = 0;
  3420                           
  3421                           ;incstack = 0
  3422  000CE4  0E00               	movlw	0
  3423  000CE6  6EC2               	movwf	4034,c	;volatile
  3424                           
  3425                           ;myADC.c: 39: ADCON1 = 0;
  3426  000CE8  0E00               	movlw	0
  3427  000CEA  6EC1               	movwf	4033,c	;volatile
  3428                           
  3429                           ;myADC.c: 40: ADCON2 = 0;
  3430  000CEC  0E00               	movlw	0
  3431  000CEE  6EC0               	movwf	4032,c	;volatile
  3432                           
  3433                           ;myADC.c: 42: adcClock(0b101);
  3434  000CF0  0E05               	movlw	5
  3435  000CF2  EC3D  F007         	call	_adcClock
  3436                           
  3437                           ;myADC.c: 43: adcAcqTime(0b001);
  3438  000CF6  0E01               	movlw	1
  3439  000CF8  ECD1  F006         	call	_adcAcqTime
  3440                           
  3441                           ;myADC.c: 44: adcResultJust(1);
  3442  000CFC  0E01               	movlw	1
  3443  000CFE  EC2F  F007         	call	_adcResultJust
  3444                           
  3445                           ;myADC.c: 45: acdVoltRef(0b00);
  3446  000D02  0E00               	movlw	0
  3447  000D04  ECF3  F006         	call	_acdVoltRef
  3448                           
  3449                           ;myADC.c: 46: adcInterrupt(0);
  3450  000D08  0E00               	movlw	0
  3451  000D0A  ECFD  F006         	call	_adcInterrupt
  3452                           
  3453                           ;myADC.c: 47: adcPortConfig(0b1110);
  3454  000D0E  0E0E               	movlw	14
  3455  000D10  EC36  F007         	call	_adcPortConfig
  3456  000D14  0012               	return		;funcret
  3457  000D16                     __end_of_adcInit:
  3458                           	opt stack 0
  3459                           tblptru	equ	0xFF8
  3460                           tblptrh	equ	0xFF7
  3461                           tblptrl	equ	0xFF6
  3462                           tablat	equ	0xFF5
  3463                           prodh	equ	0xFF4
  3464                           prodl	equ	0xFF3
  3465                           indf0	equ	0xFEF
  3466                           postinc0	equ	0xFEE
  3467                           fsr0h	equ	0xFEA
  3468                           fsr0l	equ	0xFE9
  3469                           wreg	equ	0xFE8
  3470                           indf2	equ	0xFDF
  3471                           postinc2	equ	0xFDE
  3472                           postdec2	equ	0xFDD
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _adcResultJust *****************
  3478 ;; Defined at:
  3479 ;;		line 14 in file "myADC.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  just            1    wreg     unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  just            1    0[COMRAM] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3493 ;;      Params:         0       0       0       0       0       0       0
  3494 ;;      Locals:         1       0       0       0       0       0       0
  3495 ;;      Temps:          0       0       0       0       0       0       0
  3496 ;;      Totals:         1       0       0       0       0       0       0
  3497 ;;Total ram usage:        1 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_adcInit
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text31
  3507  000E5E                     __ptext31:
  3508                           	opt stack 0
  3509  000E5E                     _adcResultJust:
  3510                           	opt stack 29
  3511                           
  3512                           ;incstack = 0
  3513                           ;adcResultJust@just stored from wreg
  3514  000E5E  6E59               	movwf	adcResultJust@just,c
  3515                           
  3516                           ;myADC.c: 16: ADCON2bits.ADFM = just;
  3517  000E60  B059               	btfsc	adcResultJust@just,0,c
  3518  000E62  D002               	bra	u45
  3519  000E64  9EC0               	bcf	4032,7,c	;volatile
  3520  000E66  D001               	bra	u46
  3521  000E68                     u45:
  3522  000E68  8EC0               	bsf	4032,7,c	;volatile
  3523  000E6A                     u46:
  3524  000E6A  0012               	return		;funcret
  3525  000E6C                     __end_of_adcResultJust:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           indf0	equ	0xFEF
  3534                           postinc0	equ	0xFEE
  3535                           fsr0h	equ	0xFEA
  3536                           fsr0l	equ	0xFE9
  3537                           wreg	equ	0xFE8
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _adcPortConfig *****************
  3546 ;; Defined at:
  3547 ;;		line 30 in file "myADC.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  config          1    wreg     unsigned char 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  config          1    0[COMRAM] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         0       0       0       0       0       0       0
  3562 ;;      Locals:         1       0       0       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0
  3564 ;;      Totals:         1       0       0       0       0       0       0
  3565 ;;Total ram usage:        1 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_adcInit
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text32
  3575  000E6C                     __ptext32:
  3576                           	opt stack 0
  3577  000E6C                     _adcPortConfig:
  3578                           	opt stack 29
  3579                           
  3580                           ;incstack = 0
  3581                           ;adcPortConfig@config stored from wreg
  3582  000E6C  6E59               	movwf	adcPortConfig@config,c
  3583                           
  3584                           ;myADC.c: 32: ADCON1bits.PCFG = config;
  3585  000E6E  50C1               	movf	4033,w,c	;volatile
  3586  000E70  1859               	xorwf	adcPortConfig@config,w,c
  3587  000E72  0BF0               	andlw	-16
  3588  000E74  1859               	xorwf	adcPortConfig@config,w,c
  3589  000E76  6EC1               	movwf	4033,c	;volatile
  3590  000E78  0012               	return		;funcret
  3591  000E7A                     __end_of_adcPortConfig:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           indf0	equ	0xFEF
  3600                           postinc0	equ	0xFEE
  3601                           fsr0h	equ	0xFEA
  3602                           fsr0l	equ	0xFE9
  3603                           wreg	equ	0xFE8
  3604                           indf2	equ	0xFDF
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _adcInterrupt *****************
  3612 ;; Defined at:
  3613 ;;		line 24 in file "myADC.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  config          1    wreg     unsigned char 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  config          1    0[COMRAM] unsigned char 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3627 ;;      Params:         0       0       0       0       0       0       0
  3628 ;;      Locals:         1       0       0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0
  3630 ;;      Totals:         1       0       0       0       0       0       0
  3631 ;;Total ram usage:        1 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; This function calls:
  3634 ;;		Nothing
  3635 ;; This function is called by:
  3636 ;;		_adcInit
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text33
  3641  000DFA                     __ptext33:
  3642                           	opt stack 0
  3643  000DFA                     _adcInterrupt:
  3644                           	opt stack 29
  3645                           
  3646                           ;incstack = 0
  3647                           ;adcInterrupt@config stored from wreg
  3648  000DFA  6E59               	movwf	adcInterrupt@config,c
  3649                           
  3650                           ;myADC.c: 26: PIE1bits.ADIE = config;
  3651  000DFC  B059               	btfsc	adcInterrupt@config,0,c
  3652  000DFE  D002               	bra	u55
  3653  000E00  9C9D               	bcf	3997,6,c	;volatile
  3654  000E02  D001               	bra	u56
  3655  000E04                     u55:
  3656  000E04  8C9D               	bsf	3997,6,c	;volatile
  3657  000E06                     u56:
  3658                           
  3659                           ;myADC.c: 27: INTCONbits.PEIE = 1;
  3660  000E06  8CF2               	bsf	intcon,6,c	;volatile
  3661  000E08  0012               	return		;funcret
  3662  000E0A                     __end_of_adcInterrupt:
  3663                           	opt stack 0
  3664                           tblptru	equ	0xFF8
  3665                           tblptrh	equ	0xFF7
  3666                           tblptrl	equ	0xFF6
  3667                           tablat	equ	0xFF5
  3668                           prodh	equ	0xFF4
  3669                           prodl	equ	0xFF3
  3670                           intcon	equ	0xFF2
  3671                           indf0	equ	0xFEF
  3672                           postinc0	equ	0xFEE
  3673                           fsr0h	equ	0xFEA
  3674                           fsr0l	equ	0xFE9
  3675                           wreg	equ	0xFE8
  3676                           indf2	equ	0xFDF
  3677                           postinc2	equ	0xFDE
  3678                           postdec2	equ	0xFDD
  3679                           fsr2h	equ	0xFDA
  3680                           fsr2l	equ	0xFD9
  3681                           status	equ	0xFD8
  3682                           
  3683 ;; *************** function _adcClock *****************
  3684 ;; Defined at:
  3685 ;;		line 4 in file "myADC.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  clk             1    wreg     unsigned char 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  clk             1    0[COMRAM] unsigned char 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg, status,2, status,0
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3699 ;;      Params:         0       0       0       0       0       0       0
  3700 ;;      Locals:         1       0       0       0       0       0       0
  3701 ;;      Temps:          0       0       0       0       0       0       0
  3702 ;;      Totals:         1       0       0       0       0       0       0
  3703 ;;Total ram usage:        1 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		_adcInit
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text34
  3713  000E7A                     __ptext34:
  3714                           	opt stack 0
  3715  000E7A                     _adcClock:
  3716                           	opt stack 29
  3717                           
  3718                           ;incstack = 0
  3719                           ;adcClock@clk stored from wreg
  3720  000E7A  6E59               	movwf	adcClock@clk,c
  3721                           
  3722                           ;myADC.c: 6: ADCON2bits.ADCS = clk;
  3723  000E7C  50C0               	movf	4032,w,c	;volatile
  3724  000E7E  1859               	xorwf	adcClock@clk,w,c
  3725  000E80  0BF8               	andlw	-8
  3726  000E82  1859               	xorwf	adcClock@clk,w,c
  3727  000E84  6EC0               	movwf	4032,c	;volatile
  3728  000E86  0012               	return		;funcret
  3729  000E88                     __end_of_adcClock:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           intcon	equ	0xFF2
  3738                           indf0	equ	0xFEF
  3739                           postinc0	equ	0xFEE
  3740                           fsr0h	equ	0xFEA
  3741                           fsr0l	equ	0xFE9
  3742                           wreg	equ	0xFE8
  3743                           indf2	equ	0xFDF
  3744                           postinc2	equ	0xFDE
  3745                           postdec2	equ	0xFDD
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function _adcAcqTime *****************
  3751 ;; Defined at:
  3752 ;;		line 9 in file "myADC.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  tad             1    wreg     unsigned char 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  tad             1    1[COMRAM] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3766 ;;      Params:         0       0       0       0       0       0       0
  3767 ;;      Locals:         1       0       0       0       0       0       0
  3768 ;;      Temps:          1       0       0       0       0       0       0
  3769 ;;      Totals:         2       0       0       0       0       0       0
  3770 ;;Total ram usage:        2 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; This function calls:
  3773 ;;		Nothing
  3774 ;; This function is called by:
  3775 ;;		_adcInit
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text35
  3780  000DA2                     __ptext35:
  3781                           	opt stack 0
  3782  000DA2                     _adcAcqTime:
  3783                           	opt stack 29
  3784                           
  3785                           ;incstack = 0
  3786                           ;adcAcqTime@tad stored from wreg
  3787  000DA2  6E5A               	movwf	adcAcqTime@tad,c
  3788                           
  3789                           ;myADC.c: 11: ADCON2bits.ACQT = tad;
  3790  000DA4  C05A  F059         	movff	adcAcqTime@tad,??_adcAcqTime
  3791  000DA8  4659               	rlncf	??_adcAcqTime,f,c
  3792  000DAA  4659               	rlncf	??_adcAcqTime,f,c
  3793  000DAC  4659               	rlncf	??_adcAcqTime,f,c
  3794  000DAE  50C0               	movf	4032,w,c	;volatile
  3795  000DB0  1859               	xorwf	??_adcAcqTime,w,c
  3796  000DB2  0BC7               	andlw	-57
  3797  000DB4  1859               	xorwf	??_adcAcqTime,w,c
  3798  000DB6  6EC0               	movwf	4032,c	;volatile
  3799  000DB8  0012               	return		;funcret
  3800  000DBA                     __end_of_adcAcqTime:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           intcon	equ	0xFF2
  3809                           indf0	equ	0xFEF
  3810                           postinc0	equ	0xFEE
  3811                           fsr0h	equ	0xFEA
  3812                           fsr0l	equ	0xFE9
  3813                           wreg	equ	0xFE8
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function _acdVoltRef *****************
  3822 ;; Defined at:
  3823 ;;		line 19 in file "myADC.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  vref            1    wreg     unsigned char 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  vref            1    1[COMRAM] unsigned char 
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      void 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3837 ;;      Params:         0       0       0       0       0       0       0
  3838 ;;      Locals:         1       0       0       0       0       0       0
  3839 ;;      Temps:          1       0       0       0       0       0       0
  3840 ;;      Totals:         2       0       0       0       0       0       0
  3841 ;;Total ram usage:        2 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; This function calls:
  3844 ;;		Nothing
  3845 ;; This function is called by:
  3846 ;;		_adcInit
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text36
  3851  000DE6                     __ptext36:
  3852                           	opt stack 0
  3853  000DE6                     _acdVoltRef:
  3854                           	opt stack 29
  3855                           
  3856                           ;incstack = 0
  3857                           ;acdVoltRef@vref stored from wreg
  3858  000DE6  6E5A               	movwf	acdVoltRef@vref,c
  3859                           
  3860                           ;myADC.c: 21: ADCON1bits.VCFG = vref;
  3861  000DE8  C05A  F059         	movff	acdVoltRef@vref,??_acdVoltRef
  3862  000DEC  3A59               	swapf	??_acdVoltRef,f,c
  3863  000DEE  50C1               	movf	4033,w,c	;volatile
  3864  000DF0  1859               	xorwf	??_acdVoltRef,w,c
  3865  000DF2  0BCF               	andlw	-49
  3866  000DF4  1859               	xorwf	??_acdVoltRef,w,c
  3867  000DF6  6EC1               	movwf	4033,c	;volatile
  3868  000DF8  0012               	return		;funcret
  3869  000DFA                     __end_of_acdVoltRef:
  3870                           	opt stack 0
  3871                           tblptru	equ	0xFF8
  3872                           tblptrh	equ	0xFF7
  3873                           tblptrl	equ	0xFF6
  3874                           tablat	equ	0xFF5
  3875                           prodh	equ	0xFF4
  3876                           prodl	equ	0xFF3
  3877                           intcon	equ	0xFF2
  3878                           indf0	equ	0xFEF
  3879                           postinc0	equ	0xFEE
  3880                           fsr0h	equ	0xFEA
  3881                           fsr0l	equ	0xFE9
  3882                           wreg	equ	0xFE8
  3883                           indf2	equ	0xFDF
  3884                           postinc2	equ	0xFDE
  3885                           postdec2	equ	0xFDD
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           intcon	equ	0xFF2
  3896                           indf0	equ	0xFEF
  3897                           postinc0	equ	0xFEE
  3898                           fsr0h	equ	0xFEA
  3899                           fsr0l	equ	0xFE9
  3900                           wreg	equ	0xFE8
  3901                           indf2	equ	0xFDF
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           fsr2h	equ	0xFDA
  3905                           fsr2l	equ	0xFD9
  3906                           status	equ	0xFD8
  3907                           
  3908                           	psect	rparam
  3909  0000                     tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           intcon	equ	0xFF2
  3916                           indf0	equ	0xFEF
  3917                           postinc0	equ	0xFEE
  3918                           fsr0h	equ	0xFEA
  3919                           fsr0l	equ	0xFE9
  3920                           wreg	equ	0xFE8
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    10
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     33     121
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 86
		 -> buff(COMRAM[86]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    uartPuts@str	PTR unsigned char  size(2) Largest target is 86
		 -> STR_3(CODE[2]), buff(COMRAM[86]), 

    lcdPuts@str	PTR unsigned char  size(2) Largest target is 86
		 -> buff(COMRAM[86]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _uartPuts->_uartWrite
    _uartOpen->_uartIntMode
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdPuts->_lcdPutc
    _lcdPutc->_lcdByte
    _lcdInit->_lcdCmd
    _lcdGotoxy->_lcdCmd
    _lcdCmd->_lcdByte
    _lcdByte->_lcdNible
    _adcRead->_adcSetChannel
    _adcInit->_acdVoltRef
    _adcInit->_adcAcqTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3669
                                             31 COMRAM     2     2      0
                            _adcInit
                            _adcRead
                          _lcdGotoxy
                            _lcdInit
                            _lcdPuts
                            _sprintf
                           _uartOpen
                           _uartPuts
 ---------------------------------------------------------------------------------
 (1) _uartPuts                                             4     2      2     187
                                              1 COMRAM     4     2      2
                           _uartBusy
                          _uartWrite
 ---------------------------------------------------------------------------------
 (2) _uartWrite                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartBusy                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uartOpen                                             0     0      0     213
                   _uartBaudrateMode
                        _uartBitMode
                        _uartIntMode
                         _uartRxMode
                    _uartSetBaudrate
                          _uartStart
                       _uartSyncMode
                      _uartSynchMode
 ---------------------------------------------------------------------------------
 (2) _uartSynchMode                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartSyncMode                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartStart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _uartSetBaudrate                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartRxMode                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIntMode                                          2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _uartBitMode                                          1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartBaudrateMode                                     1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    2285
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdPuts                                              2     0      2     278
                                              5 COMRAM     2     0      2
                            _lcdPutc
 ---------------------------------------------------------------------------------
 (2) _lcdPutc                                              1     1      0     105
                                              4 COMRAM     1     1      0
                            _lcdByte
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0     165
                                              5 COMRAM     1     1      0
                             _lcdCmd
                           _lcdNible
 ---------------------------------------------------------------------------------
 (1) _lcdGotoxy                                            2     1      1     345
                                              5 COMRAM     2     1      1
                             _lcdCmd
 ---------------------------------------------------------------------------------
 (2) _lcdCmd                                               1     1      0     105
                                              4 COMRAM     1     1      0
                            _lcdByte
 ---------------------------------------------------------------------------------
 (3) _lcdByte                                              1     1      0      90
                                              3 COMRAM     1     1      0
                           _lcdNible
 ---------------------------------------------------------------------------------
 (4) _lcdNible                                             3     3      0      60
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _adcRead                                             11     9      2     106
                                              2 COMRAM    11     9      2
                            _adcBusy
                      _adcSetChannel
                           _adcStart
                            _adcStop
 ---------------------------------------------------------------------------------
 (2) _adcStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adcStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adcSetChannel                                        2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcBusy                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0      90
                         _acdVoltRef
                         _adcAcqTime
                           _adcClock
                       _adcInterrupt
                      _adcPortConfig
                      _adcResultJust
 ---------------------------------------------------------------------------------
 (2) _adcResultJust                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcPortConfig                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcInterrupt                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcClock                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcAcqTime                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _acdVoltRef                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adcInit
     _acdVoltRef
     _adcAcqTime
     _adcClock
     _adcInterrupt
     _adcPortConfig
     _adcResultJust
   _adcRead
     _adcBusy
     _adcSetChannel
     _adcStart
     _adcStop
   _lcdGotoxy
     _lcdCmd
       _lcdByte
         _lcdNible
   _lcdInit
     _lcdCmd
       _lcdByte
         _lcdNible
     _lcdNible
   _lcdPuts
     _lcdPutc
       _lcdByte
         _lcdNible
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _uartOpen
     _uartBaudrateMode
     _uartBitMode
     _uartIntMode
     _uartRxMode
     _uartSetBaudrate
     _uartStart
     _uartSyncMode
     _uartSynchMode
   _uartPuts
     _uartBusy
     _uartWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     21      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      79      15        0.0%
DATA                 0      0      79       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Feb 27 22:03:46 2017

                       u15 09EA                         u25 0A0A                         u35 0A2C  
                       u60 0E9C                         u45 0E68                         u46 0E6A  
                       u55 0E04                         u56 0E06                         u95 0E3E  
                       u96 0E40                         _ad 0001        ___wmul@multiplicand 005B  
              __CFG_BORV$3 000000                __CFG_OSC$HS 000000                __CFG_LVP$ON 000000  
                      l680 0B86                        l690 0C1A                        l965 0E90  
                      u105 0E30                        u106 0E32                        u115 0E22  
                      u116 0E24                        u125 0D7C                        u126 0D7E  
                      u135 0D86                        u136 0D88                        u145 0E14  
                      u146 0E16                        u655 0D64                        u760 0BB2  
                      u656 0D66                        u665 0D6E                        u770 0BDA  
                      u666 0D70                        u767 0BA8                        u777 0BD0  
             _adcInterrupt 0DFA             acdVoltRef@vref 005A                        wreg 000FE8  
          _uartSetBaudrate 0EA8               __CFG_WDT$OFF 000000                       l1501 07D4  
                     l1415 0B92                       l1351 0B54                       l1335 0D52  
                     l1431 064E                       l1423 0626                       l1353 0B5C  
                     l1521 0824                       l1505 07E6                       l1441 0682  
                     l1419 0BBA                       l1363 0B7C                       l1355 0B60  
                     l1371 0BF0                       l1531 084C                       l1523 082C  
                     l1435 0654                       l1373 0BF8                       l1541 0874  
                     l1517 0800                       l1461 072E                       l1429 0640  
                     l1375 0BFC                       l1455 06FA                       l1553 08AC  
                     l1465 0732                       l1449 06DE                       l1561 0906  
                     l1387 0C72                       l1571 0C34                       l1379 0C10  
                     l1547 0892                       l1539 086C                       l1483 078E  
                     l1467 0758                       l1563 091E                       l1459 0718  
                     l1557 08FA                       l1485 0792                       l1477 0780  
                     l1575 0C44                       l1559 08FE                       l1583 0ADC  
                     l1497 07BE                       l1579 0C54                       l1597 0A6A  
                     STR_1 060B                       STR_2 0612                       STR_3 0618  
                     u1100 0B06                       u1110 0B36                       u1107 0AFC  
                     u1117 0B2C                       u1207 0A44                       u1217 0A4C  
                     u1137 0ACC                       u1147 0940                       u1157 0956  
                     u1167 096C                       u1177 0982                       u1187 09B6  
                     u1197 0D9C              _adcSetChannel 0DD0                       _buff 0003  
                     _main 0A52                       fsr0h 000FEA                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000           uartSyncMode@mode 0059  
            __CFG_MCLRE$ON 000000               ___param_bank 000000              adcAcqTime@tad 005A  
                    ?_main 0059            __end_of_adcBusy 0EA0            __end_of_adcInit 0D16  
          __end_of_adcRead 0CA8          uartIntMode@rxMode 0059            __end_of_adcStop 0EBC  
        uartIntMode@txMode 005A            __end_of___lwdiv 0B90            __end_of___lwmod 0C24  
                    _RCREG 000FAE                      _RCSTA 000FAB                      _SPBRG 000FAF  
                    _TXREG 000FAD                      _TXSTA 000FAC              _adcResultJust 0E5E  
            __CFG_PWRT$OFF 000000              _adcPortConfig 0E6C            __end_of_lcdByte 0DA2  
          __end_of_lcdInit 09C2             __CFG_FCMEN$OFF 000000            __end_of_lcdPutc 0E50  
          __end_of_lcdPuts 0BE2            __end_of_dpowers 060B            __end_of_isdigit 0D5A  
        ?_uartBaudrateMode 0059             __CFG_BOREN$OFF 000000             ?_adcSetChannel 0059  
                    tablat 000FF5         ??_uartBaudrateMode 0059                      status 000FD8  
          __end_of_sprintf 092C       uartSetBaudrate@spbrg 0059            __initialization 0DBA  
             __end_of_main 0ADC                     ??_main 0078              __activetblptr 000002  
  __end_of_uartSetBaudrate 0EB0             ?_adcResultJust 0059             ?_adcPortConfig 0059  
         __end_of_adcClock 0E88                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADCON2 000FC0                     _ADRESH 000FC4                     _ADRESL 000FC3  
         __end_of_adcStart 0EC2               ?_uartBitMode 0059           __end_of_lcdNible 0A52  
           __CFG_XINST$OFF 000000               ?_uartIntMode 0059                     ___wmul 0D16  
                ??_adcBusy 0059                  ??_adcInit 005B                  ??_adcRead 005D  
           __CFG_STVREN$ON 000000                  ??_adcStop 0059                     _lcdCmd 0E50  
                ??___lwdiv 005D                  ??___lwmod 0064                     clear_0 0DC0  
                ??_lcdByte 005C                  ??_lcdInit 005E                  ??_lcdPutc 005D  
                ??_lcdPuts 0060       adcSetChannel@channel 005A                  ??_isdigit 0059  
         __end_of_uartBusy 0E94           __end_of_uartOpen 0CE4           __end_of_uartPuts 0B3E  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                 _adcAcqTime 0DA2            ??_adcSetChannel 0059  
                ??_sprintf 006B          uartSynchMode@mode 0059                 __accesstop 0080  
  __end_of__initialization 0DC6            __CFG_PBADEN$OFF 000000              ___rparam_used 000001  
               _acdVoltRef 0DE6             __pcstackCOMRAM 0059            ??_adcResultJust 0059  
          ??_adcPortConfig 0059           ?_uartSetBaudrate 0059         __size_of_lcdGotoxy 0042  
             sprintf@width 0074                    ?___wmul 0059      __end_of_uartSynchMode 0E18  
                  ?_lcdCmd 0059                  ?_adcClock 0059                  ?_adcStart 0059  
       __size_of_uartStart 0006           adcRead@adcResult 0063         __size_of_uartWrite 0008  
                ?_lcdNible 0059          adcResultJust@just 0059                ?_adcAcqTime 0059  
        __end_of_lcdGotoxy 0C66                    __Hparam 0000                ?_acdVoltRef 0059  
                  __Lparam 0000                  ?_uartBusy 0059                  ?_uartOpen 0059  
     __size_of_uartBitMode 0018                  ?_uartPuts 005A                    _adcBusy 0E94  
                  _adcInit 0CE4                    _adcRead 0C66  __size_of_uartBaudrateMode 000E  
          __size_of___wmul 0026                    _adcStop 0EB6                    ___lwdiv 0B3E  
                  ___lwmod 0BE2            __size_of_lcdCmd 000E                 ??_adcClock 0059  
     __size_of_uartIntMode 0018               __psmallconst 0600                    __pcinit 0DBA  
               ??_adcStart 0059                    __ramtop 0600                    _lcdByte 0D8A  
                  _lcdInit 092C                    __ptext0 0A52                    __ptext1 0ADC  
                  __ptext2 0EA0                    __ptext3 0E88                    __ptext4 0CA8  
                  __ptext5 0E0A                    __ptext6 0E18                    __ptext7 0EB0  
                  __ptext8 0EA8                    __ptext9 0E26                    _lcdPutc 0E42  
                  _lcdPuts 0B90                    _dpowers 0601                    _isdigit 0D3C  
            ?_uartSyncMode 0059                 ??_lcdNible 0059                    _sprintf 061C  
     end_of_initialization 0DC6              __Lmediumconst 0000          __end_of_uartStart 0EB6  
        __end_of_uartWrite 0EA8                 ??_uartBusy 0059                uartPuts@str 005A  
               ??_uartOpen 005B                 ??_uartPuts 005C                  _RCSTAbits 000FAB  
                  postdec2 000FDD                 _uartRxMode 0E26                    postinc0 000FEE  
                  postinc2 000FDE        __size_of_adcAcqTime 0018                 lcdPutc@chr 005D  
               lcdPuts@str 005E             ??_uartSyncMode 0059                  _TRISDbits 000F95  
      __size_of_acdVoltRef 0014                  _TXSTAbits 000FAC             __end_of___wmul 0D3C  
              adcClock@clk 0059             __end_of_lcdCmd 0E5E              ?_adcInterrupt 0059  
      start_initialization 0DBA      __end_of_adcSetChannel 0DE6                ?_uartRxMode 0059  
                 ??___wmul 005D           _uartBaudrateMode 0E34                   ??_lcdCmd 005D  
         __CFG_LPT1OSC$OFF 000000             ??_adcInterrupt 0059          __size_of_adcClock 000E  
    __end_of_adcResultJust 0E6C          __size_of_adcStart 0006      __end_of_adcPortConfig 0E7A  
              __pbssCOMRAM 0001               ??_adcAcqTime 0059             uartRxMode@mode 0059  
                adcRead@ch 0065   __size_of_uartSetBaudrate 0008          __size_of_lcdNible 0090  
              sprintf@flag 0071                sprintf@prec 0076               ??_acdVoltRef 0059  
         ___lwdiv@dividend 0059          __CFG_CCP2MX$PORTC 000000       __end_of_uartSyncMode 0E26  
                 ?_adcBusy 0059                   ?_adcInit 0059                   ?_adcRead 005B  
                _lcdGotoxy 0C24                   ?_adcStop 0059                   ?___lwdiv 0059  
        __size_of_uartBusy 000C                   ?___lwmod 0060          __size_of_uartOpen 003C  
        __size_of_uartPuts 0062         __end_of_adcAcqTime 0DBA                   ?_lcdByte 0059  
                 ?_lcdInit 0059                   ?_lcdPutc 0059                   ?_lcdPuts 005E  
              __smallconst 0600                   ?_isdigit 0059            uartBitMode@mode 0059  
         ___lwdiv@quotient 005D         __end_of_acdVoltRef 0DFA                   ?_sprintf 0065  
      __size_of_uartRxMode 000E     __size_of_uartSynchMode 000E             ___wmul@product 005D  
                 _LATDbits 000F8C                  lcdCmd@cmd 005D              ??_uartBitMode 0059  
                 _PIE1bits 000F9D                   _PIR1bits 000F9E              ??_uartIntMode 005A  
         __CFG_WDTPS$32768 000000                  _uartStart 0EB0                  _uartWrite 0EA0  
               ?_lcdGotoxy 005E                 _ADCON0bits 000FC2                 _ADCON1bits 000FC1  
               _ADCON2bits 000FC0          ___wmul@multiplier 0059              lcdNible@nible 005B  
      adcPortConfig@config 0059       __end_of_adcInterrupt 0E0A                   __Hrparam 0000  
        ??_uartSetBaudrate 0059                   __Lrparam 0000                 ?_uartStart 0059  
               ?_uartWrite 0059        __end_of_uartBitMode 0D8A              _uartSynchMode 0E0A  
         __size_of_adcBusy 000C           __size_of_adcInit 0032           __size_of_adcRead 0042  
                 _adcClock 0E7A           __size_of_adcStop 0006           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                   _adcStart 0EBC        __end_of_uartIntMode 0D72  
              _isdigit$926 005A           __size_of_lcdByte 0018           __size_of_lcdInit 0096  
         __size_of_lcdPutc 000E           __size_of_lcdPuts 0052                 sprintf@val 0072  
       adcInterrupt@config 0059           __size_of_isdigit 001E            ___lwdiv@divisor 005B  
          ___lwdiv@counter 005F                   _lcdNible 09C2                   __ptext10 0D5A  
                 __ptext11 0D72                   __ptext20 092C                   __ptext12 0E34  
                 __ptext21 0C24                   __ptext13 061C                   __ptext30 0CE4  
                 __ptext22 0E50                   __ptext14 0D3C                   __ptext31 0E5E  
                 __ptext23 0D8A                   __ptext15 0D16                   __ptext32 0E6C  
                 __ptext24 09C2                   __ptext16 0BE2                   __ptext33 0DFA  
                 __ptext25 0C66                   __ptext17 0B3E                   __ptext34 0E7A  
                 __ptext26 0EB6                   __ptext18 0B90                   __ptext35 0DA2  
                 __ptext27 0EBC                   __ptext19 0E42                   __ptext36 0DE6  
                 __ptext28 0DD0                   __ptext29 0E94   __end_of_uartBaudrateMode 0E42  
         __size_of_sprintf 0310        adcRead@adcResultLSB 0061        adcRead@adcResultMSB 005F  
            __size_of_main 008A      __size_of_uartSyncMode 000E                   _uartBusy 0E88  
                 _uartOpen 0CA8                   _uartPuts 0ADC               ??_uartRxMode 0059  
              ??_lcdGotoxy 005F             ?_uartSynchMode 0059                 _INTCONbits 000FF2  
            uartWrite@data 0059                   isdigit@c 005B               _uartSyncMode 0E18  
             lcdGotoxy@col 005F               lcdGotoxy@row 005E                  sprintf@ap 006F  
       __end_of_uartRxMode 0E34                  sprintf@sp 0065           ___lwmod@dividend 0060  
              _uartBitMode 0D72                lcdByte@byte 005C                _uartIntMode 0D5A  
              ??_uartStart 0059                ??_uartWrite 0059     __size_of_adcSetChannel 0016  
                 sprintf@c 0077                   sprintf@f 0067            ___lwmod@divisor 0062  
          ___lwmod@counter 0064       uartBaudrateMode@mode 0059      __size_of_adcInterrupt 0010  
   __size_of_adcResultJust 000E     __size_of_adcPortConfig 000E            ??_uartSynchMode 0059  
