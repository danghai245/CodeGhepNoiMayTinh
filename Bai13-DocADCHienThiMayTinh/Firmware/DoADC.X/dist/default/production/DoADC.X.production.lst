

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 01 23:39:17 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53  0000                     
    54                           ; Version 1.41
    55                           ; Generated 25/01/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt stack 0
    92  000600  00                 	db	0
    93  000601                     _dpowers:
    94                           	opt stack 0
    95  000601  0001               	dw	1
    96  000603  000A               	dw	10
    97  000605  0064               	dw	100
    98  000607  03E8               	dw	1000
    99  000609  2710               	dw	10000
   100  00060B                     __end_of_dpowers:
   101                           	opt stack 0
   102  0000                     _TXREG	set	4013
   103  0000                     _RCREG	set	4014
   104  0000                     _RCSTA	set	4011
   105  0000                     _TXSTA	set	4012
   106  0000                     _RCSTAbits	set	4011
   107  0000                     _SPBRG	set	4015
   108  0000                     _TXSTAbits	set	4012
   109  0000                     _PIR1bits	set	3998
   110  0000                     _TRISDbits	set	3989
   111  0000                     _LATDbits	set	3980
   112  0000                     _ADRESL	set	4035
   113  0000                     _ADRESH	set	4036
   114  0000                     _ADCON0bits	set	4034
   115  0000                     _ADCON2	set	4032
   116  0000                     _ADCON1	set	4033
   117  0000                     _ADCON0	set	4034
   118  0000                     _INTCONbits	set	4082
   119  0000                     _PIE1bits	set	3997
   120  0000                     _ADCON1bits	set	4033
   121  0000                     _ADCON2bits	set	4032
   122  00060B                     STR_1:
   123  00060B  44                 	db	68	;'D'
   124  00060C  4F                 	db	79	;'O'
   125  00060D  20                 	db	32
   126  00060E  41                 	db	65	;'A'
   127  00060F  44                 	db	68	;'D'
   128  000610  43                 	db	67	;'C'
   129  000611  00                 	db	0
   130  000612                     STR_2:
   131  000612  25                 	db	37
   132  000613  30                 	db	48	;'0'
   133  000614  2E                 	db	46
   134  000615  34                 	db	52	;'4'
   135  000616  64                 	db	100	;'d'
   136  000617  00                 	db	0
   137                           
   138                           ; #config settings
   139  000618  00                 	db	0	; dummy byte at the end
   140  0000                     
   141                           	psect	cinit
   142  000FF4                     __pcinit:
   143                           	opt stack 0
   144  000FF4                     start_initialization:
   145                           	opt stack 0
   146  000FF4                     __initialization:
   147                           	opt stack 0
   148                           
   149                           ; Clear objects allocated to BANK0 (86 bytes)
   150  000FF4  EE00  F080         	lfsr	0,__pbssBANK0
   151  000FF8  0E56               	movlw	86
   152  000FFA                     clear_0:
   153  000FFA  6AEE               	clrf	postinc0,c
   154  000FFC  06E8               	decf	wreg,f,c
   155  000FFE  E1FD               	bnz	clear_0
   156                           
   157                           ; Clear objects allocated to COMRAM (5 bytes)
   158  001000  6A30               	clrf	(__pbssCOMRAM+4)& (0+255),c
   159  001002  6A2F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   160  001004  6A2E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   161  001006  6A2D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   162  001008  6A2C               	clrf	__pbssCOMRAM& (0+255),c
   163  00100A                     end_of_initialization:
   164                           	opt stack 0
   165  00100A                     __end_of__initialization:
   166                           	opt stack 0
   167  00100A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   168  00100C  6EF8               	movwf	tblptru,c
   169  00100E  0100               	movlb	0
   170  001010  EF82  F005         	goto	_main	;jump to C main() function
   171                           tblptru	equ	0xFF8
   172                           postinc0	equ	0xFEE
   173                           wreg	equ	0xFE8
   174                           
   175                           	psect	bssCOMRAM
   176  00002C                     __pbssCOMRAM:
   177                           	opt stack 0
   178  00002C                     _voltage:
   179                           	opt stack 0
   180  00002C                     	ds	3
   181  00002F                     _ad:
   182                           	opt stack 0
   183  00002F                     	ds	2
   184                           tblptru	equ	0xFF8
   185                           postinc0	equ	0xFEE
   186                           wreg	equ	0xFE8
   187                           
   188                           	psect	bssBANK0
   189  000080                     __pbssBANK0:
   190                           	opt stack 0
   191  000080                     _buff:
   192                           	opt stack 0
   193  000080                     	ds	86
   194                           tblptru	equ	0xFF8
   195                           postinc0	equ	0xFEE
   196                           wreg	equ	0xFE8
   197                           
   198                           	psect	cstackCOMRAM
   199  000001                     __pcstackCOMRAM:
   200                           	opt stack 0
   201  000001                     ??_isdigit:
   202  000001                     ??_adcAcqTime:
   203  000001                     ??_acdVoltRef:
   204  000001                     ??_adcSetChannel:
   205  000001                     ??_lcdNible:
   206  000001                     ?___wmul:
   207                           	opt stack 0
   208  000001                     ?___lwdiv:
   209                           	opt stack 0
   210  000001                     ?___ftpack:
   211                           	opt stack 0
   212  000001                     adcClock@clk:
   213                           	opt stack 0
   214  000001                     adcResultJust@just:
   215                           	opt stack 0
   216  000001                     adcInterrupt@config:
   217                           	opt stack 0
   218  000001                     adcPortConfig@config:
   219                           	opt stack 0
   220  000001                     uartIntMode@rxMode:
   221                           	opt stack 0
   222  000001                     uartBaudrateMode@mode:
   223                           	opt stack 0
   224  000001                     uartSetBaudrate@spbrg:
   225                           	opt stack 0
   226  000001                     uartRxMode@mode:
   227                           	opt stack 0
   228  000001                     uartSyncMode@mode:
   229                           	opt stack 0
   230  000001                     uartBitMode@mode:
   231                           	opt stack 0
   232  000001                     uartSynchMode@mode:
   233                           	opt stack 0
   234  000001                     uartWrite@data:
   235                           	opt stack 0
   236  000001                     ___wmul@multiplier:
   237                           	opt stack 0
   238  000001                     ___lwdiv@dividend:
   239                           	opt stack 0
   240  000001                     ___ftpack@arg:
   241                           	opt stack 0
   242                           
   243                           ; 3 bytes @ 0x0
   244  000001                     	ds	1
   245  000002                     adcAcqTime@tad:
   246                           	opt stack 0
   247  000002                     acdVoltRef@vref:
   248                           	opt stack 0
   249  000002                     adcSetChannel@channel:
   250                           	opt stack 0
   251  000002                     uartIntMode@txMode:
   252                           	opt stack 0
   253  000002                     _isdigit$926:
   254                           	opt stack 0
   255  000002                     uartPuts@str:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x1
   259  000002                     	ds	1
   260  000003                     ?_adcRead:
   261                           	opt stack 0
   262  000003                     lcdNible@nible:
   263                           	opt stack 0
   264  000003                     isdigit@c:
   265                           	opt stack 0
   266  000003                     ___wmul@multiplicand:
   267                           	opt stack 0
   268  000003                     ___lwdiv@divisor:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x2
   272  000003                     	ds	1
   273  000004                     lcdByte@byte:
   274                           	opt stack 0
   275  000004                     ___ftpack@exp:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x3
   279  000004                     	ds	1
   280  000005                     ??_adcRead:
   281  000005                     lcdCmd@cmd:
   282                           	opt stack 0
   283  000005                     lcdPutc@chr:
   284                           	opt stack 0
   285  000005                     ___ftpack@sign:
   286                           	opt stack 0
   287  000005                     ___wmul@product:
   288                           	opt stack 0
   289  000005                     ___lwdiv@quotient:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x4
   293  000005                     	ds	1
   294  000006                     ??_lcdInit:
   295  000006                     ??___ftpack:
   296  000006                     lcdGotoxy@row:
   297                           	opt stack 0
   298  000006                     lcdPuts@str:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x5
   302  000006                     	ds	1
   303  000007                     lcdGotoxy@col:
   304                           	opt stack 0
   305  000007                     ___lwdiv@counter:
   306                           	opt stack 0
   307  000007                     adcRead@adcResultMSB:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x6
   311  000007                     	ds	1
   312  000008                     ?___lwmod:
   313                           	opt stack 0
   314  000008                     ___lwmod@dividend:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x7
   318  000008                     	ds	1
   319  000009                     ?___lwtoft:
   320                           	opt stack 0
   321  000009                     adcRead@adcResultLSB:
   322                           	opt stack 0
   323  000009                     ___lwtoft@c:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x8
   327  000009                     	ds	1
   328  00000A                     ___lwmod@divisor:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x9
   332  00000A                     	ds	1
   333  00000B                     adcRead@adcResult:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0xA
   337  00000B                     	ds	1
   338  00000C                     ?___ftdiv:
   339                           	opt stack 0
   340  00000C                     ___lwmod@counter:
   341                           	opt stack 0
   342  00000C                     ___ftdiv@f1:
   343                           	opt stack 0
   344                           
   345                           ; 3 bytes @ 0xB
   346  00000C                     	ds	1
   347  00000D                     ?_sprintf:
   348                           	opt stack 0
   349  00000D                     adcRead@ch:
   350                           	opt stack 0
   351  00000D                     sprintf@sp:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0xC
   355  00000D                     	ds	2
   356  00000F                     sprintf@f:
   357                           	opt stack 0
   358  00000F                     ___ftdiv@f2:
   359                           	opt stack 0
   360                           
   361                           ; 3 bytes @ 0xE
   362  00000F                     	ds	3
   363  000012                     ??___ftdiv:
   364                           
   365                           ; 1 bytes @ 0x11
   366  000012                     	ds	1
   367  000013                     ??_sprintf:
   368                           
   369                           ; 1 bytes @ 0x12
   370  000013                     	ds	2
   371  000015                     ___ftdiv@cntr:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x14
   375  000015                     	ds	1
   376  000016                     ___ftdiv@f3:
   377                           	opt stack 0
   378                           
   379                           ; 3 bytes @ 0x15
   380  000016                     	ds	1
   381  000017                     sprintf@ap:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x16
   385  000017                     	ds	2
   386  000019                     sprintf@flag:
   387                           	opt stack 0
   388  000019                     ___ftdiv@exp:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x18
   392  000019                     	ds	1
   393  00001A                     ___ftdiv@sign:
   394                           	opt stack 0
   395  00001A                     sprintf@val:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x19
   399  00001A                     	ds	1
   400  00001B                     ?___ftmul:
   401                           	opt stack 0
   402  00001B                     ___ftmul@f1:
   403                           	opt stack 0
   404                           
   405                           ; 3 bytes @ 0x1A
   406  00001B                     	ds	1
   407  00001C                     sprintf@width:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x1B
   411  00001C                     	ds	2
   412  00001E                     sprintf@prec:
   413                           	opt stack 0
   414  00001E                     ___ftmul@f2:
   415                           	opt stack 0
   416                           
   417                           ; 3 bytes @ 0x1D
   418  00001E                     	ds	1
   419  00001F                     sprintf@c:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x1E
   423  00001F                     	ds	2
   424  000021                     ??___ftmul:
   425                           
   426                           ; 1 bytes @ 0x20
   427  000021                     	ds	3
   428  000024                     ___ftmul@exp:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x23
   432  000024                     	ds	1
   433  000025                     ___ftmul@f3_as_product:
   434                           	opt stack 0
   435                           
   436                           ; 3 bytes @ 0x24
   437  000025                     	ds	3
   438  000028                     ___ftmul@cntr:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x27
   442  000028                     	ds	1
   443  000029                     ___ftmul@sign:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x28
   447  000029                     	ds	1
   448  00002A                     ??_main:
   449                           
   450                           ; 1 bytes @ 0x29
   451  00002A                     	ds	2
   452                           tblptru	equ	0xFF8
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456 ;;
   457 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   458 ;;
   459 ;; *************** function _main *****************
   460 ;; Defined at:
   461 ;;		line 13 in file "main.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;		None
   464 ;; Auto vars:     Size  Location     Type
   465 ;;		None
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   475 ;;      Params:         0       0       0       0       0       0       0
   476 ;;      Locals:         0       0       0       0       0       0       0
   477 ;;      Temps:          2       0       0       0       0       0       0
   478 ;;      Totals:         2       0       0       0       0       0       0
   479 ;;Total ram usage:        2 bytes
   480 ;; Hardware stack levels required when called:    4
   481 ;; This function calls:
   482 ;;		___ftdiv
   483 ;;		___ftmul
   484 ;;		___lwtoft
   485 ;;		_adcInit
   486 ;;		_adcRead
   487 ;;		_lcdGotoxy
   488 ;;		_lcdInit
   489 ;;		_lcdPuts
   490 ;;		_sprintf
   491 ;;		_uartOpen
   492 ;;		_uartPuts
   493 ;; This function is called by:
   494 ;;		Startup code after reset
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text0
   499  000B04                     __ptext0:
   500                           	opt stack 0
   501  000B04                     _main:
   502                           	opt stack 27
   503                           
   504                           ;main.c: 15: lcdInit();
   505                           
   506                           ;incstack = 0
   507  000B04  EC40  F006         	call	_lcdInit	;wreg free
   508                           
   509                           ;main.c: 16: uartOpen();
   510  000B08  EC88  F007         	call	_uartOpen	;wreg free
   511                           
   512                           ;main.c: 17: adcInit();
   513  000B0C  ECA6  F007         	call	_adcInit	;wreg free
   514                           
   515                           ;main.c: 19: lcdPuts("DO ADC");
   516  000B10  0E0B               	movlw	low STR_1
   517  000B12  6E06               	movwf	lcdPuts@str,c
   518  000B14  0E06               	movlw	high STR_1
   519  000B16  6E07               	movwf	lcdPuts@str+1,c
   520  000B18  ECFC  F006         	call	_lcdPuts	;wreg free
   521  000B1C                     l1979:
   522                           
   523                           ;main.c: 21: {
   524                           ;main.c: 22: ad = adcRead(0);
   525  000B1C  0E00               	movlw	0
   526  000B1E  EC67  F007         	call	_adcRead
   527  000B22  C003  F02F         	movff	?_adcRead,_ad
   528  000B26  C004  F030         	movff	?_adcRead+1,_ad+1
   529                           
   530                           ;main.c: 23: voltage = ((float)ad/1023)*5;
   531  000B2A  0EC0               	movlw	192
   532  000B2C  6E0F               	movwf	___ftdiv@f2,c
   533  000B2E  0E7F               	movlw	127
   534  000B30  6E10               	movwf	___ftdiv@f2+1,c
   535  000B32  0E44               	movlw	68
   536  000B34  6E11               	movwf	___ftdiv@f2+2,c
   537  000B36  C02F  F009         	movff	_ad,___lwtoft@c
   538  000B3A  C030  F00A         	movff	_ad+1,___lwtoft@c+1
   539  000B3E  ECE8  F007         	call	___lwtoft	;wreg free
   540  000B42  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
   541  000B46  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
   542  000B4A  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
   543  000B4E  EC0F  F005         	call	___ftdiv	;wreg free
   544  000B52  C00C  F01B         	movff	?___ftdiv,___ftmul@f1
   545  000B56  C00D  F01C         	movff	?___ftdiv+1,___ftmul@f1+1
   546  000B5A  C00E  F01D         	movff	?___ftdiv+2,___ftmul@f1+2
   547  000B5E  0E00               	movlw	0
   548  000B60  6E1E               	movwf	___ftmul@f2,c
   549  000B62  0EA0               	movlw	160
   550  000B64  6E1F               	movwf	___ftmul@f2+1,c
   551  000B66  0E40               	movlw	64
   552  000B68  6E20               	movwf	___ftmul@f2+2,c
   553  000B6A  EC95  F004         	call	___ftmul	;wreg free
   554  000B6E  C01B  F02C         	movff	?___ftmul,_voltage
   555  000B72  C01C  F02D         	movff	?___ftmul+1,_voltage+1
   556  000B76  C01D  F02E         	movff	?___ftmul+2,_voltage+2
   557                           
   558                           ;main.c: 25: sprintf(&buff[0],"%0.4d",ad);
   559  000B7A  0E80               	movlw	low _buff
   560  000B7C  6E0D               	movwf	sprintf@sp,c
   561  000B7E  0E00               	movlw	high _buff
   562  000B80  6E0E               	movwf	sprintf@sp+1,c
   563  000B82  0E12               	movlw	low STR_2
   564  000B84  6E0F               	movwf	sprintf@f,c
   565  000B86  0E06               	movlw	high STR_2
   566  000B88  6E10               	movwf	sprintf@f+1,c
   567  000B8A  C02F  F011         	movff	_ad,?_sprintf+4
   568  000B8E  C030  F012         	movff	_ad+1,?_sprintf+5
   569  000B92  EC0D  F003         	call	_sprintf	;wreg free
   570                           
   571                           ;main.c: 26: lcdGotoxy(0,2);
   572  000B96  0E02               	movlw	2
   573  000B98  6E06               	movwf	lcdGotoxy@row,c
   574  000B9A  0E00               	movlw	0
   575  000B9C  EC46  F007         	call	_lcdGotoxy
   576                           
   577                           ;main.c: 27: lcdPuts(&buff[0]);
   578  000BA0  0E80               	movlw	low _buff
   579  000BA2  6E06               	movwf	lcdPuts@str,c
   580  000BA4  0E00               	movlw	high _buff
   581  000BA6  6E07               	movwf	lcdPuts@str+1,c
   582  000BA8  ECFC  F006         	call	_lcdPuts	;wreg free
   583                           
   584                           ;main.c: 28: uartPuts(&buff[0]);
   585  000BAC  0E80               	movlw	low _buff
   586  000BAE  6E02               	movwf	uartPuts@str,c
   587  000BB0  0E00               	movlw	high _buff
   588  000BB2  6E03               	movwf	uartPuts@str+1,c
   589  000BB4  ECBF  F007         	call	_uartPuts	;wreg free
   590                           
   591                           ;main.c: 35: _delay((unsigned long)((1000)*(11059200/4000.0)));
   592  000BB8  0E0F               	movlw	15
   593  000BBA  6E2B               	movwf	(??_main+1)& (0+255),c
   594  000BBC  0E07               	movlw	7
   595  000BBE  6E2A               	movwf	??_main& (0+255),c
   596  000BC0  0E9A               	movlw	154
   597  000BC2                     u1607:
   598  000BC2  2EE8               	decfsz	wreg,f,c
   599  000BC4  D7FE               	bra	u1607
   600  000BC6  2E2A               	decfsz	??_main& (0+255),f,c
   601  000BC8  D7FC               	bra	u1607
   602  000BCA  2E2B               	decfsz	(??_main+1)& (0+255),f,c
   603  000BCC  D7FA               	bra	u1607
   604  000BCE  D000               	nop2	
   605  000BD0  D7A5               	goto	l1979
   606  000BD2                     __end_of_main:
   607                           	opt stack 0
   608                           tblptru	equ	0xFF8
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           
   612 ;; *************** function _uartPuts *****************
   613 ;; Defined at:
   614 ;;		line 97 in file "myUart.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;  str             2    1[COMRAM] PTR unsigned char 
   617 ;;		 -> buff(86), 
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   629 ;;      Params:         2       0       0       0       0       0       0
   630 ;;      Locals:         0       0       0       0       0       0       0
   631 ;;      Temps:          0       0       0       0       0       0       0
   632 ;;      Totals:         2       0       0       0       0       0       0
   633 ;;Total ram usage:        2 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; Hardware stack levels required when called:    1
   636 ;; This function calls:
   637 ;;		_uartBusy
   638 ;;		_uartWrite
   639 ;; This function is called by:
   640 ;;		_main
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           	psect	text1
   645  000F7E                     __ptext1:
   646                           	opt stack 0
   647  000F7E                     _uartPuts:
   648                           	opt stack 29
   649  000F7E                     l1867:
   650  000F7E  ECA5  F008         	call	_uartBusy	;wreg free
   651  000F82  0900               	iorlw	0
   652  000F84  A4D8               	btfss	status,2,c
   653  000F86  D7FB               	goto	l1867
   654                           
   655                           ;myUart.c: 103: uartWrite(*str);
   656  000F88  C002  FFD9         	movff	uartPuts@str,fsr2l
   657  000F8C  C003  FFDA         	movff	uartPuts@str+1,fsr2h
   658  000F90  50DF               	movf	indf2,w,c
   659  000F92  ECB1  F008         	call	_uartWrite
   660                           
   661                           ;myUart.c: 104: }
   662                           ;myUart.c: 105: while( *str++ );
   663  000F96  C002  FFD9         	movff	uartPuts@str,fsr2l
   664  000F9A  C003  FFDA         	movff	uartPuts@str+1,fsr2h
   665  000F9E  4A02               	infsnz	uartPuts@str,f,c
   666  000FA0  2A03               	incf	uartPuts@str+1,f,c
   667  000FA2  50DF               	movf	indf2,w,c
   668  000FA4  B4D8               	btfsc	status,2,c
   669  000FA6  0012               	return	
   670  000FA8  D7EA               	goto	l1867
   671  000FAA                     __end_of_uartPuts:
   672                           	opt stack 0
   673                           tblptru	equ	0xFF8
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           indf2	equ	0xFDF
   677                           fsr2h	equ	0xFDA
   678                           fsr2l	equ	0xFD9
   679                           status	equ	0xFD8
   680                           
   681 ;; *************** function _uartWrite *****************
   682 ;; Defined at:
   683 ;;		line 78 in file "myUart.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;  data            1    wreg     unsigned char 
   686 ;; Auto vars:     Size  Location     Type
   687 ;;  data            1    0[COMRAM] unsigned char 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      void 
   690 ;; Registers used:
   691 ;;		wreg
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   697 ;;      Params:         0       0       0       0       0       0       0
   698 ;;      Locals:         1       0       0       0       0       0       0
   699 ;;      Temps:          0       0       0       0       0       0       0
   700 ;;      Totals:         1       0       0       0       0       0       0
   701 ;;Total ram usage:        1 bytes
   702 ;; Hardware stack levels used:    1
   703 ;; This function calls:
   704 ;;		Nothing
   705 ;; This function is called by:
   706 ;;		_uartPuts
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text2
   711  001162                     __ptext2:
   712                           	opt stack 0
   713  001162                     _uartWrite:
   714                           	opt stack 29
   715                           
   716                           ;incstack = 0
   717                           ;uartWrite@data stored from wreg
   718  001162  6E01               	movwf	uartWrite@data,c
   719                           
   720                           ;myUart.c: 80: TXREG = data;
   721  001164  C001  FFAD         	movff	uartWrite@data,4013	;volatile
   722  001168  0012               	return		;funcret
   723  00116A                     __end_of_uartWrite:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           postinc0	equ	0xFEE
   727                           wreg	equ	0xFE8
   728                           indf2	equ	0xFDF
   729                           fsr2h	equ	0xFDA
   730                           fsr2l	equ	0xFD9
   731                           status	equ	0xFD8
   732                           
   733 ;; *************** function _uartBusy *****************
   734 ;; Defined at:
   735 ;;		line 116 in file "myUart.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;		None
   738 ;; Auto vars:     Size  Location     Type
   739 ;;		None
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      unsigned char 
   742 ;; Registers used:
   743 ;;		wreg
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   749 ;;      Params:         0       0       0       0       0       0       0
   750 ;;      Locals:         0       0       0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0
   752 ;;      Totals:         0       0       0       0       0       0       0
   753 ;;Total ram usage:        0 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; This function calls:
   756 ;;		Nothing
   757 ;; This function is called by:
   758 ;;		_uartPuts
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text3
   763  00114A                     __ptext3:
   764                           	opt stack 0
   765  00114A                     _uartBusy:
   766                           	opt stack 29
   767                           
   768                           ;myUart.c: 118: if(!TXSTAbits.TRMT)
   769                           
   770                           ;incstack = 0
   771  00114A  B2AC               	btfsc	4012,1,c	;volatile
   772  00114C  D002               	goto	l1533
   773                           
   774                           ;myUart.c: 119: return 1;
   775  00114E  0E01               	movlw	1
   776  001150  0012               	return	
   777  001152                     l1533:
   778                           
   779                           ;myUart.c: 120: else
   780                           ;myUart.c: 121: return 0;
   781  001152  0E00               	movlw	0
   782  001154  0012               	return	
   783  001156                     __end_of_uartBusy:
   784                           	opt stack 0
   785                           tblptru	equ	0xFF8
   786                           postinc0	equ	0xFEE
   787                           wreg	equ	0xFE8
   788                           indf2	equ	0xFDF
   789                           fsr2h	equ	0xFDA
   790                           fsr2l	equ	0xFD9
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function _uartOpen *****************
   794 ;; Defined at:
   795 ;;		line 55 in file "myUart.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, status,2, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   809 ;;      Params:         0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    1
   816 ;; This function calls:
   817 ;;		_uartBaudrateMode
   818 ;;		_uartBitMode
   819 ;;		_uartIntMode
   820 ;;		_uartRxMode
   821 ;;		_uartSetBaudrate
   822 ;;		_uartStart
   823 ;;		_uartSyncMode
   824 ;;		_uartSynchMode
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text4
   831  000F10                     __ptext4:
   832                           	opt stack 0
   833  000F10                     _uartOpen:
   834                           	opt stack 29
   835                           
   836                           ;myUart.c: 58: TXSTA = 0;
   837                           
   838                           ;incstack = 0
   839  000F10  0E00               	movlw	0
   840  000F12  6EAC               	movwf	4012,c	;volatile
   841                           
   842                           ;myUart.c: 59: RCSTA = 0;
   843  000F14  0E00               	movlw	0
   844  000F16  6EAB               	movwf	4011,c	;volatile
   845                           
   846                           ;myUart.c: 61: uartSyncMode(0);
   847  000F18  0E00               	movlw	0
   848  000F1A  EC6D  F008         	call	_uartSyncMode
   849                           
   850                           ;myUart.c: 64: uartSynchMode(0);
   851  000F1E  0E00               	movlw	0
   852  000F20  EC66  F008         	call	_uartSynchMode
   853                           
   854                           ;myUart.c: 66: uartBitMode(0);
   855  000F24  0E00               	movlw	0
   856  000F26  EC25  F008         	call	_uartBitMode
   857                           
   858                           ;myUart.c: 67: uartRxMode(1);
   859  000F2A  0E01               	movlw	1
   860  000F2C  EC74  F008         	call	_uartRxMode
   861                           
   862                           ;myUart.c: 68: uartBaudrateMode(0);
   863  000F30  0E00               	movlw	0
   864  000F32  EC7B  F008         	call	_uartBaudrateMode
   865                           
   866                           ;myUart.c: 69: uartIntMode(0, 1);
   867  000F36  0E01               	movlw	1
   868  000F38  6E01               	movwf	uartIntMode@rxMode,c
   869  000F3A  0E00               	movlw	0
   870  000F3C  EC19  F008         	call	_uartIntMode
   871                           
   872                           ;myUart.c: 70: uartSetBaudrate(17);
   873  000F40  0E11               	movlw	17
   874  000F42  ECB5  F008         	call	_uartSetBaudrate
   875                           
   876                           ;myUart.c: 71: uartStart();
   877  000F46  ECB9  F008         	call	_uartStart	;wreg free
   878  000F4A  0012               	return		;funcret
   879  000F4C                     __end_of_uartOpen:
   880                           	opt stack 0
   881                           tblptru	equ	0xFF8
   882                           postinc0	equ	0xFEE
   883                           wreg	equ	0xFE8
   884                           indf2	equ	0xFDF
   885                           fsr2h	equ	0xFDA
   886                           fsr2l	equ	0xFD9
   887                           status	equ	0xFD8
   888                           
   889 ;; *************** function _uartSynchMode *****************
   890 ;; Defined at:
   891 ;;		line 38 in file "myUart.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  mode            1    wreg     unsigned char 
   894 ;; Auto vars:     Size  Location     Type
   895 ;;  mode            1    0[COMRAM] unsigned char 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   905 ;;      Params:         0       0       0       0       0       0       0
   906 ;;      Locals:         1       0       0       0       0       0       0
   907 ;;      Temps:          0       0       0       0       0       0       0
   908 ;;      Totals:         1       0       0       0       0       0       0
   909 ;;Total ram usage:        1 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_uartOpen
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text5
   919  0010CC                     __ptext5:
   920                           	opt stack 0
   921  0010CC                     _uartSynchMode:
   922                           	opt stack 29
   923                           
   924                           ;incstack = 0
   925                           ;uartSynchMode@mode stored from wreg
   926  0010CC  6E01               	movwf	uartSynchMode@mode,c
   927                           
   928                           ;myUart.c: 40: TXSTAbits.CSRC = mode;
   929  0010CE  B001               	btfsc	uartSynchMode@mode,0,c
   930  0010D0  D002               	bra	u955
   931  0010D2  9EAC               	bcf	4012,7,c	;volatile
   932  0010D4  D001               	bra	u956
   933  0010D6                     u955:
   934  0010D6  8EAC               	bsf	4012,7,c	;volatile
   935  0010D8                     u956:
   936  0010D8  0012               	return		;funcret
   937  0010DA                     __end_of_uartSynchMode:
   938                           	opt stack 0
   939                           tblptru	equ	0xFF8
   940                           postinc0	equ	0xFEE
   941                           wreg	equ	0xFE8
   942                           indf2	equ	0xFDF
   943                           fsr2h	equ	0xFDA
   944                           fsr2l	equ	0xFD9
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function _uartSyncMode *****************
   948 ;; Defined at:
   949 ;;		line 27 in file "myUart.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  mode            1    wreg     unsigned char 
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  mode            1    0[COMRAM] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   963 ;;      Params:         0       0       0       0       0       0       0
   964 ;;      Locals:         1       0       0       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0       0       0
   966 ;;      Totals:         1       0       0       0       0       0       0
   967 ;;Total ram usage:        1 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; This function calls:
   970 ;;		Nothing
   971 ;; This function is called by:
   972 ;;		_uartOpen
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text6
   977  0010DA                     __ptext6:
   978                           	opt stack 0
   979  0010DA                     _uartSyncMode:
   980                           	opt stack 29
   981                           
   982                           ;incstack = 0
   983                           ;uartSyncMode@mode stored from wreg
   984  0010DA  6E01               	movwf	uartSyncMode@mode,c
   985                           
   986                           ;myUart.c: 29: TXSTAbits.SYNC = mode;
   987  0010DC  B001               	btfsc	uartSyncMode@mode,0,c
   988  0010DE  D002               	bra	u925
   989  0010E0  98AC               	bcf	4012,4,c	;volatile
   990  0010E2  D001               	bra	u926
   991  0010E4                     u925:
   992  0010E4  88AC               	bsf	4012,4,c	;volatile
   993  0010E6                     u926:
   994  0010E6  0012               	return		;funcret
   995  0010E8                     __end_of_uartSyncMode:
   996                           	opt stack 0
   997                           tblptru	equ	0xFF8
   998                           postinc0	equ	0xFEE
   999                           wreg	equ	0xFE8
  1000                           indf2	equ	0xFDF
  1001                           fsr2h	equ	0xFDA
  1002                           fsr2l	equ	0xFD9
  1003                           status	equ	0xFD8
  1004                           
  1005 ;; *************** function _uartStart *****************
  1006 ;; Defined at:
  1007 ;;		line 43 in file "myUart.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;		None
  1010 ;; Auto vars:     Size  Location     Type
  1011 ;;		None
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		None
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1021 ;;      Params:         0       0       0       0       0       0       0
  1022 ;;      Locals:         0       0       0       0       0       0       0
  1023 ;;      Temps:          0       0       0       0       0       0       0
  1024 ;;      Totals:         0       0       0       0       0       0       0
  1025 ;;Total ram usage:        0 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; This function calls:
  1028 ;;		Nothing
  1029 ;; This function is called by:
  1030 ;;		_uartOpen
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text7
  1035  001172                     __ptext7:
  1036                           	opt stack 0
  1037  001172                     _uartStart:
  1038                           	opt stack 29
  1039                           
  1040                           ;myUart.c: 45: TXSTAbits.TXEN = 1;
  1041                           
  1042                           ;incstack = 0
  1043  001172  8AAC               	bsf	4012,5,c	;volatile
  1044                           
  1045                           ;myUart.c: 46: RCSTAbits.SPEN = 1;
  1046  001174  8EAB               	bsf	4011,7,c	;volatile
  1047  001176  0012               	return		;funcret
  1048  001178                     __end_of_uartStart:
  1049                           	opt stack 0
  1050                           tblptru	equ	0xFF8
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           indf2	equ	0xFDF
  1054                           fsr2h	equ	0xFDA
  1055                           fsr2l	equ	0xFD9
  1056                           status	equ	0xFD8
  1057                           
  1058 ;; *************** function _uartSetBaudrate *****************
  1059 ;; Defined at:
  1060 ;;		line 18 in file "myUart.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  spbrg           1    wreg     unsigned char 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  spbrg           1    0[COMRAM] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1074 ;;      Params:         0       0       0       0       0       0       0
  1075 ;;      Locals:         1       0       0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0
  1077 ;;      Totals:         1       0       0       0       0       0       0
  1078 ;;Total ram usage:        1 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_uartOpen
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text8
  1088  00116A                     __ptext8:
  1089                           	opt stack 0
  1090  00116A                     _uartSetBaudrate:
  1091                           	opt stack 29
  1092                           
  1093                           ;incstack = 0
  1094                           ;uartSetBaudrate@spbrg stored from wreg
  1095  00116A  6E01               	movwf	uartSetBaudrate@spbrg,c
  1096                           
  1097                           ;myUart.c: 20: SPBRG = spbrg;
  1098  00116C  C001  FFAF         	movff	uartSetBaudrate@spbrg,4015	;volatile
  1099  001170  0012               	return		;funcret
  1100  001172                     __end_of_uartSetBaudrate:
  1101                           	opt stack 0
  1102                           tblptru	equ	0xFF8
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           indf2	equ	0xFDF
  1106                           fsr2h	equ	0xFDA
  1107                           fsr2l	equ	0xFD9
  1108                           status	equ	0xFD8
  1109                           
  1110 ;; *************** function _uartRxMode *****************
  1111 ;; Defined at:
  1112 ;;		line 22 in file "myUart.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  mode            1    wreg     unsigned char 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  mode            1    0[COMRAM] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1126 ;;      Params:         0       0       0       0       0       0       0
  1127 ;;      Locals:         1       0       0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0
  1129 ;;      Totals:         1       0       0       0       0       0       0
  1130 ;;Total ram usage:        1 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; This function calls:
  1133 ;;		Nothing
  1134 ;; This function is called by:
  1135 ;;		_uartOpen
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text9
  1140  0010E8                     __ptext9:
  1141                           	opt stack 0
  1142  0010E8                     _uartRxMode:
  1143                           	opt stack 29
  1144                           
  1145                           ;incstack = 0
  1146                           ;uartRxMode@mode stored from wreg
  1147  0010E8  6E01               	movwf	uartRxMode@mode,c
  1148                           
  1149                           ;myUart.c: 24: RCSTAbits.CREN = mode;
  1150  0010EA  B001               	btfsc	uartRxMode@mode,0,c
  1151  0010EC  D002               	bra	u915
  1152  0010EE  98AB               	bcf	4011,4,c	;volatile
  1153  0010F0  D001               	bra	u916
  1154  0010F2                     u915:
  1155  0010F2  88AB               	bsf	4011,4,c	;volatile
  1156  0010F4                     u916:
  1157  0010F4  0012               	return		;funcret
  1158  0010F6                     __end_of_uartRxMode:
  1159                           	opt stack 0
  1160                           tblptru	equ	0xFF8
  1161                           postinc0	equ	0xFEE
  1162                           wreg	equ	0xFE8
  1163                           indf2	equ	0xFDF
  1164                           fsr2h	equ	0xFDA
  1165                           fsr2l	equ	0xFD9
  1166                           status	equ	0xFD8
  1167                           
  1168 ;; *************** function _uartIntMode *****************
  1169 ;; Defined at:
  1170 ;;		line 7 in file "myUart.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  txMode          1    wreg     unsigned char 
  1173 ;;  rxMode          1    0[COMRAM] unsigned char 
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  txMode          1    1[COMRAM] unsigned char 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1185 ;;      Params:         1       0       0       0       0       0       0
  1186 ;;      Locals:         1       0       0       0       0       0       0
  1187 ;;      Temps:          0       0       0       0       0       0       0
  1188 ;;      Totals:         2       0       0       0       0       0       0
  1189 ;;Total ram usage:        2 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_uartOpen
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text10
  1199  001032                     __ptext10:
  1200                           	opt stack 0
  1201  001032                     _uartIntMode:
  1202                           	opt stack 29
  1203                           
  1204                           ;incstack = 0
  1205                           ;uartIntMode@txMode stored from wreg
  1206  001032  6E02               	movwf	uartIntMode@txMode,c
  1207                           
  1208                           ;myUart.c: 9: PIR1bits.TXIF = txMode;
  1209  001034  B002               	btfsc	uartIntMode@txMode,0,c
  1210  001036  D002               	bra	u885
  1211  001038  989E               	bcf	3998,4,c	;volatile
  1212  00103A  D001               	bra	u886
  1213  00103C                     u885:
  1214  00103C  889E               	bsf	3998,4,c	;volatile
  1215  00103E                     u886:
  1216                           
  1217                           ;myUart.c: 10: PIR1bits.RCIF = rxMode;
  1218  00103E  B001               	btfsc	uartIntMode@rxMode,0,c
  1219  001040  D002               	bra	u895
  1220  001042  9A9E               	bcf	3998,5,c	;volatile
  1221  001044  D001               	bra	u896
  1222  001046                     u895:
  1223  001046  8A9E               	bsf	3998,5,c	;volatile
  1224  001048                     u896:
  1225  001048  0012               	return		;funcret
  1226  00104A                     __end_of_uartIntMode:
  1227                           	opt stack 0
  1228                           tblptru	equ	0xFF8
  1229                           postinc0	equ	0xFEE
  1230                           wreg	equ	0xFE8
  1231                           indf2	equ	0xFDF
  1232                           fsr2h	equ	0xFDA
  1233                           fsr2l	equ	0xFD9
  1234                           status	equ	0xFD8
  1235                           
  1236 ;; *************** function _uartBitMode *****************
  1237 ;; Defined at:
  1238 ;;		line 32 in file "myUart.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  mode            1    wreg     unsigned char 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  mode            1    0[COMRAM] unsigned char 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1252 ;;      Params:         0       0       0       0       0       0       0
  1253 ;;      Locals:         1       0       0       0       0       0       0
  1254 ;;      Temps:          0       0       0       0       0       0       0
  1255 ;;      Totals:         1       0       0       0       0       0       0
  1256 ;;Total ram usage:        1 bytes
  1257 ;; Hardware stack levels used:    1
  1258 ;; This function calls:
  1259 ;;		Nothing
  1260 ;; This function is called by:
  1261 ;;		_uartOpen
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text11
  1266  00104A                     __ptext11:
  1267                           	opt stack 0
  1268  00104A                     _uartBitMode:
  1269                           	opt stack 29
  1270                           
  1271                           ;incstack = 0
  1272                           ;uartBitMode@mode stored from wreg
  1273  00104A  6E01               	movwf	uartBitMode@mode,c
  1274                           
  1275                           ;myUart.c: 34: TXSTAbits.TX9 = mode;
  1276  00104C  B001               	btfsc	uartBitMode@mode,0,c
  1277  00104E  D002               	bra	u935
  1278  001050  9CAC               	bcf	4012,6,c	;volatile
  1279  001052  D001               	bra	u936
  1280  001054                     u935:
  1281  001054  8CAC               	bsf	4012,6,c	;volatile
  1282  001056                     u936:
  1283                           
  1284                           ;myUart.c: 35: RCSTAbits.RX9 = mode;
  1285  001056  B001               	btfsc	uartBitMode@mode,0,c
  1286  001058  D002               	bra	u945
  1287  00105A  9CAB               	bcf	4011,6,c	;volatile
  1288  00105C  D001               	bra	u946
  1289  00105E                     u945:
  1290  00105E  8CAB               	bsf	4011,6,c	;volatile
  1291  001060                     u946:
  1292  001060  0012               	return		;funcret
  1293  001062                     __end_of_uartBitMode:
  1294                           	opt stack 0
  1295                           tblptru	equ	0xFF8
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           indf2	equ	0xFDF
  1299                           fsr2h	equ	0xFDA
  1300                           fsr2l	equ	0xFD9
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function _uartBaudrateMode *****************
  1304 ;; Defined at:
  1305 ;;		line 13 in file "myUart.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  mode            1    wreg     unsigned char 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  mode            1    0[COMRAM] unsigned char 
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1319 ;;      Params:         0       0       0       0       0       0       0
  1320 ;;      Locals:         1       0       0       0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0       0       0
  1322 ;;      Totals:         1       0       0       0       0       0       0
  1323 ;;Total ram usage:        1 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; This function calls:
  1326 ;;		Nothing
  1327 ;; This function is called by:
  1328 ;;		_uartOpen
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text12
  1333  0010F6                     __ptext12:
  1334                           	opt stack 0
  1335  0010F6                     _uartBaudrateMode:
  1336                           	opt stack 29
  1337                           
  1338                           ;incstack = 0
  1339                           ;uartBaudrateMode@mode stored from wreg
  1340  0010F6  6E01               	movwf	uartBaudrateMode@mode,c
  1341                           
  1342                           ;myUart.c: 15: TXSTAbits.BRGH = mode;
  1343  0010F8  B001               	btfsc	uartBaudrateMode@mode,0,c
  1344  0010FA  D002               	bra	u905
  1345  0010FC  94AC               	bcf	4012,2,c	;volatile
  1346  0010FE  D001               	bra	u906
  1347  001100                     u905:
  1348  001100  84AC               	bsf	4012,2,c	;volatile
  1349  001102                     u906:
  1350  001102  0012               	return		;funcret
  1351  001104                     __end_of_uartBaudrateMode:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           postinc0	equ	0xFEE
  1355                           wreg	equ	0xFE8
  1356                           indf2	equ	0xFDF
  1357                           fsr2h	equ	0xFDA
  1358                           fsr2l	equ	0xFD9
  1359                           status	equ	0xFD8
  1360                           
  1361 ;; *************** function _sprintf *****************
  1362 ;; Defined at:
  1363 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1366 ;;		 -> buff(86), 
  1367 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1368 ;;		 -> STR_2(6), 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  tmpval          4    0        struct .
  1371 ;;  cp              3    0        PTR const unsigned char 
  1372 ;;  width           2   27[COMRAM] int 
  1373 ;;  val             2   25[COMRAM] unsigned int 
  1374 ;;  ap              2   22[COMRAM] PTR void [1]
  1375 ;;		 -> ?_sprintf(2), 
  1376 ;;  len             2    0        unsigned int 
  1377 ;;  c               1   30[COMRAM] char 
  1378 ;;  prec            1   29[COMRAM] char 
  1379 ;;  flag            1   24[COMRAM] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  2   12[COMRAM] int 
  1382 ;; Registers used:
  1383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1389 ;;      Params:         6       0       0       0       0       0       0
  1390 ;;      Locals:         9       0       0       0       0       0       0
  1391 ;;      Temps:          4       0       0       0       0       0       0
  1392 ;;      Totals:        19       0       0       0       0       0       0
  1393 ;;Total ram usage:       19 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    1
  1396 ;; This function calls:
  1397 ;;		___lwdiv
  1398 ;;		___lwmod
  1399 ;;		___wmul
  1400 ;;		_isdigit
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text13
  1407  00061A                     __ptext13:
  1408                           	opt stack 0
  1409  00061A                     _sprintf:
  1410                           	opt stack 29
  1411                           
  1412                           ;doprnt.c: 494: va_list ap;
  1413                           ;doprnt.c: 499: signed char c;
  1414                           ;doprnt.c: 501: int width;
  1415                           ;doprnt.c: 506: signed char prec;
  1416                           ;doprnt.c: 508: unsigned char flag;
  1417                           ;doprnt.c: 523: union {
  1418                           ;doprnt.c: 524: unsigned long vd;
  1419                           ;doprnt.c: 525: double integ;
  1420                           ;doprnt.c: 526: } tmpval;
  1421                           ;doprnt.c: 528: unsigned int val;
  1422                           ;doprnt.c: 529: unsigned len;
  1423                           ;doprnt.c: 530: const char * cp;
  1424                           ;doprnt.c: 533: *ap = __va_start();
  1425                           
  1426                           ;incstack = 0
  1427  00061A  0E11               	movlw	low (?_sprintf+4)
  1428  00061C  6E17               	movwf	sprintf@ap,c
  1429  00061E  0E00               	movlw	high (?_sprintf+4)
  1430  000620  6E18               	movwf	sprintf@ap+1,c
  1431                           
  1432                           ;doprnt.c: 536: while(c = *f++) {
  1433  000622  D170               	goto	l1845
  1434  000624                     l1707:
  1435                           
  1436                           ;doprnt.c: 538: if(c != '%')
  1437  000624  0E25               	movlw	37
  1438  000626  181F               	xorwf	sprintf@c,w,c
  1439  000628  B4D8               	btfsc	status,2,c
  1440  00062A  D009               	goto	l1713
  1441                           
  1442                           ;doprnt.c: 540: {
  1443                           ;doprnt.c: 541: ((*sp++ = (c)));
  1444  00062C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1445  000630  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1446  000634  C01F  FFDF         	movff	sprintf@c,indf2
  1447  000638  4A0D               	infsnz	sprintf@sp,f,c
  1448  00063A  2A0E               	incf	sprintf@sp+1,f,c
  1449                           
  1450                           ;doprnt.c: 542: continue;
  1451  00063C  D163               	goto	l1845
  1452  00063E                     l1713:
  1453                           
  1454                           ;doprnt.c: 543: }
  1455                           ;doprnt.c: 546: width = 0;
  1456  00063E  0E00               	movlw	0
  1457  000640  6E1D               	movwf	sprintf@width+1,c
  1458  000642  0E00               	movlw	0
  1459  000644  6E1C               	movwf	sprintf@width,c
  1460                           
  1461                           ;doprnt.c: 548: flag = 0;
  1462  000646  0E00               	movlw	0
  1463  000648  6E19               	movwf	sprintf@flag,c
  1464                           
  1465                           ;doprnt.c: 551: switch(*f) {
  1466                           
  1467                           ;doprnt.c: 550: for(;;) {
  1468  00064A  D003               	goto	l1719
  1469  00064C                     l1715:
  1470                           
  1471                           ;doprnt.c: 580: flag |= 0x04;
  1472  00064C  8419               	bsf	sprintf@flag,2,c
  1473                           
  1474                           ;doprnt.c: 581: f++;
  1475  00064E  4A0F               	infsnz	sprintf@f,f,c
  1476  000650  2A10               	incf	sprintf@f+1,f,c
  1477  000652                     l1719:
  1478  000652  C00F  FFF6         	movff	sprintf@f,tblptrl
  1479  000656  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1480  00065A                     	if	0	;tblptru may be non-zero
  1481  00065A                     	endif
  1482  00065A                     	if	0	;tblptru may be non-zero
  1483  00065A                     	endif
  1484  00065A  0008               	tblrd		*
  1485  00065C  50F5               	movf	tablat,w,c
  1486                           
  1487                           ; Switch size 1, requested type "space"
  1488                           ; Number of cases is 1, Range of values is 48 to 48
  1489                           ; switch strategies available:
  1490                           ; Name         Instructions Cycles
  1491                           ; simple_byte            4     3 (average)
  1492                           ;	Chosen strategy is simple_byte
  1493  00065E  0A30               	xorlw	48	; case 48
  1494  000660  B4D8               	btfsc	status,2,c
  1495  000662  D7F4               	goto	l1715
  1496                           
  1497                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1498                           
  1499                           ;doprnt.c: 586: }
  1500                           
  1501                           ;doprnt.c: 585: break;
  1502  000664  C00F  FFF6         	movff	sprintf@f,tblptrl
  1503  000668  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1504  00066C                     	if	0	;tblptru may be non-zero
  1505  00066C                     	endif
  1506  00066C                     	if	0	;tblptru may be non-zero
  1507  00066C                     	endif
  1508  00066C  0008               	tblrd		*
  1509  00066E  50F5               	movf	tablat,w,c
  1510  000670  EC0A  F008         	call	_isdigit
  1511  000674  A0D8               	btfss	status,0,c
  1512  000676  D032               	goto	l1733
  1513                           
  1514                           ;doprnt.c: 598: width = 0;
  1515  000678  0E00               	movlw	0
  1516  00067A  6E1D               	movwf	sprintf@width+1,c
  1517  00067C  0E00               	movlw	0
  1518  00067E  6E1C               	movwf	sprintf@width,c
  1519  000680                     l1725:
  1520                           
  1521                           ;doprnt.c: 600: width *= 10;
  1522  000680  C01C  F001         	movff	sprintf@width,___wmul@multiplier
  1523  000684  C01D  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1524  000688  0E00               	movlw	0
  1525  00068A  6E04               	movwf	___wmul@multiplicand+1,c
  1526  00068C  0E0A               	movlw	10
  1527  00068E  6E03               	movwf	___wmul@multiplicand,c
  1528  000690  ECD5  F007         	call	___wmul	;wreg free
  1529  000694  C001  F01C         	movff	?___wmul,sprintf@width
  1530  000698  C002  F01D         	movff	?___wmul+1,sprintf@width+1
  1531                           
  1532                           ;doprnt.c: 601: width += *f++ - '0';
  1533  00069C  0ED0               	movlw	208
  1534  00069E  6E13               	movwf	??_sprintf& (0+255),c
  1535  0006A0  0EFF               	movlw	255
  1536  0006A2  6E14               	movwf	(??_sprintf+1)& (0+255),c
  1537  0006A4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1538  0006A8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1539  0006AC                     	if	0	;tblptru may be non-zero
  1540  0006AC                     	endif
  1541  0006AC                     	if	0	;tblptru may be non-zero
  1542  0006AC                     	endif
  1543  0006AC  0008               	tblrd		*
  1544  0006AE  50F5               	movf	tablat,w,c
  1545  0006B0  6E15               	movwf	(??_sprintf+2)& (0+255),c
  1546  0006B2  6A16               	clrf	(??_sprintf+3)& (0+255),c
  1547  0006B4  5013               	movf	??_sprintf,w,c
  1548  0006B6  2615               	addwf	??_sprintf+2,f,c
  1549  0006B8  5014               	movf	??_sprintf+1,w,c
  1550  0006BA  2216               	addwfc	??_sprintf+3,f,c
  1551  0006BC  5015               	movf	??_sprintf+2,w,c
  1552  0006BE  261C               	addwf	sprintf@width,f,c
  1553  0006C0  5016               	movf	??_sprintf+3,w,c
  1554  0006C2  221D               	addwfc	sprintf@width+1,f,c
  1555  0006C4  4A0F               	infsnz	sprintf@f,f,c
  1556  0006C6  2A10               	incf	sprintf@f+1,f,c
  1557                           
  1558                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1559  0006C8  C00F  FFF6         	movff	sprintf@f,tblptrl
  1560  0006CC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1561  0006D0                     	if	0	;tblptru may be non-zero
  1562  0006D0                     	endif
  1563  0006D0                     	if	0	;tblptru may be non-zero
  1564  0006D0                     	endif
  1565  0006D0  0008               	tblrd		*
  1566  0006D2  50F5               	movf	tablat,w,c
  1567  0006D4  EC0A  F008         	call	_isdigit
  1568  0006D8  B0D8               	btfsc	status,0,c
  1569  0006DA  D7D2               	goto	l1725
  1570  0006DC                     l1733:
  1571                           
  1572                           ;doprnt.c: 608: }
  1573                           ;doprnt.c: 611: if(*f == '.') {
  1574  0006DC  C00F  FFF6         	movff	sprintf@f,tblptrl
  1575  0006E0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1576  0006E4                     	if	0	;tblptru may be non-zero
  1577  0006E4                     	endif
  1578  0006E4                     	if	0	;tblptru may be non-zero
  1579  0006E4                     	endif
  1580  0006E4  0008               	tblrd		*
  1581  0006E6  50F5               	movf	tablat,w,c
  1582  0006E8  0A2E               	xorlw	46
  1583  0006EA  A4D8               	btfss	status,2,c
  1584  0006EC  D01F               	goto	l1745
  1585                           
  1586                           ;doprnt.c: 613: f++;
  1587  0006EE  4A0F               	infsnz	sprintf@f,f,c
  1588  0006F0  2A10               	incf	sprintf@f+1,f,c
  1589                           
  1590                           ;doprnt.c: 620: {
  1591                           ;doprnt.c: 621: prec = 0;
  1592  0006F2  0E00               	movlw	0
  1593  0006F4  6E1E               	movwf	sprintf@prec,c
  1594                           
  1595                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1596  0006F6  D00F               	goto	l1743
  1597  0006F8                     l1739:
  1598                           
  1599                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1600  0006F8  C00F  FFF6         	movff	sprintf@f,tblptrl
  1601  0006FC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1602  000700                     	if	0	;tblptru may be non-zero
  1603  000700                     	endif
  1604  000700                     	if	0	;tblptru may be non-zero
  1605  000700                     	endif
  1606  000700  0008               	tblrd		*
  1607  000702  CFF5 F013          	movff	tablat,??_sprintf
  1608  000706  501E               	movf	sprintf@prec,w,c
  1609  000708  0D0A               	mullw	10
  1610  00070A  50F3               	movf	prodl,w,c
  1611  00070C  2413               	addwf	??_sprintf,w,c
  1612  00070E  0FD0               	addlw	208
  1613  000710  6E1E               	movwf	sprintf@prec,c
  1614  000712  4A0F               	infsnz	sprintf@f,f,c
  1615  000714  2A10               	incf	sprintf@f+1,f,c
  1616  000716                     l1743:
  1617  000716  C00F  FFF6         	movff	sprintf@f,tblptrl
  1618  00071A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1619  00071E                     	if	0	;tblptru may be non-zero
  1620  00071E                     	endif
  1621  00071E                     	if	0	;tblptru may be non-zero
  1622  00071E                     	endif
  1623  00071E  0008               	tblrd		*
  1624  000720  50F5               	movf	tablat,w,c
  1625  000722  EC0A  F008         	call	_isdigit
  1626  000726  A0D8               	btfss	status,0,c
  1627  000728  D003               	goto	l1749
  1628  00072A  D7E6               	goto	l1739
  1629  00072C                     l1745:
  1630                           
  1631                           ;doprnt.c: 626: prec = 0;
  1632  00072C  0E00               	movlw	0
  1633  00072E  6E1E               	movwf	sprintf@prec,c
  1634  000730                     l1749:
  1635  000730  C00F  FFF6         	movff	sprintf@f,tblptrl
  1636  000734  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1637  000738  4A0F               	infsnz	sprintf@f,f,c
  1638  00073A  2A10               	incf	sprintf@f+1,f,c
  1639  00073C                     	if	0	;tblptru may be non-zero
  1640  00073C                     	endif
  1641  00073C                     	if	0	;tblptru may be non-zero
  1642  00073C                     	endif
  1643  00073C  0008               	tblrd		*
  1644  00073E  CFF5 F01F          	movff	tablat,sprintf@c
  1645  000742  501F               	movf	sprintf@c,w,c
  1646                           
  1647                           ; Switch size 1, requested type "space"
  1648                           ; Number of cases is 3, Range of values is 0 to 105
  1649                           ; switch strategies available:
  1650                           ; Name         Instructions Cycles
  1651                           ; simple_byte           10     6 (average)
  1652                           ;	Chosen strategy is simple_byte
  1653  000744  0A00               	xorlw	0	; case 0
  1654  000746  B4D8               	btfsc	status,2,c
  1655  000748  D0E9               	goto	l1847
  1656  00074A  0A64               	xorlw	100	; case 100
  1657  00074C  B4D8               	btfsc	status,2,c
  1658  00074E  D003               	goto	l1751
  1659  000750  0A0D               	xorlw	13	; case 105
  1660  000752  A4D8               	btfss	status,2,c
  1661  000754  D0D7               	goto	l1845
  1662  000756                     l1751:
  1663                           
  1664                           ;doprnt.c: 1253: {
  1665                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1666  000756  C017  FFD9         	movff	sprintf@ap,fsr2l
  1667  00075A  C018  FFDA         	movff	sprintf@ap+1,fsr2h
  1668  00075E  CFDE F01A          	movff	postinc2,sprintf@val
  1669  000762  CFDD F01B          	movff	postdec2,sprintf@val+1
  1670  000766  0E02               	movlw	2
  1671  000768  2617               	addwf	sprintf@ap,f,c
  1672  00076A  0E00               	movlw	0
  1673  00076C  2218               	addwfc	sprintf@ap+1,f,c
  1674                           
  1675                           ;doprnt.c: 1261: if((int)val < 0) {
  1676  00076E  AE1B               	btfss	sprintf@val+1,7,c
  1677  000770  D006               	goto	l1761
  1678                           
  1679                           ;doprnt.c: 1262: flag |= 0x03;
  1680  000772  0E03               	movlw	3
  1681  000774  1219               	iorwf	sprintf@flag,f,c
  1682                           
  1683                           ;doprnt.c: 1263: val = -val;
  1684  000776  6C1A               	negf	sprintf@val,c
  1685  000778  1E1B               	comf	sprintf@val+1,f,c
  1686  00077A  B0D8               	btfsc	status,0,c
  1687  00077C  2A1B               	incf	sprintf@val+1,f,c
  1688  00077E                     l1761:
  1689                           
  1690                           ;doprnt.c: 1264: }
  1691                           ;doprnt.c: 1266: }
  1692                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1693  00077E  501E               	movf	sprintf@prec,w,c
  1694  000780  A4D8               	btfss	status,2,c
  1695  000782  D004               	goto	l1767
  1696  000784  501A               	movf	sprintf@val,w,c
  1697  000786  101B               	iorwf	sprintf@val+1,w,c
  1698  000788  B4D8               	btfsc	status,2,c
  1699                           
  1700                           ;doprnt.c: 1291: prec++;
  1701  00078A  2A1E               	incf	sprintf@prec,f,c
  1702  00078C                     l1767:
  1703                           
  1704                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1705  00078C  0E01               	movlw	1
  1706  00078E  6E1F               	movwf	sprintf@c,c
  1707  000790                     l1769:
  1708  000790  0E05               	movlw	5
  1709  000792  181F               	xorwf	sprintf@c,w,c
  1710  000794  B4D8               	btfsc	status,2,c
  1711  000796  D012               	goto	l1781
  1712                           
  1713                           ;doprnt.c: 1306: if(val < dpowers[c])
  1714  000798  501F               	movf	sprintf@c,w,c
  1715  00079A  0D02               	mullw	2
  1716  00079C  0E01               	movlw	low _dpowers
  1717  00079E  24F3               	addwf	prodl,w,c
  1718  0007A0  6EF6               	movwf	tblptrl,c
  1719  0007A2  0E06               	movlw	high _dpowers
  1720  0007A4  20F4               	addwfc	prodh,w,c
  1721  0007A6  6EF7               	movwf	tblptrh,c
  1722  0007A8                     	if	0	;There are less than 3 active tblptr bytes
  1723  0007A8                     	endif
  1724  0007A8  0009               	tblrd		*+
  1725  0007AA  50F5               	movf	tablat,w,c
  1726  0007AC  5C1A               	subwf	sprintf@val,w,c
  1727  0007AE  0009               	tblrd		*+
  1728  0007B0  50F5               	movf	tablat,w,c
  1729  0007B2  581B               	subwfb	sprintf@val+1,w,c
  1730  0007B4  A0D8               	btfss	status,0,c
  1731  0007B6  D002               	goto	l1781
  1732                           
  1733                           ;doprnt.c: 1307: break;
  1734  0007B8  2A1F               	incf	sprintf@c,f,c
  1735  0007BA  D7EA               	goto	l1769
  1736  0007BC                     l1781:
  1737                           
  1738                           ;doprnt.c: 1339: if(c < prec)
  1739  0007BC  501F               	movf	sprintf@c,w,c
  1740  0007BE  0A80               	xorlw	128
  1741  0007C0  6E13               	movwf	??_sprintf& (0+255),c
  1742  0007C2  501E               	movf	sprintf@prec,w,c
  1743  0007C4  0A80               	xorlw	128
  1744  0007C6  5C13               	subwf	??_sprintf& (0+255),w,c
  1745  0007C8  B0D8               	btfsc	status,0,c
  1746  0007CA  D003               	goto	l1785
  1747                           
  1748                           ;doprnt.c: 1340: c = prec;
  1749  0007CC  C01E  F01F         	movff	sprintf@prec,sprintf@c
  1750  0007D0  D009               	goto	l1789
  1751  0007D2                     l1785:
  1752                           
  1753                           ;doprnt.c: 1341: else if(prec < c)
  1754  0007D2  501E               	movf	sprintf@prec,w,c
  1755  0007D4  0A80               	xorlw	128
  1756  0007D6  6E13               	movwf	??_sprintf& (0+255),c
  1757  0007D8  501F               	movf	sprintf@c,w,c
  1758  0007DA  0A80               	xorlw	128
  1759  0007DC  5C13               	subwf	??_sprintf& (0+255),w,c
  1760  0007DE  A0D8               	btfss	status,0,c
  1761                           
  1762                           ;doprnt.c: 1342: prec = c;
  1763  0007E0  C01F  F01E         	movff	sprintf@c,sprintf@prec
  1764  0007E4                     l1789:
  1765                           
  1766                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1767  0007E4  501C               	movf	sprintf@width,w,c
  1768  0007E6  101D               	iorwf	sprintf@width+1,w,c
  1769  0007E8  B4D8               	btfsc	status,2,c
  1770  0007EA  D009               	goto	l1801
  1771  0007EC  C019  F013         	movff	sprintf@flag,??_sprintf
  1772  0007F0  0E03               	movlw	3
  1773  0007F2  1613               	andwf	??_sprintf,f,c
  1774  0007F4  B4D8               	btfsc	status,2,c
  1775  0007F6  D003               	goto	l1801
  1776                           
  1777                           ;doprnt.c: 1346: width--;
  1778  0007F8  061C               	decf	sprintf@width,f,c
  1779  0007FA  A0D8               	btfss	status,0,c
  1780  0007FC  061D               	decf	sprintf@width+1,f,c
  1781  0007FE                     l1801:
  1782                           
  1783                           ;doprnt.c: 1353: }
  1784                           ;doprnt.c: 1381: if(width > c)
  1785  0007FE  0E80               	movlw	128
  1786  000800  BE1F               	btfsc	sprintf@c,7,c
  1787  000802  0E7F               	movlw	127
  1788  000804  6E13               	movwf	??_sprintf& (0+255),c
  1789  000806  501C               	movf	sprintf@width,w,c
  1790  000808  5C1F               	subwf	sprintf@c,w,c
  1791  00080A  501D               	movf	sprintf@width+1,w,c
  1792  00080C  0A80               	xorlw	128
  1793  00080E  5813               	subwfb	??_sprintf& (0+255),w,c
  1794  000810  B0D8               	btfsc	status,0,c
  1795  000812  D007               	goto	l1805
  1796                           
  1797                           ;doprnt.c: 1382: width -= c;
  1798  000814  501F               	movf	sprintf@c,w,c
  1799  000816  5E1C               	subwf	sprintf@width,f,c
  1800  000818  0E00               	movlw	0
  1801  00081A  BE1F               	btfsc	sprintf@c,7,c
  1802  00081C  0EFF               	movlw	255
  1803  00081E  5A1D               	subwfb	sprintf@width+1,f,c
  1804  000820  D004               	goto	l1807
  1805  000822                     l1805:
  1806                           
  1807                           ;doprnt.c: 1383: else
  1808                           ;doprnt.c: 1384: width = 0;
  1809  000822  0E00               	movlw	0
  1810  000824  6E1D               	movwf	sprintf@width+1,c
  1811  000826  0E00               	movlw	0
  1812  000828  6E1C               	movwf	sprintf@width,c
  1813  00082A                     l1807:
  1814                           
  1815                           ;doprnt.c: 1387: if(flag & 0x04) {
  1816  00082A  A419               	btfss	sprintf@flag,2,c
  1817  00082C  D01E               	goto	l1823
  1818                           
  1819                           ;doprnt.c: 1392: if(flag & 0x03)
  1820  00082E  C019  F013         	movff	sprintf@flag,??_sprintf
  1821  000832  0E03               	movlw	3
  1822  000834  1613               	andwf	??_sprintf,f,c
  1823  000836  B4D8               	btfsc	status,2,c
  1824  000838  D008               	goto	l1815
  1825                           
  1826                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1827  00083A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1828  00083E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1829  000842  0E2D               	movlw	45
  1830  000844  6EDF               	movwf	indf2,c
  1831  000846  4A0D               	infsnz	sprintf@sp,f,c
  1832  000848  2A0E               	incf	sprintf@sp+1,f,c
  1833  00084A                     l1815:
  1834                           
  1835                           ;doprnt.c: 1415: if(width)
  1836  00084A  501C               	movf	sprintf@width,w,c
  1837  00084C  101D               	iorwf	sprintf@width+1,w,c
  1838  00084E  B4D8               	btfsc	status,2,c
  1839  000850  D055               	goto	l1843
  1840                           
  1841                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1842                           
  1843                           ;doprnt.c: 1416: do
  1844  000852  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1845  000856  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1846  00085A  0E30               	movlw	48
  1847  00085C  6EDF               	movwf	indf2,c
  1848  00085E  4A0D               	infsnz	sprintf@sp,f,c
  1849  000860  2A0E               	incf	sprintf@sp+1,f,c
  1850                           
  1851                           ;doprnt.c: 1418: while(--width);
  1852  000862  061C               	decf	sprintf@width,f,c
  1853  000864  A0D8               	btfss	status,0,c
  1854  000866  061D               	decf	sprintf@width+1,f,c
  1855  000868  D7F0               	goto	l1815
  1856  00086A                     l1823:
  1857                           
  1858                           ;doprnt.c: 1422: {
  1859                           ;doprnt.c: 1424: if(width
  1860                           ;doprnt.c: 1428: )
  1861  00086A  501C               	movf	sprintf@width,w,c
  1862  00086C  101D               	iorwf	sprintf@width+1,w,c
  1863  00086E  B4D8               	btfsc	status,2,c
  1864  000870  D00F               	goto	l1831
  1865  000872                     l1825:
  1866                           
  1867                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1868  000872  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1869  000876  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1870  00087A  0E20               	movlw	32
  1871  00087C  6EDF               	movwf	indf2,c
  1872  00087E  4A0D               	infsnz	sprintf@sp,f,c
  1873  000880  2A0E               	incf	sprintf@sp+1,f,c
  1874                           
  1875                           ;doprnt.c: 1431: while(--width);
  1876  000882  061C               	decf	sprintf@width,f,c
  1877  000884  A0D8               	btfss	status,0,c
  1878  000886  061D               	decf	sprintf@width+1,f,c
  1879  000888  501C               	movf	sprintf@width,w,c
  1880  00088A  101D               	iorwf	sprintf@width+1,w,c
  1881  00088C  A4D8               	btfss	status,2,c
  1882  00088E  D7F1               	goto	l1825
  1883  000890                     l1831:
  1884                           
  1885                           ;doprnt.c: 1438: if(flag & 0x03)
  1886  000890  C019  F013         	movff	sprintf@flag,??_sprintf
  1887  000894  0E03               	movlw	3
  1888  000896  1613               	andwf	??_sprintf,f,c
  1889  000898  B4D8               	btfsc	status,2,c
  1890  00089A  D030               	goto	l1843
  1891                           
  1892                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1893  00089C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1894  0008A0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1895  0008A4  0E2D               	movlw	45
  1896  0008A6  6EDF               	movwf	indf2,c
  1897  0008A8  D027               	goto	l1841
  1898  0008AA                     l1837:
  1899                           
  1900                           ;doprnt.c: 1478: {
  1901                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1902  0008AA  501E               	movf	sprintf@prec,w,c
  1903  0008AC  0D02               	mullw	2
  1904  0008AE  0E01               	movlw	low _dpowers
  1905  0008B0  24F3               	addwf	prodl,w,c
  1906  0008B2  6EF6               	movwf	tblptrl,c
  1907  0008B4  0E06               	movlw	high _dpowers
  1908  0008B6  20F4               	addwfc	prodh,w,c
  1909  0008B8  6EF7               	movwf	tblptrh,c
  1910  0008BA                     	if	0	;There are less than 3 active tblptr bytes
  1911  0008BA                     	endif
  1912  0008BA  0009               	tblrd		*+
  1913  0008BC  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1914  0008C0  000A               	tblrd		*-
  1915  0008C2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1916  0008C6  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1917  0008CA  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1918  0008CE  ECD3  F006         	call	___lwdiv	;wreg free
  1919  0008D2  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1920  0008D6  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1921  0008DA  0E00               	movlw	0
  1922  0008DC  6E0B               	movwf	___lwmod@divisor+1,c
  1923  0008DE  0E0A               	movlw	10
  1924  0008E0  6E0A               	movwf	___lwmod@divisor,c
  1925  0008E2  EC25  F007         	call	___lwmod	;wreg free
  1926  0008E6  5008               	movf	?___lwmod,w,c
  1927  0008E8  0F30               	addlw	48
  1928  0008EA  6E1F               	movwf	sprintf@c,c
  1929                           
  1930                           ;doprnt.c: 1523: }
  1931                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1932  0008EC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1933  0008F0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1934  0008F4  C01F  FFDF         	movff	sprintf@c,indf2
  1935  0008F8                     l1841:
  1936  0008F8  4A0D               	infsnz	sprintf@sp,f,c
  1937  0008FA  2A0E               	incf	sprintf@sp+1,f,c
  1938  0008FC                     l1843:
  1939  0008FC  061E               	decf	sprintf@prec,f,c
  1940  0008FE  281E               	incf	sprintf@prec,w,c
  1941  000900  A4D8               	btfss	status,2,c
  1942  000902  D7D3               	goto	l1837
  1943  000904                     l1845:
  1944  000904  C00F  FFF6         	movff	sprintf@f,tblptrl
  1945  000908  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1946  00090C  4A0F               	infsnz	sprintf@f,f,c
  1947  00090E  2A10               	incf	sprintf@f+1,f,c
  1948  000910                     	if	0	;tblptru may be non-zero
  1949  000910                     	endif
  1950  000910                     	if	0	;tblptru may be non-zero
  1951  000910                     	endif
  1952  000910  0008               	tblrd		*
  1953  000912  CFF5 F01F          	movff	tablat,sprintf@c
  1954  000916  501F               	movf	sprintf@c,w,c
  1955  000918  A4D8               	btfss	status,2,c
  1956  00091A  D684               	goto	l1707
  1957  00091C                     l1847:
  1958                           
  1959                           ;doprnt.c: 1538: *sp = 0;
  1960  00091C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1961  000920  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1962  000924  0E00               	movlw	0
  1963  000926  6EDF               	movwf	indf2,c
  1964  000928  0012               	return	
  1965  00092A                     __end_of_sprintf:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           prodh	equ	0xFF4
  1972                           prodl	equ	0xFF3
  1973                           postinc0	equ	0xFEE
  1974                           wreg	equ	0xFE8
  1975                           indf2	equ	0xFDF
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _isdigit *****************
  1983 ;; Defined at:
  1984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  c               1    wreg     unsigned char 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  c               1    2[COMRAM] unsigned char 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;		None               void
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1998 ;;      Params:         0       0       0       0       0       0       0
  1999 ;;      Locals:         2       0       0       0       0       0       0
  2000 ;;      Temps:          1       0       0       0       0       0       0
  2001 ;;      Totals:         3       0       0       0       0       0       0
  2002 ;;Total ram usage:        3 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; This function calls:
  2005 ;;		Nothing
  2006 ;; This function is called by:
  2007 ;;		_sprintf
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text14
  2012  001014                     __ptext14:
  2013                           	opt stack 0
  2014  001014                     _isdigit:
  2015                           	opt stack 29
  2016                           
  2017                           ;incstack = 0
  2018                           ;isdigit@c stored from wreg
  2019  001014  6E03               	movwf	isdigit@c,c
  2020  001016  0E00               	movlw	0
  2021  001018  6E02               	movwf	_isdigit$926,c
  2022  00101A  0E3A               	movlw	58
  2023  00101C  6003               	cpfslt	isdigit@c,c
  2024  00101E  D005               	goto	l1545
  2025  001020  0E2F               	movlw	47
  2026  001022  6403               	cpfsgt	isdigit@c,c
  2027  001024  D002               	goto	l1545
  2028  001026  0E01               	movlw	1
  2029  001028  6E02               	movwf	_isdigit$926,c
  2030  00102A                     l1545:
  2031  00102A  C002  F001         	movff	_isdigit$926,??_isdigit
  2032  00102E  3001               	rrcf	??_isdigit,w,c
  2033  001030  0012               	return	
  2034  001032                     __end_of_isdigit:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           prodh	equ	0xFF4
  2041                           prodl	equ	0xFF3
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           indf2	equ	0xFDF
  2045                           postinc2	equ	0xFDE
  2046                           postdec2	equ	0xFDD
  2047                           fsr2h	equ	0xFDA
  2048                           fsr2l	equ	0xFD9
  2049                           status	equ	0xFD8
  2050                           
  2051 ;; *************** function ___wmul *****************
  2052 ;; Defined at:
  2053 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;  multiplier      2    0[COMRAM] unsigned int 
  2056 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  product         2    4[COMRAM] unsigned int 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  2    0[COMRAM] unsigned int 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0, prodl, prodh
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2068 ;;      Params:         4       0       0       0       0       0       0
  2069 ;;      Locals:         2       0       0       0       0       0       0
  2070 ;;      Temps:          0       0       0       0       0       0       0
  2071 ;;      Totals:         6       0       0       0       0       0       0
  2072 ;;Total ram usage:        6 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_sprintf
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text15
  2082  000FAA                     __ptext15:
  2083                           	opt stack 0
  2084  000FAA                     ___wmul:
  2085                           	opt stack 29
  2086                           
  2087                           ;incstack = 0
  2088  000FAA  5001               	movf	___wmul@multiplier,w,c
  2089  000FAC  0203               	mulwf	___wmul@multiplicand,c
  2090  000FAE  CFF3 F005          	movff	prodl,___wmul@product
  2091  000FB2  CFF4 F006          	movff	prodh,___wmul@product+1
  2092  000FB6  5001               	movf	___wmul@multiplier,w,c
  2093  000FB8  0204               	mulwf	___wmul@multiplicand+1,c
  2094  000FBA  50F3               	movf	prodl,w,c
  2095  000FBC  2606               	addwf	___wmul@product+1,f,c
  2096  000FBE  5002               	movf	___wmul@multiplier+1,w,c
  2097  000FC0  0203               	mulwf	___wmul@multiplicand,c
  2098  000FC2  50F3               	movf	prodl,w,c
  2099  000FC4  2606               	addwf	___wmul@product+1,f,c
  2100  000FC6  C005  F001         	movff	___wmul@product,?___wmul
  2101  000FCA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2102  000FCE  0012               	return	
  2103  000FD0                     __end_of___wmul:
  2104                           	opt stack 0
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           prodh	equ	0xFF4
  2110                           prodl	equ	0xFF3
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           indf2	equ	0xFDF
  2114                           postinc2	equ	0xFDE
  2115                           postdec2	equ	0xFDD
  2116                           fsr2h	equ	0xFDA
  2117                           fsr2l	equ	0xFD9
  2118                           status	equ	0xFD8
  2119                           
  2120 ;; *************** function ___lwmod *****************
  2121 ;; Defined at:
  2122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  dividend        2    7[COMRAM] unsigned int 
  2125 ;;  divisor         2    9[COMRAM] unsigned int 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  counter         1   11[COMRAM] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  2    7[COMRAM] unsigned int 
  2130 ;; Registers used:
  2131 ;;		wreg, status,2, status,0
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2137 ;;      Params:         4       0       0       0       0       0       0
  2138 ;;      Locals:         1       0       0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0
  2140 ;;      Totals:         5       0       0       0       0       0       0
  2141 ;;Total ram usage:        5 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_sprintf
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text16
  2151  000E4A                     __ptext16:
  2152                           	opt stack 0
  2153  000E4A                     ___lwmod:
  2154                           	opt stack 29
  2155                           
  2156                           ;incstack = 0
  2157  000E4A  500A               	movf	___lwmod@divisor,w,c
  2158  000E4C  100B               	iorwf	___lwmod@divisor+1,w,c
  2159  000E4E  B4D8               	btfsc	status,2,c
  2160  000E50  D018               	goto	l692
  2161  000E52  0E01               	movlw	1
  2162  000E54  6E0C               	movwf	___lwmod@counter,c
  2163  000E56  D004               	goto	l1619
  2164  000E58                     l1617:
  2165  000E58  90D8               	bcf	status,0,c
  2166  000E5A  360A               	rlcf	___lwmod@divisor,f,c
  2167  000E5C  360B               	rlcf	___lwmod@divisor+1,f,c
  2168  000E5E  2A0C               	incf	___lwmod@counter,f,c
  2169  000E60                     l1619:
  2170  000E60  AE0B               	btfss	___lwmod@divisor+1,7,c
  2171  000E62  D7FA               	goto	l1617
  2172  000E64                     l1621:
  2173  000E64  500A               	movf	___lwmod@divisor,w,c
  2174  000E66  5C08               	subwf	___lwmod@dividend,w,c
  2175  000E68  500B               	movf	___lwmod@divisor+1,w,c
  2176  000E6A  5809               	subwfb	___lwmod@dividend+1,w,c
  2177  000E6C  A0D8               	btfss	status,0,c
  2178  000E6E  D004               	goto	l1625
  2179  000E70  500A               	movf	___lwmod@divisor,w,c
  2180  000E72  5E08               	subwf	___lwmod@dividend,f,c
  2181  000E74  500B               	movf	___lwmod@divisor+1,w,c
  2182  000E76  5A09               	subwfb	___lwmod@dividend+1,f,c
  2183  000E78                     l1625:
  2184  000E78  90D8               	bcf	status,0,c
  2185  000E7A  320B               	rrcf	___lwmod@divisor+1,f,c
  2186  000E7C  320A               	rrcf	___lwmod@divisor,f,c
  2187  000E7E  2E0C               	decfsz	___lwmod@counter,f,c
  2188  000E80  D7F1               	goto	l1621
  2189  000E82                     l692:
  2190  000E82  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2191  000E86  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2192  000E8A  0012               	return		;funcret
  2193  000E8C                     __end_of___lwmod:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           prodh	equ	0xFF4
  2200                           prodl	equ	0xFF3
  2201                           postinc0	equ	0xFEE
  2202                           wreg	equ	0xFE8
  2203                           indf2	equ	0xFDF
  2204                           postinc2	equ	0xFDE
  2205                           postdec2	equ	0xFDD
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function ___lwdiv *****************
  2211 ;; Defined at:
  2212 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  dividend        2    0[COMRAM] unsigned int 
  2215 ;;  divisor         2    2[COMRAM] unsigned int 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  quotient        2    4[COMRAM] unsigned int 
  2218 ;;  counter         1    6[COMRAM] unsigned char 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  2    0[COMRAM] unsigned int 
  2221 ;; Registers used:
  2222 ;;		wreg, status,2, status,0
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2228 ;;      Params:         4       0       0       0       0       0       0
  2229 ;;      Locals:         3       0       0       0       0       0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0
  2231 ;;      Totals:         7       0       0       0       0       0       0
  2232 ;;Total ram usage:        7 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; This function calls:
  2235 ;;		Nothing
  2236 ;; This function is called by:
  2237 ;;		_sprintf
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text17
  2242  000DA6                     __ptext17:
  2243                           	opt stack 0
  2244  000DA6                     ___lwdiv:
  2245                           	opt stack 29
  2246                           
  2247                           ;incstack = 0
  2248  000DA6  0E00               	movlw	0
  2249  000DA8  6E06               	movwf	___lwdiv@quotient+1,c
  2250  000DAA  0E00               	movlw	0
  2251  000DAC  6E05               	movwf	___lwdiv@quotient,c
  2252  000DAE  5003               	movf	___lwdiv@divisor,w,c
  2253  000DB0  1004               	iorwf	___lwdiv@divisor+1,w,c
  2254  000DB2  B4D8               	btfsc	status,2,c
  2255  000DB4  D01C               	goto	l682
  2256  000DB6  0E01               	movlw	1
  2257  000DB8  6E07               	movwf	___lwdiv@counter,c
  2258  000DBA  D004               	goto	l1599
  2259  000DBC                     l1597:
  2260  000DBC  90D8               	bcf	status,0,c
  2261  000DBE  3603               	rlcf	___lwdiv@divisor,f,c
  2262  000DC0  3604               	rlcf	___lwdiv@divisor+1,f,c
  2263  000DC2  2A07               	incf	___lwdiv@counter,f,c
  2264  000DC4                     l1599:
  2265  000DC4  AE04               	btfss	___lwdiv@divisor+1,7,c
  2266  000DC6  D7FA               	goto	l1597
  2267  000DC8                     l1601:
  2268  000DC8  90D8               	bcf	status,0,c
  2269  000DCA  3605               	rlcf	___lwdiv@quotient,f,c
  2270  000DCC  3606               	rlcf	___lwdiv@quotient+1,f,c
  2271  000DCE  5003               	movf	___lwdiv@divisor,w,c
  2272  000DD0  5C01               	subwf	___lwdiv@dividend,w,c
  2273  000DD2  5004               	movf	___lwdiv@divisor+1,w,c
  2274  000DD4  5802               	subwfb	___lwdiv@dividend+1,w,c
  2275  000DD6  A0D8               	btfss	status,0,c
  2276  000DD8  D005               	goto	l1609
  2277  000DDA  5003               	movf	___lwdiv@divisor,w,c
  2278  000DDC  5E01               	subwf	___lwdiv@dividend,f,c
  2279  000DDE  5004               	movf	___lwdiv@divisor+1,w,c
  2280  000DE0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2281  000DE2  8005               	bsf	___lwdiv@quotient,0,c
  2282  000DE4                     l1609:
  2283  000DE4  90D8               	bcf	status,0,c
  2284  000DE6  3204               	rrcf	___lwdiv@divisor+1,f,c
  2285  000DE8  3203               	rrcf	___lwdiv@divisor,f,c
  2286  000DEA  2E07               	decfsz	___lwdiv@counter,f,c
  2287  000DEC  D7ED               	goto	l1601
  2288  000DEE                     l682:
  2289  000DEE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2290  000DF2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2291  000DF6  0012               	return		;funcret
  2292  000DF8                     __end_of___lwdiv:
  2293                           	opt stack 0
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           indf2	equ	0xFDF
  2303                           postinc2	equ	0xFDE
  2304                           postdec2	equ	0xFDD
  2305                           fsr2h	equ	0xFDA
  2306                           fsr2l	equ	0xFD9
  2307                           status	equ	0xFD8
  2308                           
  2309 ;; *************** function _lcdPuts *****************
  2310 ;; Defined at:
  2311 ;;		line 44 in file "myLCD.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  str             2    5[COMRAM] PTR unsigned char 
  2314 ;;		 -> buff(86), STR_1(7), 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2326 ;;      Params:         2       0       0       0       0       0       0
  2327 ;;      Locals:         0       0       0       0       0       0       0
  2328 ;;      Temps:          0       0       0       0       0       0       0
  2329 ;;      Totals:         2       0       0       0       0       0       0
  2330 ;;Total ram usage:        2 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    3
  2333 ;; This function calls:
  2334 ;;		_lcdPutc
  2335 ;; This function is called by:
  2336 ;;		_main
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text18
  2341  000DF8                     __ptext18:
  2342                           	opt stack 0
  2343  000DF8                     _lcdPuts:
  2344                           	opt stack 27
  2345                           
  2346                           ;myLCD.c: 46: while(*str)
  2347                           
  2348                           ;incstack = 0
  2349  000DF8  D014               	goto	l1703
  2350  000DFA                     l1699:
  2351                           
  2352                           ;myLCD.c: 47: {
  2353                           ;myLCD.c: 48: lcdPutc(*str);
  2354  000DFA  C006  FFF6         	movff	lcdPuts@str,tblptrl
  2355  000DFE  C007  FFF7         	movff	lcdPuts@str+1,tblptrh
  2356  000E02  6AF8               	clrf	tblptru,c
  2357  000E04  0E05               	movlw	(high __ramtop+-1)
  2358  000E06  64F7               	cpfsgt	tblptrh,c
  2359  000E08  D003               	bra	u1147
  2360  000E0A  0008               	tblrd		*
  2361  000E0C  50F5               	movf	tablat,w,c
  2362  000E0E  D005               	bra	u1140
  2363  000E10                     u1147:
  2364  000E10  CFF6 FFE9          	movff	tblptrl,fsr0l
  2365  000E14  CFF7 FFEA          	movff	tblptrh,fsr0h
  2366  000E18  50EF               	movf	indf0,w,c
  2367  000E1A                     u1140:
  2368  000E1A  EC82  F008         	call	_lcdPutc
  2369                           
  2370                           ;myLCD.c: 49: str++;
  2371  000E1E  4A06               	infsnz	lcdPuts@str,f,c
  2372  000E20  2A07               	incf	lcdPuts@str+1,f,c
  2373  000E22                     l1703:
  2374  000E22  C006  FFF6         	movff	lcdPuts@str,tblptrl
  2375  000E26  C007  FFF7         	movff	lcdPuts@str+1,tblptrh
  2376  000E2A  6AF8               	clrf	tblptru,c
  2377  000E2C  0E05               	movlw	(high __ramtop+-1)
  2378  000E2E  64F7               	cpfsgt	tblptrh,c
  2379  000E30  D003               	bra	u1157
  2380  000E32  0008               	tblrd		*
  2381  000E34  50F5               	movf	tablat,w,c
  2382  000E36  D005               	bra	u1150
  2383  000E38                     u1157:
  2384  000E38  CFF6 FFE9          	movff	tblptrl,fsr0l
  2385  000E3C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2386  000E40  50EF               	movf	indf0,w,c
  2387  000E42                     u1150:
  2388  000E42  0900               	iorlw	0
  2389  000E44  B4D8               	btfsc	status,2,c
  2390  000E46  0012               	return	
  2391  000E48  D7D8               	goto	l1699
  2392  000E4A                     __end_of_lcdPuts:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           indf0	equ	0xFEF
  2401                           postinc0	equ	0xFEE
  2402                           fsr0h	equ	0xFEA
  2403                           fsr0l	equ	0xFE9
  2404                           wreg	equ	0xFE8
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           fsr2h	equ	0xFDA
  2409                           fsr2l	equ	0xFD9
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _lcdPutc *****************
  2413 ;; Defined at:
  2414 ;;		line 36 in file "myLCD.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  chr             1    wreg     unsigned char 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  chr             1    4[COMRAM] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, status,2, status,0, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2428 ;;      Params:         0       0       0       0       0       0       0
  2429 ;;      Locals:         1       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0
  2431 ;;      Totals:         1       0       0       0       0       0       0
  2432 ;;Total ram usage:        1 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    2
  2435 ;; This function calls:
  2436 ;;		_lcdByte
  2437 ;; This function is called by:
  2438 ;;		_lcdPuts
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text19
  2443  001104                     __ptext19:
  2444                           	opt stack 0
  2445  001104                     _lcdPutc:
  2446                           	opt stack 27
  2447                           
  2448                           ;incstack = 0
  2449                           ;lcdPutc@chr stored from wreg
  2450  001104  6E05               	movwf	lcdPutc@chr,c
  2451                           
  2452                           ;myLCD.c: 38: LATDbits.LATD0 = 1;
  2453  001106  808C               	bsf	3980,0,c	;volatile
  2454                           
  2455                           ;myLCD.c: 39: LATDbits.LATD1 = 0;
  2456  001108  928C               	bcf	3980,1,c	;volatile
  2457                           
  2458                           ;myLCD.c: 40: lcdByte(chr);
  2459  00110A  5005               	movf	lcdPutc@chr,w,c
  2460  00110C  EC31  F008         	call	_lcdByte
  2461  001110  0012               	return		;funcret
  2462  001112                     __end_of_lcdPutc:
  2463                           	opt stack 0
  2464                           tblptru	equ	0xFF8
  2465                           tblptrh	equ	0xFF7
  2466                           tblptrl	equ	0xFF6
  2467                           tablat	equ	0xFF5
  2468                           prodh	equ	0xFF4
  2469                           prodl	equ	0xFF3
  2470                           indf0	equ	0xFEF
  2471                           postinc0	equ	0xFEE
  2472                           fsr0h	equ	0xFEA
  2473                           fsr0l	equ	0xFE9
  2474                           wreg	equ	0xFE8
  2475                           indf2	equ	0xFDF
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _lcdInit *****************
  2483 ;; Defined at:
  2484 ;;		line 63 in file "myLCD.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2498 ;;      Params:         0       0       0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0
  2500 ;;      Temps:          1       0       0       0       0       0       0
  2501 ;;      Totals:         1       0       0       0       0       0       0
  2502 ;;Total ram usage:        1 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    3
  2505 ;; This function calls:
  2506 ;;		_lcdCmd
  2507 ;;		_lcdNible
  2508 ;; This function is called by:
  2509 ;;		_main
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           	psect	text20
  2514  000C80                     __ptext20:
  2515                           	opt stack 0
  2516  000C80                     _lcdInit:
  2517                           	opt stack 27
  2518                           
  2519                           ;myLCD.c: 66: TRISDbits.TRISD3 = 0;
  2520                           
  2521                           ;incstack = 0
  2522  000C80  9695               	bcf	3989,3,c	;volatile
  2523                           
  2524                           ;myLCD.c: 67: TRISDbits.TRISD4 = 0;
  2525  000C82  9895               	bcf	3989,4,c	;volatile
  2526                           
  2527                           ;myLCD.c: 68: TRISDbits.TRISD5 = 0;
  2528  000C84  9A95               	bcf	3989,5,c	;volatile
  2529                           
  2530                           ;myLCD.c: 69: TRISDbits.TRISD6 = 0;
  2531  000C86  9C95               	bcf	3989,6,c	;volatile
  2532                           
  2533                           ;myLCD.c: 71: TRISDbits.TRISD0 = 0;
  2534  000C88  9095               	bcf	3989,0,c	;volatile
  2535                           
  2536                           ;myLCD.c: 72: TRISDbits.TRISD1 = 0;
  2537  000C8A  9295               	bcf	3989,1,c	;volatile
  2538                           
  2539                           ;myLCD.c: 73: TRISDbits.TRISD2 = 0;
  2540  000C8C  9495               	bcf	3989,2,c	;volatile
  2541                           
  2542                           ;myLCD.c: 76: _delay((unsigned long)((20)*(11059200/4000.0)));
  2543  000C8E  0E48               	movlw	72
  2544  000C90  6E06               	movwf	??_lcdInit& (0+255),c
  2545  000C92  0ECF               	movlw	207
  2546  000C94                     u1617:
  2547  000C94  2EE8               	decfsz	wreg,f,c
  2548  000C96  D7FE               	bra	u1617
  2549  000C98  2E06               	decfsz	??_lcdInit& (0+255),f,c
  2550  000C9A  D7FC               	bra	u1617
  2551  000C9C  F000               	nop	
  2552                           
  2553                           ;myLCD.c: 77: lcdNible(0x30);
  2554  000C9E  0E30               	movlw	48
  2555  000CA0  EC8B  F006         	call	_lcdNible
  2556                           
  2557                           ;myLCD.c: 79: _delay((unsigned long)((20)*(11059200/4000.0)));
  2558  000CA4  0E48               	movlw	72
  2559  000CA6  6E06               	movwf	??_lcdInit& (0+255),c
  2560  000CA8  0ECF               	movlw	207
  2561  000CAA                     u1627:
  2562  000CAA  2EE8               	decfsz	wreg,f,c
  2563  000CAC  D7FE               	bra	u1627
  2564  000CAE  2E06               	decfsz	??_lcdInit& (0+255),f,c
  2565  000CB0  D7FC               	bra	u1627
  2566  000CB2  F000               	nop	
  2567                           
  2568                           ;myLCD.c: 80: lcdNible(0x30);
  2569  000CB4  0E30               	movlw	48
  2570  000CB6  EC8B  F006         	call	_lcdNible
  2571                           
  2572                           ;myLCD.c: 82: _delay((unsigned long)((20)*(11059200/4000.0)));
  2573  000CBA  0E48               	movlw	72
  2574  000CBC  6E06               	movwf	??_lcdInit& (0+255),c
  2575  000CBE  0ECF               	movlw	207
  2576  000CC0                     u1637:
  2577  000CC0  2EE8               	decfsz	wreg,f,c
  2578  000CC2  D7FE               	bra	u1637
  2579  000CC4  2E06               	decfsz	??_lcdInit& (0+255),f,c
  2580  000CC6  D7FC               	bra	u1637
  2581  000CC8  F000               	nop	
  2582                           
  2583                           ;myLCD.c: 83: lcdNible(0x30);
  2584  000CCA  0E30               	movlw	48
  2585  000CCC  EC8B  F006         	call	_lcdNible
  2586                           
  2587                           ;myLCD.c: 85: _delay((unsigned long)((20)*(11059200/4000.0)));
  2588  000CD0  0E48               	movlw	72
  2589  000CD2  6E06               	movwf	??_lcdInit& (0+255),c
  2590  000CD4  0ECF               	movlw	207
  2591  000CD6                     u1647:
  2592  000CD6  2EE8               	decfsz	wreg,f,c
  2593  000CD8  D7FE               	bra	u1647
  2594  000CDA  2E06               	decfsz	??_lcdInit& (0+255),f,c
  2595  000CDC  D7FC               	bra	u1647
  2596  000CDE  F000               	nop	
  2597                           
  2598                           ;myLCD.c: 86: lcdNible(0x20);
  2599  000CE0  0E20               	movlw	32
  2600  000CE2  EC8B  F006         	call	_lcdNible
  2601                           
  2602                           ;myLCD.c: 88: lcdCmd(0x28);
  2603  000CE6  0E28               	movlw	40
  2604  000CE8  EC89  F008         	call	_lcdCmd
  2605                           
  2606                           ;myLCD.c: 89: lcdCmd(0x0C);
  2607  000CEC  0E0C               	movlw	12
  2608  000CEE  EC89  F008         	call	_lcdCmd
  2609                           
  2610                           ;myLCD.c: 90: lcdCmd(0x06);
  2611  000CF2  0E06               	movlw	6
  2612  000CF4  EC89  F008         	call	_lcdCmd
  2613                           
  2614                           ;myLCD.c: 91: lcdCmd(0x01);
  2615  000CF8  0E01               	movlw	1
  2616  000CFA  EC89  F008         	call	_lcdCmd
  2617                           
  2618                           ;myLCD.c: 92: lcdCmd(0x02);
  2619  000CFE  0E02               	movlw	2
  2620  000D00  EC89  F008         	call	_lcdCmd
  2621                           
  2622                           ;myLCD.c: 94: _delay((unsigned long)((50)*(11059200/4000.0)));
  2623  000D04  0EB4               	movlw	180
  2624  000D06  6E06               	movwf	??_lcdInit& (0+255),c
  2625  000D08  0E87               	movlw	135
  2626  000D0A                     u1657:
  2627  000D0A  2EE8               	decfsz	wreg,f,c
  2628  000D0C  D7FE               	bra	u1657
  2629  000D0E  2E06               	decfsz	??_lcdInit& (0+255),f,c
  2630  000D10  D7FC               	bra	u1657
  2631  000D12  F000               	nop	
  2632  000D14  0012               	return		;funcret
  2633  000D16                     __end_of_lcdInit:
  2634                           	opt stack 0
  2635                           tblptru	equ	0xFF8
  2636                           tblptrh	equ	0xFF7
  2637                           tblptrl	equ	0xFF6
  2638                           tablat	equ	0xFF5
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           indf0	equ	0xFEF
  2642                           postinc0	equ	0xFEE
  2643                           fsr0h	equ	0xFEA
  2644                           fsr0l	equ	0xFE9
  2645                           wreg	equ	0xFE8
  2646                           indf2	equ	0xFDF
  2647                           postinc2	equ	0xFDE
  2648                           postdec2	equ	0xFDD
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _lcdGotoxy *****************
  2654 ;; Defined at:
  2655 ;;		line 54 in file "myLCD.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  col             1    wreg     unsigned char 
  2658 ;;  row             1    5[COMRAM] unsigned char 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  col             1    6[COMRAM] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2670 ;;      Params:         1       0       0       0       0       0       0
  2671 ;;      Locals:         1       0       0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0
  2673 ;;      Totals:         2       0       0       0       0       0       0
  2674 ;;Total ram usage:        2 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    3
  2677 ;; This function calls:
  2678 ;;		_lcdCmd
  2679 ;; This function is called by:
  2680 ;;		_main
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text21
  2685  000E8C                     __ptext21:
  2686                           	opt stack 0
  2687  000E8C                     _lcdGotoxy:
  2688                           	opt stack 27
  2689                           
  2690                           ;incstack = 0
  2691                           ;lcdGotoxy@col stored from wreg
  2692  000E8C  6E07               	movwf	lcdGotoxy@col,c
  2693                           
  2694                           ;myLCD.c: 56: if(row == 1) lcdCmd(0x80 + col);
  2695  000E8E  0406               	decf	lcdGotoxy@row,w,c
  2696  000E90  A4D8               	btfss	status,2,c
  2697  000E92  D004               	goto	l1855
  2698  000E94  5007               	movf	lcdGotoxy@col,w,c
  2699  000E96  0F80               	addlw	128
  2700  000E98  EC89  F008         	call	_lcdCmd
  2701  000E9C                     l1855:
  2702                           
  2703                           ;myLCD.c: 57: if(row == 2) lcdCmd(0xC0 + col);
  2704  000E9C  0E02               	movlw	2
  2705  000E9E  1806               	xorwf	lcdGotoxy@row,w,c
  2706  000EA0  A4D8               	btfss	status,2,c
  2707  000EA2  D004               	goto	l1859
  2708  000EA4  5007               	movf	lcdGotoxy@col,w,c
  2709  000EA6  0FC0               	addlw	192
  2710  000EA8  EC89  F008         	call	_lcdCmd
  2711  000EAC                     l1859:
  2712                           
  2713                           ;myLCD.c: 58: if(row == 3) lcdCmd(0x94 + col);
  2714  000EAC  0E03               	movlw	3
  2715  000EAE  1806               	xorwf	lcdGotoxy@row,w,c
  2716  000EB0  A4D8               	btfss	status,2,c
  2717  000EB2  D004               	goto	l1863
  2718  000EB4  5007               	movf	lcdGotoxy@col,w,c
  2719  000EB6  0F94               	addlw	148
  2720  000EB8  EC89  F008         	call	_lcdCmd
  2721  000EBC                     l1863:
  2722                           
  2723                           ;myLCD.c: 59: if(row == 4) lcdCmd(0xD4 + col);
  2724  000EBC  0E04               	movlw	4
  2725  000EBE  1806               	xorwf	lcdGotoxy@row,w,c
  2726  000EC0  A4D8               	btfss	status,2,c
  2727  000EC2  0012               	return	
  2728  000EC4  5007               	movf	lcdGotoxy@col,w,c
  2729  000EC6  0FD4               	addlw	212
  2730  000EC8  EC89  F008         	call	_lcdCmd
  2731  000ECC  0012               	return	
  2732  000ECE                     __end_of_lcdGotoxy:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           indf0	equ	0xFEF
  2741                           postinc0	equ	0xFEE
  2742                           fsr0h	equ	0xFEA
  2743                           fsr0l	equ	0xFE9
  2744                           wreg	equ	0xFE8
  2745                           indf2	equ	0xFDF
  2746                           postinc2	equ	0xFDE
  2747                           postdec2	equ	0xFDD
  2748                           fsr2h	equ	0xFDA
  2749                           fsr2l	equ	0xFD9
  2750                           status	equ	0xFD8
  2751                           
  2752 ;; *************** function _lcdCmd *****************
  2753 ;; Defined at:
  2754 ;;		line 28 in file "myLCD.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;  cmd             1    wreg     unsigned char 
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;  cmd             1    4[COMRAM] unsigned char 
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      void 
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2768 ;;      Params:         0       0       0       0       0       0       0
  2769 ;;      Locals:         1       0       0       0       0       0       0
  2770 ;;      Temps:          0       0       0       0       0       0       0
  2771 ;;      Totals:         1       0       0       0       0       0       0
  2772 ;;Total ram usage:        1 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    2
  2775 ;; This function calls:
  2776 ;;		_lcdByte
  2777 ;; This function is called by:
  2778 ;;		_lcdGotoxy
  2779 ;;		_lcdInit
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text22
  2784  001112                     __ptext22:
  2785                           	opt stack 0
  2786  001112                     _lcdCmd:
  2787                           	opt stack 27
  2788                           
  2789                           ;incstack = 0
  2790                           ;lcdCmd@cmd stored from wreg
  2791  001112  6E05               	movwf	lcdCmd@cmd,c
  2792                           
  2793                           ;myLCD.c: 30: LATDbits.LATD0 = 0;
  2794  001114  908C               	bcf	3980,0,c	;volatile
  2795                           
  2796                           ;myLCD.c: 31: LATDbits.LATD1 = 0;
  2797  001116  928C               	bcf	3980,1,c	;volatile
  2798                           
  2799                           ;myLCD.c: 32: lcdByte(cmd);
  2800  001118  5005               	movf	lcdCmd@cmd,w,c
  2801  00111A  EC31  F008         	call	_lcdByte
  2802  00111E  0012               	return		;funcret
  2803  001120                     __end_of_lcdCmd:
  2804                           	opt stack 0
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           prodh	equ	0xFF4
  2810                           prodl	equ	0xFF3
  2811                           indf0	equ	0xFEF
  2812                           postinc0	equ	0xFEE
  2813                           fsr0h	equ	0xFEA
  2814                           fsr0l	equ	0xFE9
  2815                           wreg	equ	0xFE8
  2816                           indf2	equ	0xFDF
  2817                           postinc2	equ	0xFDE
  2818                           postdec2	equ	0xFDD
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _lcdByte *****************
  2824 ;; Defined at:
  2825 ;;		line 20 in file "myLCD.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  byte            1    wreg     unsigned char 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  byte            1    3[COMRAM] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2839 ;;      Params:         0       0       0       0       0       0       0
  2840 ;;      Locals:         1       0       0       0       0       0       0
  2841 ;;      Temps:          0       0       0       0       0       0       0
  2842 ;;      Totals:         1       0       0       0       0       0       0
  2843 ;;Total ram usage:        1 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    1
  2846 ;; This function calls:
  2847 ;;		_lcdNible
  2848 ;; This function is called by:
  2849 ;;		_lcdCmd
  2850 ;;		_lcdPutc
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text23
  2855  001062                     __ptext23:
  2856                           	opt stack 0
  2857  001062                     _lcdByte:
  2858                           	opt stack 27
  2859                           
  2860                           ;incstack = 0
  2861                           ;lcdByte@byte stored from wreg
  2862  001062  6E04               	movwf	lcdByte@byte,c
  2863                           
  2864                           ;myLCD.c: 22: lcdNible(byte);
  2865  001064  5004               	movf	lcdByte@byte,w,c
  2866  001066  EC8B  F006         	call	_lcdNible
  2867                           
  2868                           ;myLCD.c: 23: lcdNible(byte << 4);
  2869  00106A  3804               	swapf	lcdByte@byte,w,c
  2870  00106C  0BF0               	andlw	240
  2871  00106E  EC8B  F006         	call	_lcdNible
  2872                           
  2873                           ;myLCD.c: 24: _delay((unsigned long)((10)*(11059200/4000000.0)));
  2874  001072  0E09               	movlw	9
  2875  001074                     u1667:
  2876  001074  2EE8               	decfsz	wreg,f,c
  2877  001076  D7FE               	bra	u1667
  2878  001078  0012               	return		;funcret
  2879  00107A                     __end_of_lcdByte:
  2880                           	opt stack 0
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           prodh	equ	0xFF4
  2886                           prodl	equ	0xFF3
  2887                           indf0	equ	0xFEF
  2888                           postinc0	equ	0xFEE
  2889                           fsr0h	equ	0xFEA
  2890                           fsr0l	equ	0xFE9
  2891                           wreg	equ	0xFE8
  2892                           indf2	equ	0xFDF
  2893                           postinc2	equ	0xFDE
  2894                           postdec2	equ	0xFDD
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _lcdNible *****************
  2900 ;; Defined at:
  2901 ;;		line 6 in file "myLCD.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  nible           1    wreg     unsigned char 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  nible           1    2[COMRAM] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, status,0
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2915 ;;      Params:         0       0       0       0       0       0       0
  2916 ;;      Locals:         1       0       0       0       0       0       0
  2917 ;;      Temps:          2       0       0       0       0       0       0
  2918 ;;      Totals:         3       0       0       0       0       0       0
  2919 ;;Total ram usage:        3 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_lcdByte
  2925 ;;		_lcdInit
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text24
  2930  000D16                     __ptext24:
  2931                           	opt stack 0
  2932  000D16                     _lcdNible:
  2933                           	opt stack 27
  2934                           
  2935                           ;incstack = 0
  2936                           ;lcdNible@nible stored from wreg
  2937  000D16  6E03               	movwf	lcdNible@nible,c
  2938                           
  2939                           ;myLCD.c: 8: LATDbits.LATD3 = (nible >> 4) & 0x01;
  2940  000D18  C003  F001         	movff	lcdNible@nible,??_lcdNible
  2941  000D1C  3A01               	swapf	??_lcdNible,f,c
  2942  000D1E  0E0F               	movlw	15
  2943  000D20  1601               	andwf	??_lcdNible,f,c
  2944  000D22  0E01               	movlw	1
  2945  000D24  1601               	andwf	??_lcdNible,f,c
  2946  000D26  4601               	rlncf	??_lcdNible,f,c
  2947  000D28  4601               	rlncf	??_lcdNible,f,c
  2948  000D2A  4601               	rlncf	??_lcdNible,f,c
  2949  000D2C  508C               	movf	3980,w,c	;volatile
  2950  000D2E  1801               	xorwf	??_lcdNible,w,c
  2951  000D30  0BF7               	andlw	-9
  2952  000D32  1801               	xorwf	??_lcdNible,w,c
  2953  000D34  6E8C               	movwf	3980,c	;volatile
  2954                           
  2955                           ;myLCD.c: 9: LATDbits.LATD4 = (nible >> 5) & 0x01;
  2956  000D36  C003  F001         	movff	lcdNible@nible,??_lcdNible
  2957  000D3A  0E05               	movlw	5
  2958  000D3C  6E02               	movwf	(??_lcdNible+1)& (0+255),c
  2959  000D3E                     u825:
  2960  000D3E  90D8               	bcf	status,0,c
  2961  000D40  3201               	rrcf	??_lcdNible,f,c
  2962  000D42  2E02               	decfsz	(??_lcdNible+1)& (0+255),f,c
  2963  000D44  D7FC               	goto	u825
  2964  000D46  0E01               	movlw	1
  2965  000D48  1601               	andwf	??_lcdNible,f,c
  2966  000D4A  3A01               	swapf	??_lcdNible,f,c
  2967  000D4C  508C               	movf	3980,w,c	;volatile
  2968  000D4E  1801               	xorwf	??_lcdNible,w,c
  2969  000D50  0BEF               	andlw	-17
  2970  000D52  1801               	xorwf	??_lcdNible,w,c
  2971  000D54  6E8C               	movwf	3980,c	;volatile
  2972                           
  2973                           ;myLCD.c: 10: LATDbits.LATD5 = (nible >> 6) & 0x01;
  2974  000D56  C003  F001         	movff	lcdNible@nible,??_lcdNible
  2975  000D5A  0E06               	movlw	6
  2976  000D5C  6E02               	movwf	(??_lcdNible+1)& (0+255),c
  2977  000D5E                     u835:
  2978  000D5E  90D8               	bcf	status,0,c
  2979  000D60  3201               	rrcf	??_lcdNible,f,c
  2980  000D62  2E02               	decfsz	(??_lcdNible+1)& (0+255),f,c
  2981  000D64  D7FC               	goto	u835
  2982  000D66  0E01               	movlw	1
  2983  000D68  1601               	andwf	??_lcdNible,f,c
  2984  000D6A  3A01               	swapf	??_lcdNible,f,c
  2985  000D6C  4601               	rlncf	??_lcdNible,f,c
  2986  000D6E  508C               	movf	3980,w,c	;volatile
  2987  000D70  1801               	xorwf	??_lcdNible,w,c
  2988  000D72  0BDF               	andlw	-33
  2989  000D74  1801               	xorwf	??_lcdNible,w,c
  2990  000D76  6E8C               	movwf	3980,c	;volatile
  2991                           
  2992                           ;myLCD.c: 11: LATDbits.LATD6 = (nible >> 7) & 0x01;
  2993  000D78  6A01               	clrf	??_lcdNible& (0+255),c
  2994  000D7A  AE03               	btfss	lcdNible@nible,7,c
  2995  000D7C  D001               	bra	u845
  2996  000D7E  2A01               	incf	??_lcdNible& (0+255),f,c
  2997  000D80                     u845:
  2998  000D80  0E01               	movlw	1
  2999  000D82  1601               	andwf	??_lcdNible,f,c
  3000  000D84  3A01               	swapf	??_lcdNible,f,c
  3001  000D86  4601               	rlncf	??_lcdNible,f,c
  3002  000D88  4601               	rlncf	??_lcdNible,f,c
  3003  000D8A  508C               	movf	3980,w,c	;volatile
  3004  000D8C  1801               	xorwf	??_lcdNible,w,c
  3005  000D8E  0BBF               	andlw	-65
  3006  000D90  1801               	xorwf	??_lcdNible,w,c
  3007  000D92  6E8C               	movwf	3980,c	;volatile
  3008                           
  3009                           ;myLCD.c: 13: LATDbits.LATD2 = 1;
  3010  000D94  848C               	bsf	3980,2,c	;volatile
  3011                           
  3012                           ;myLCD.c: 14: _delay((unsigned long)((10)*(11059200/4000000.0)));
  3013  000D96  0E09               	movlw	9
  3014  000D98                     u1677:
  3015  000D98  2EE8               	decfsz	wreg,f,c
  3016  000D9A  D7FE               	bra	u1677
  3017                           
  3018                           ;myLCD.c: 15: LATDbits.LATD2 = 0;
  3019  000D9C  948C               	bcf	3980,2,c	;volatile
  3020                           
  3021                           ;myLCD.c: 16: _delay((unsigned long)((50)*(11059200/4000000.0)));
  3022  000D9E  0E2E               	movlw	46
  3023  000DA0                     u1687:
  3024  000DA0  2EE8               	decfsz	wreg,f,c
  3025  000DA2  D7FE               	bra	u1687
  3026  000DA4  0012               	return		;funcret
  3027  000DA6                     __end_of_lcdNible:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           indf0	equ	0xFEF
  3036                           postinc0	equ	0xFEE
  3037                           fsr0h	equ	0xFEA
  3038                           fsr0l	equ	0xFE9
  3039                           wreg	equ	0xFE8
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _adcRead *****************
  3048 ;; Defined at:
  3049 ;;		line 66 in file "myADC.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  ch              1    wreg     unsigned char 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  ch              1   12[COMRAM] unsigned char 
  3054 ;;  adcResult       2   10[COMRAM] unsigned int 
  3055 ;;  adcResultLSB    2    8[COMRAM] unsigned int 
  3056 ;;  adcResultMSB    2    6[COMRAM] unsigned int 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  2    2[COMRAM] unsigned int 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3066 ;;      Params:         2       0       0       0       0       0       0
  3067 ;;      Locals:         7       0       0       0       0       0       0
  3068 ;;      Temps:          2       0       0       0       0       0       0
  3069 ;;      Totals:        11       0       0       0       0       0       0
  3070 ;;Total ram usage:       11 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    1
  3073 ;; This function calls:
  3074 ;;		_adcBusy
  3075 ;;		_adcSetChannel
  3076 ;;		_adcStart
  3077 ;;		_adcStop
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text25
  3084  000ECE                     __ptext25:
  3085                           	opt stack 0
  3086  000ECE                     _adcRead:
  3087                           	opt stack 29
  3088                           
  3089                           ;incstack = 0
  3090                           ;adcRead@ch stored from wreg
  3091  000ECE  6E0D               	movwf	adcRead@ch,c
  3092                           
  3093                           ;myADC.c: 68: unsigned int adcResultMSB, adcResultLSB, adcResult;
  3094                           ;myADC.c: 69: adcSetChannel(ch);
  3095  000ED0  500D               	movf	adcRead@ch,w,c
  3096  000ED2  EC49  F008         	call	_adcSetChannel
  3097                           
  3098                           ;myADC.c: 70: adcStart();
  3099  000ED6  ECBF  F008         	call	_adcStart	;wreg free
  3100  000EDA                     l1647:
  3101  000EDA  ECAB  F008         	call	_adcBusy	;wreg free
  3102  000EDE  0900               	iorlw	0
  3103  000EE0  A4D8               	btfss	status,2,c
  3104  000EE2  D7FB               	goto	l1647
  3105                           
  3106                           ;myADC.c: 73: adcResultMSB = ADRESH;
  3107  000EE4  CFC4 F007          	movff	4036,adcRead@adcResultMSB	;volatile
  3108  000EE8  6A08               	clrf	adcRead@adcResultMSB+1,c
  3109                           
  3110                           ;myADC.c: 74: adcResultLSB = ADRESL;
  3111  000EEA  CFC3 F009          	movff	4035,adcRead@adcResultLSB	;volatile
  3112  000EEE  6A0A               	clrf	adcRead@adcResultLSB+1,c
  3113                           
  3114                           ;myADC.c: 75: adcResult = (adcResultMSB << 8) + adcResultLSB;
  3115  000EF0  5007               	movf	adcRead@adcResultMSB,w,c
  3116  000EF2  6E06               	movwf	(??_adcRead+1)& (0+255),c
  3117  000EF4  6A05               	clrf	??_adcRead& (0+255),c
  3118  000EF6  5009               	movf	adcRead@adcResultLSB,w,c
  3119  000EF8  2405               	addwf	??_adcRead,w,c
  3120  000EFA  6E0B               	movwf	adcRead@adcResult,c
  3121  000EFC  500A               	movf	adcRead@adcResultLSB+1,w,c
  3122  000EFE  2006               	addwfc	??_adcRead+1,w,c
  3123  000F00  6E0C               	movwf	adcRead@adcResult+1,c
  3124                           
  3125                           ;myADC.c: 76: adcStop();
  3126  000F02  ECBC  F008         	call	_adcStop	;wreg free
  3127                           
  3128                           ;myADC.c: 77: return adcResult;
  3129  000F06  C00B  F003         	movff	adcRead@adcResult,?_adcRead
  3130  000F0A  C00C  F004         	movff	adcRead@adcResult+1,?_adcRead+1
  3131  000F0E  0012               	return	
  3132  000F10                     __end_of_adcRead:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           indf0	equ	0xFEF
  3141                           postinc0	equ	0xFEE
  3142                           fsr0h	equ	0xFEA
  3143                           fsr0l	equ	0xFE9
  3144                           wreg	equ	0xFE8
  3145                           indf2	equ	0xFDF
  3146                           postinc2	equ	0xFDE
  3147                           postdec2	equ	0xFDD
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _adcStop *****************
  3153 ;; Defined at:
  3154 ;;		line 56 in file "myADC.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		None
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3168 ;;      Params:         0       0       0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_adcRead
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text26
  3182  001178                     __ptext26:
  3183                           	opt stack 0
  3184  001178                     _adcStop:
  3185                           	opt stack 29
  3186                           
  3187                           ;myADC.c: 58: ADCON0bits.ADON = 0;
  3188                           
  3189                           ;incstack = 0
  3190  001178  90C2               	bcf	4034,0,c	;volatile
  3191                           
  3192                           ;myADC.c: 59: ADCON0bits.GO = 0;
  3193  00117A  92C2               	bcf	4034,1,c	;volatile
  3194  00117C  0012               	return		;funcret
  3195  00117E                     __end_of_adcStop:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           prodh	equ	0xFF4
  3202                           prodl	equ	0xFF3
  3203                           indf0	equ	0xFEF
  3204                           postinc0	equ	0xFEE
  3205                           fsr0h	equ	0xFEA
  3206                           fsr0l	equ	0xFE9
  3207                           wreg	equ	0xFE8
  3208                           indf2	equ	0xFDF
  3209                           postinc2	equ	0xFDE
  3210                           postdec2	equ	0xFDD
  3211                           fsr2h	equ	0xFDA
  3212                           fsr2l	equ	0xFD9
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function _adcStart *****************
  3216 ;; Defined at:
  3217 ;;		line 50 in file "myADC.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		None
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3231 ;;      Params:         0       0       0       0       0       0       0
  3232 ;;      Locals:         0       0       0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0
  3234 ;;      Totals:         0       0       0       0       0       0       0
  3235 ;;Total ram usage:        0 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_adcRead
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text27
  3245  00117E                     __ptext27:
  3246                           	opt stack 0
  3247  00117E                     _adcStart:
  3248                           	opt stack 29
  3249                           
  3250                           ;myADC.c: 52: ADCON0bits.ADON = 1;
  3251                           
  3252                           ;incstack = 0
  3253  00117E  80C2               	bsf	4034,0,c	;volatile
  3254                           
  3255                           ;myADC.c: 53: ADCON0bits.GO = 1;
  3256  001180  82C2               	bsf	4034,1,c	;volatile
  3257  001182  0012               	return		;funcret
  3258  001184                     __end_of_adcStart:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           prodh	equ	0xFF4
  3265                           prodl	equ	0xFF3
  3266                           indf0	equ	0xFEF
  3267                           postinc0	equ	0xFEE
  3268                           fsr0h	equ	0xFEA
  3269                           fsr0l	equ	0xFE9
  3270                           wreg	equ	0xFE8
  3271                           indf2	equ	0xFDF
  3272                           postinc2	equ	0xFDE
  3273                           postdec2	equ	0xFDD
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _adcSetChannel *****************
  3279 ;; Defined at:
  3280 ;;		line 62 in file "myADC.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  channel         1    wreg     unsigned char 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  channel         1    1[COMRAM] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3294 ;;      Params:         0       0       0       0       0       0       0
  3295 ;;      Locals:         1       0       0       0       0       0       0
  3296 ;;      Temps:          1       0       0       0       0       0       0
  3297 ;;      Totals:         2       0       0       0       0       0       0
  3298 ;;Total ram usage:        2 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_adcRead
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text28
  3308  001092                     __ptext28:
  3309                           	opt stack 0
  3310  001092                     _adcSetChannel:
  3311                           	opt stack 29
  3312                           
  3313                           ;incstack = 0
  3314                           ;adcSetChannel@channel stored from wreg
  3315  001092  6E02               	movwf	adcSetChannel@channel,c
  3316                           
  3317                           ;myADC.c: 64: ADCON0bits.CHS = channel;
  3318  001094  C002  F001         	movff	adcSetChannel@channel,??_adcSetChannel
  3319  001098  4601               	rlncf	??_adcSetChannel,f,c
  3320  00109A  4601               	rlncf	??_adcSetChannel,f,c
  3321  00109C  50C2               	movf	4034,w,c	;volatile
  3322  00109E  1801               	xorwf	??_adcSetChannel,w,c
  3323  0010A0  0BC3               	andlw	-61
  3324  0010A2  1801               	xorwf	??_adcSetChannel,w,c
  3325  0010A4  6EC2               	movwf	4034,c	;volatile
  3326  0010A6  0012               	return		;funcret
  3327  0010A8                     __end_of_adcSetChannel:
  3328                           	opt stack 0
  3329                           tblptru	equ	0xFF8
  3330                           tblptrh	equ	0xFF7
  3331                           tblptrl	equ	0xFF6
  3332                           tablat	equ	0xFF5
  3333                           prodh	equ	0xFF4
  3334                           prodl	equ	0xFF3
  3335                           indf0	equ	0xFEF
  3336                           postinc0	equ	0xFEE
  3337                           fsr0h	equ	0xFEA
  3338                           fsr0l	equ	0xFE9
  3339                           wreg	equ	0xFE8
  3340                           indf2	equ	0xFDF
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _adcBusy *****************
  3348 ;; Defined at:
  3349 ;;		line 85 in file "myADC.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      unsigned char 
  3356 ;; Registers used:
  3357 ;;		wreg
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3363 ;;      Params:         0       0       0       0       0       0       0
  3364 ;;      Locals:         0       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0
  3366 ;;      Totals:         0       0       0       0       0       0       0
  3367 ;;Total ram usage:        0 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_adcRead
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text29
  3377  001156                     __ptext29:
  3378                           	opt stack 0
  3379  001156                     _adcBusy:
  3380                           	opt stack 29
  3381                           
  3382                           ;myADC.c: 87: return(ADCON0bits.DONE);
  3383                           
  3384                           ;incstack = 0
  3385  001156  A2C2               	btfss	4034,1,c	;volatile
  3386  001158  D002               	goto	u870
  3387  00115A  0E01               	movlw	1
  3388  00115C  0012               	return	
  3389  00115E                     u870:
  3390  00115E  0E00               	movlw	0
  3391  001160  0012               	return	
  3392  001162                     __end_of_adcBusy:
  3393                           	opt stack 0
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           prodh	equ	0xFF4
  3399                           prodl	equ	0xFF3
  3400                           indf0	equ	0xFEF
  3401                           postinc0	equ	0xFEE
  3402                           fsr0h	equ	0xFEA
  3403                           fsr0l	equ	0xFE9
  3404                           wreg	equ	0xFE8
  3405                           indf2	equ	0xFDF
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _adcInit *****************
  3413 ;; Defined at:
  3414 ;;		line 35 in file "myADC.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3428 ;;      Params:         0       0       0       0       0       0       0
  3429 ;;      Locals:         0       0       0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0
  3431 ;;      Totals:         0       0       0       0       0       0       0
  3432 ;;Total ram usage:        0 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    1
  3435 ;; This function calls:
  3436 ;;		_acdVoltRef
  3437 ;;		_adcAcqTime
  3438 ;;		_adcClock
  3439 ;;		_adcInterrupt
  3440 ;;		_adcPortConfig
  3441 ;;		_adcResultJust
  3442 ;; This function is called by:
  3443 ;;		_main
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text30
  3448  000F4C                     __ptext30:
  3449                           	opt stack 0
  3450  000F4C                     _adcInit:
  3451                           	opt stack 29
  3452                           
  3453                           ;myADC.c: 38: ADCON0 = 0;
  3454                           
  3455                           ;incstack = 0
  3456  000F4C  0E00               	movlw	0
  3457  000F4E  6EC2               	movwf	4034,c	;volatile
  3458                           
  3459                           ;myADC.c: 39: ADCON1 = 0;
  3460  000F50  0E00               	movlw	0
  3461  000F52  6EC1               	movwf	4033,c	;volatile
  3462                           
  3463                           ;myADC.c: 40: ADCON2 = 0;
  3464  000F54  0E00               	movlw	0
  3465  000F56  6EC0               	movwf	4032,c	;volatile
  3466                           
  3467                           ;myADC.c: 42: adcClock(0b101);
  3468  000F58  0E05               	movlw	5
  3469  000F5A  EC9E  F008         	call	_adcClock
  3470                           
  3471                           ;myADC.c: 43: adcAcqTime(0b001);
  3472  000F5E  0E01               	movlw	1
  3473  000F60  EC3D  F008         	call	_adcAcqTime
  3474                           
  3475                           ;myADC.c: 44: adcResultJust(1);
  3476  000F64  0E01               	movlw	1
  3477  000F66  EC90  F008         	call	_adcResultJust
  3478                           
  3479                           ;myADC.c: 45: acdVoltRef(0b00);
  3480  000F6A  0E00               	movlw	0
  3481  000F6C  EC54  F008         	call	_acdVoltRef
  3482                           
  3483                           ;myADC.c: 46: adcInterrupt(0);
  3484  000F70  0E00               	movlw	0
  3485  000F72  EC5E  F008         	call	_adcInterrupt
  3486                           
  3487                           ;myADC.c: 47: adcPortConfig(0b1110);
  3488  000F76  0E0E               	movlw	14
  3489  000F78  EC97  F008         	call	_adcPortConfig
  3490  000F7C  0012               	return		;funcret
  3491  000F7E                     __end_of_adcInit:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           indf0	equ	0xFEF
  3500                           postinc0	equ	0xFEE
  3501                           fsr0h	equ	0xFEA
  3502                           fsr0l	equ	0xFE9
  3503                           wreg	equ	0xFE8
  3504                           indf2	equ	0xFDF
  3505                           postinc2	equ	0xFDE
  3506                           postdec2	equ	0xFDD
  3507                           fsr2h	equ	0xFDA
  3508                           fsr2l	equ	0xFD9
  3509                           status	equ	0xFD8
  3510                           
  3511 ;; *************** function _adcResultJust *****************
  3512 ;; Defined at:
  3513 ;;		line 14 in file "myADC.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  just            1    wreg     unsigned char 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  just            1    0[COMRAM] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		wreg
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3527 ;;      Params:         0       0       0       0       0       0       0
  3528 ;;      Locals:         1       0       0       0       0       0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0
  3530 ;;      Totals:         1       0       0       0       0       0       0
  3531 ;;Total ram usage:        1 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_adcInit
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text31
  3541  001120                     __ptext31:
  3542                           	opt stack 0
  3543  001120                     _adcResultJust:
  3544                           	opt stack 29
  3545                           
  3546                           ;incstack = 0
  3547                           ;adcResultJust@just stored from wreg
  3548  001120  6E01               	movwf	adcResultJust@just,c
  3549                           
  3550                           ;myADC.c: 16: ADCON2bits.ADFM = just;
  3551  001122  B001               	btfsc	adcResultJust@just,0,c
  3552  001124  D002               	bra	u855
  3553  001126  9EC0               	bcf	4032,7,c	;volatile
  3554  001128  D001               	bra	u856
  3555  00112A                     u855:
  3556  00112A  8EC0               	bsf	4032,7,c	;volatile
  3557  00112C                     u856:
  3558  00112C  0012               	return		;funcret
  3559  00112E                     __end_of_adcResultJust:
  3560                           	opt stack 0
  3561                           tblptru	equ	0xFF8
  3562                           tblptrh	equ	0xFF7
  3563                           tblptrl	equ	0xFF6
  3564                           tablat	equ	0xFF5
  3565                           prodh	equ	0xFF4
  3566                           prodl	equ	0xFF3
  3567                           indf0	equ	0xFEF
  3568                           postinc0	equ	0xFEE
  3569                           fsr0h	equ	0xFEA
  3570                           fsr0l	equ	0xFE9
  3571                           wreg	equ	0xFE8
  3572                           indf2	equ	0xFDF
  3573                           postinc2	equ	0xFDE
  3574                           postdec2	equ	0xFDD
  3575                           fsr2h	equ	0xFDA
  3576                           fsr2l	equ	0xFD9
  3577                           status	equ	0xFD8
  3578                           
  3579 ;; *************** function _adcPortConfig *****************
  3580 ;; Defined at:
  3581 ;;		line 30 in file "myADC.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  config          1    wreg     unsigned char 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  config          1    0[COMRAM] unsigned char 
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		wreg, status,2, status,0
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3595 ;;      Params:         0       0       0       0       0       0       0
  3596 ;;      Locals:         1       0       0       0       0       0       0
  3597 ;;      Temps:          0       0       0       0       0       0       0
  3598 ;;      Totals:         1       0       0       0       0       0       0
  3599 ;;Total ram usage:        1 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_adcInit
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text32
  3609  00112E                     __ptext32:
  3610                           	opt stack 0
  3611  00112E                     _adcPortConfig:
  3612                           	opt stack 29
  3613                           
  3614                           ;incstack = 0
  3615                           ;adcPortConfig@config stored from wreg
  3616  00112E  6E01               	movwf	adcPortConfig@config,c
  3617                           
  3618                           ;myADC.c: 32: ADCON1bits.PCFG = config;
  3619  001130  50C1               	movf	4033,w,c	;volatile
  3620  001132  1801               	xorwf	adcPortConfig@config,w,c
  3621  001134  0BF0               	andlw	-16
  3622  001136  1801               	xorwf	adcPortConfig@config,w,c
  3623  001138  6EC1               	movwf	4033,c	;volatile
  3624  00113A  0012               	return		;funcret
  3625  00113C                     __end_of_adcPortConfig:
  3626                           	opt stack 0
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           indf0	equ	0xFEF
  3634                           postinc0	equ	0xFEE
  3635                           fsr0h	equ	0xFEA
  3636                           fsr0l	equ	0xFE9
  3637                           wreg	equ	0xFE8
  3638                           indf2	equ	0xFDF
  3639                           postinc2	equ	0xFDE
  3640                           postdec2	equ	0xFDD
  3641                           fsr2h	equ	0xFDA
  3642                           fsr2l	equ	0xFD9
  3643                           status	equ	0xFD8
  3644                           
  3645 ;; *************** function _adcInterrupt *****************
  3646 ;; Defined at:
  3647 ;;		line 24 in file "myADC.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  config          1    wreg     unsigned char 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  config          1    0[COMRAM] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3661 ;;      Params:         0       0       0       0       0       0       0
  3662 ;;      Locals:         1       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0
  3664 ;;      Totals:         1       0       0       0       0       0       0
  3665 ;;Total ram usage:        1 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; This function calls:
  3668 ;;		Nothing
  3669 ;; This function is called by:
  3670 ;;		_adcInit
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text33
  3675  0010BC                     __ptext33:
  3676                           	opt stack 0
  3677  0010BC                     _adcInterrupt:
  3678                           	opt stack 29
  3679                           
  3680                           ;incstack = 0
  3681                           ;adcInterrupt@config stored from wreg
  3682  0010BC  6E01               	movwf	adcInterrupt@config,c
  3683                           
  3684                           ;myADC.c: 26: PIE1bits.ADIE = config;
  3685  0010BE  B001               	btfsc	adcInterrupt@config,0,c
  3686  0010C0  D002               	bra	u865
  3687  0010C2  9C9D               	bcf	3997,6,c	;volatile
  3688  0010C4  D001               	bra	u866
  3689  0010C6                     u865:
  3690  0010C6  8C9D               	bsf	3997,6,c	;volatile
  3691  0010C8                     u866:
  3692                           
  3693                           ;myADC.c: 27: INTCONbits.PEIE = 1;
  3694  0010C8  8CF2               	bsf	intcon,6,c	;volatile
  3695  0010CA  0012               	return		;funcret
  3696  0010CC                     __end_of_adcInterrupt:
  3697                           	opt stack 0
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           indf0	equ	0xFEF
  3706                           postinc0	equ	0xFEE
  3707                           fsr0h	equ	0xFEA
  3708                           fsr0l	equ	0xFE9
  3709                           wreg	equ	0xFE8
  3710                           indf2	equ	0xFDF
  3711                           postinc2	equ	0xFDE
  3712                           postdec2	equ	0xFDD
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _adcClock *****************
  3718 ;; Defined at:
  3719 ;;		line 4 in file "myADC.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  clk             1    wreg     unsigned char 
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  clk             1    0[COMRAM] unsigned char 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3733 ;;      Params:         0       0       0       0       0       0       0
  3734 ;;      Locals:         1       0       0       0       0       0       0
  3735 ;;      Temps:          0       0       0       0       0       0       0
  3736 ;;      Totals:         1       0       0       0       0       0       0
  3737 ;;Total ram usage:        1 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; This function calls:
  3740 ;;		Nothing
  3741 ;; This function is called by:
  3742 ;;		_adcInit
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text34
  3747  00113C                     __ptext34:
  3748                           	opt stack 0
  3749  00113C                     _adcClock:
  3750                           	opt stack 29
  3751                           
  3752                           ;incstack = 0
  3753                           ;adcClock@clk stored from wreg
  3754  00113C  6E01               	movwf	adcClock@clk,c
  3755                           
  3756                           ;myADC.c: 6: ADCON2bits.ADCS = clk;
  3757  00113E  50C0               	movf	4032,w,c	;volatile
  3758  001140  1801               	xorwf	adcClock@clk,w,c
  3759  001142  0BF8               	andlw	-8
  3760  001144  1801               	xorwf	adcClock@clk,w,c
  3761  001146  6EC0               	movwf	4032,c	;volatile
  3762  001148  0012               	return		;funcret
  3763  00114A                     __end_of_adcClock:
  3764                           	opt stack 0
  3765                           tblptru	equ	0xFF8
  3766                           tblptrh	equ	0xFF7
  3767                           tblptrl	equ	0xFF6
  3768                           tablat	equ	0xFF5
  3769                           prodh	equ	0xFF4
  3770                           prodl	equ	0xFF3
  3771                           intcon	equ	0xFF2
  3772                           indf0	equ	0xFEF
  3773                           postinc0	equ	0xFEE
  3774                           fsr0h	equ	0xFEA
  3775                           fsr0l	equ	0xFE9
  3776                           wreg	equ	0xFE8
  3777                           indf2	equ	0xFDF
  3778                           postinc2	equ	0xFDE
  3779                           postdec2	equ	0xFDD
  3780                           fsr2h	equ	0xFDA
  3781                           fsr2l	equ	0xFD9
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _adcAcqTime *****************
  3785 ;; Defined at:
  3786 ;;		line 9 in file "myADC.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  tad             1    wreg     unsigned char 
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;  tad             1    1[COMRAM] unsigned char 
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg, status,2, status,0
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3800 ;;      Params:         0       0       0       0       0       0       0
  3801 ;;      Locals:         1       0       0       0       0       0       0
  3802 ;;      Temps:          1       0       0       0       0       0       0
  3803 ;;      Totals:         2       0       0       0       0       0       0
  3804 ;;Total ram usage:        2 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_adcInit
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text35
  3814  00107A                     __ptext35:
  3815                           	opt stack 0
  3816  00107A                     _adcAcqTime:
  3817                           	opt stack 29
  3818                           
  3819                           ;incstack = 0
  3820                           ;adcAcqTime@tad stored from wreg
  3821  00107A  6E02               	movwf	adcAcqTime@tad,c
  3822                           
  3823                           ;myADC.c: 11: ADCON2bits.ACQT = tad;
  3824  00107C  C002  F001         	movff	adcAcqTime@tad,??_adcAcqTime
  3825  001080  4601               	rlncf	??_adcAcqTime,f,c
  3826  001082  4601               	rlncf	??_adcAcqTime,f,c
  3827  001084  4601               	rlncf	??_adcAcqTime,f,c
  3828  001086  50C0               	movf	4032,w,c	;volatile
  3829  001088  1801               	xorwf	??_adcAcqTime,w,c
  3830  00108A  0BC7               	andlw	-57
  3831  00108C  1801               	xorwf	??_adcAcqTime,w,c
  3832  00108E  6EC0               	movwf	4032,c	;volatile
  3833  001090  0012               	return		;funcret
  3834  001092                     __end_of_adcAcqTime:
  3835                           	opt stack 0
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           prodh	equ	0xFF4
  3841                           prodl	equ	0xFF3
  3842                           intcon	equ	0xFF2
  3843                           indf0	equ	0xFEF
  3844                           postinc0	equ	0xFEE
  3845                           fsr0h	equ	0xFEA
  3846                           fsr0l	equ	0xFE9
  3847                           wreg	equ	0xFE8
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           fsr2h	equ	0xFDA
  3852                           fsr2l	equ	0xFD9
  3853                           status	equ	0xFD8
  3854                           
  3855 ;; *************** function _acdVoltRef *****************
  3856 ;; Defined at:
  3857 ;;		line 19 in file "myADC.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;  vref            1    wreg     unsigned char 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  vref            1    1[COMRAM] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3871 ;;      Params:         0       0       0       0       0       0       0
  3872 ;;      Locals:         1       0       0       0       0       0       0
  3873 ;;      Temps:          1       0       0       0       0       0       0
  3874 ;;      Totals:         2       0       0       0       0       0       0
  3875 ;;Total ram usage:        2 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; This function calls:
  3878 ;;		Nothing
  3879 ;; This function is called by:
  3880 ;;		_adcInit
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text36
  3885  0010A8                     __ptext36:
  3886                           	opt stack 0
  3887  0010A8                     _acdVoltRef:
  3888                           	opt stack 29
  3889                           
  3890                           ;incstack = 0
  3891                           ;acdVoltRef@vref stored from wreg
  3892  0010A8  6E02               	movwf	acdVoltRef@vref,c
  3893                           
  3894                           ;myADC.c: 21: ADCON1bits.VCFG = vref;
  3895  0010AA  C002  F001         	movff	acdVoltRef@vref,??_acdVoltRef
  3896  0010AE  3A01               	swapf	??_acdVoltRef,f,c
  3897  0010B0  50C1               	movf	4033,w,c	;volatile
  3898  0010B2  1801               	xorwf	??_acdVoltRef,w,c
  3899  0010B4  0BCF               	andlw	-49
  3900  0010B6  1801               	xorwf	??_acdVoltRef,w,c
  3901  0010B8  6EC1               	movwf	4033,c	;volatile
  3902  0010BA  0012               	return		;funcret
  3903  0010BC                     __end_of_acdVoltRef:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           indf0	equ	0xFEF
  3913                           postinc0	equ	0xFEE
  3914                           fsr0h	equ	0xFEA
  3915                           fsr0l	equ	0xFE9
  3916                           wreg	equ	0xFE8
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function ___lwtoft *****************
  3925 ;; Defined at:
  3926 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  c               2    8[COMRAM] unsigned int 
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  3    8[COMRAM] float 
  3933 ;; Registers used:
  3934 ;;		wreg, status,2, status,0, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3940 ;;      Params:         3       0       0       0       0       0       0
  3941 ;;      Locals:         0       0       0       0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0
  3943 ;;      Totals:         3       0       0       0       0       0       0
  3944 ;;Total ram usage:        3 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    1
  3947 ;; This function calls:
  3948 ;;		___ftpack
  3949 ;; This function is called by:
  3950 ;;		_main
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text37
  3955  000FD0                     __ptext37:
  3956                           	opt stack 0
  3957  000FD0                     ___lwtoft:
  3958                           	opt stack 29
  3959                           
  3960                           ;incstack = 0
  3961  000FD0  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3962  000FD4  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3963  000FD8  6A03               	clrf	___ftpack@arg+2,c
  3964  000FDA  0E8E               	movlw	142
  3965  000FDC  6E04               	movwf	___ftpack@exp,c
  3966  000FDE  0E00               	movlw	0
  3967  000FE0  6E05               	movwf	___ftpack@sign,c
  3968  000FE2  ECE9  F005         	call	___ftpack	;wreg free
  3969  000FE6  C001  F009         	movff	?___ftpack,?___lwtoft
  3970  000FEA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3971  000FEE  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3972  000FF2  0012               	return	
  3973  000FF4                     __end_of___lwtoft:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           intcon	equ	0xFF2
  3982                           indf0	equ	0xFEF
  3983                           postinc0	equ	0xFEE
  3984                           fsr0h	equ	0xFEA
  3985                           fsr0l	equ	0xFE9
  3986                           wreg	equ	0xFE8
  3987                           indf2	equ	0xFDF
  3988                           postinc2	equ	0xFDE
  3989                           postdec2	equ	0xFDD
  3990                           fsr2h	equ	0xFDA
  3991                           fsr2l	equ	0xFD9
  3992                           status	equ	0xFD8
  3993                           
  3994 ;; *************** function ___ftmul *****************
  3995 ;; Defined at:
  3996 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  f1              3   26[COMRAM] float 
  3999 ;;  f2              3   29[COMRAM] float 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  4002 ;;  sign            1   40[COMRAM] unsigned char 
  4003 ;;  cntr            1   39[COMRAM] unsigned char 
  4004 ;;  exp             1   35[COMRAM] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  3   26[COMRAM] float 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4014 ;;      Params:         6       0       0       0       0       0       0
  4015 ;;      Locals:         6       0       0       0       0       0       0
  4016 ;;      Temps:          3       0       0       0       0       0       0
  4017 ;;      Totals:        15       0       0       0       0       0       0
  4018 ;;Total ram usage:       15 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    1
  4021 ;; This function calls:
  4022 ;;		___ftpack
  4023 ;; This function is called by:
  4024 ;;		_main
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text38
  4029  00092A                     __ptext38:
  4030                           	opt stack 0
  4031  00092A                     ___ftmul:
  4032                           	opt stack 29
  4033                           
  4034                           ;incstack = 0
  4035  00092A  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  4036  00092E  6A22               	clrf	(??___ftmul+1)& (0+255),c
  4037  000930  6A23               	clrf	(??___ftmul+2)& (0+255),c
  4038  000932  341C               	rlcf	___ftmul@f1+1,w,c
  4039  000934  3621               	rlcf	??___ftmul& (0+255),f,c
  4040  000936  E301               	bnc	u1541
  4041  000938  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  4042  00093A                     u1541:
  4043  00093A  5021               	movf	??___ftmul,w,c
  4044  00093C  6E24               	movwf	___ftmul@exp,c
  4045  00093E  5024               	movf	___ftmul@exp,w,c
  4046  000940  A4D8               	btfss	status,2,c
  4047  000942  D007               	goto	l1925
  4048  000944  0E00               	movlw	0
  4049  000946  6E1B               	movwf	?___ftmul,c
  4050  000948  0E00               	movlw	0
  4051  00094A  6E1C               	movwf	?___ftmul+1,c
  4052  00094C  0E00               	movlw	0
  4053  00094E  6E1D               	movwf	?___ftmul+2,c
  4054  000950  0012               	return	
  4055  000952                     l1925:
  4056  000952  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  4057  000956  6A22               	clrf	(??___ftmul+1)& (0+255),c
  4058  000958  6A23               	clrf	(??___ftmul+2)& (0+255),c
  4059  00095A  341F               	rlcf	___ftmul@f2+1,w,c
  4060  00095C  3621               	rlcf	??___ftmul& (0+255),f,c
  4061  00095E  E301               	bnc	u1561
  4062  000960  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  4063  000962                     u1561:
  4064  000962  5021               	movf	??___ftmul,w,c
  4065  000964  6E29               	movwf	___ftmul@sign,c
  4066  000966  5029               	movf	___ftmul@sign,w,c
  4067  000968  A4D8               	btfss	status,2,c
  4068  00096A  D007               	goto	l1931
  4069  00096C  0E00               	movlw	0
  4070  00096E  6E1B               	movwf	?___ftmul,c
  4071  000970  0E00               	movlw	0
  4072  000972  6E1C               	movwf	?___ftmul+1,c
  4073  000974  0E00               	movlw	0
  4074  000976  6E1D               	movwf	?___ftmul+2,c
  4075  000978  0012               	return	
  4076  00097A                     l1931:
  4077  00097A  5029               	movf	___ftmul@sign,w,c
  4078  00097C  0F7B               	addlw	123
  4079  00097E  2624               	addwf	___ftmul@exp,f,c
  4080  000980  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  4081  000984  5020               	movf	___ftmul@f2+2,w,c
  4082  000986  1A29               	xorwf	___ftmul@sign,f,c
  4083  000988  0E80               	movlw	128
  4084  00098A  1629               	andwf	___ftmul@sign,f,c
  4085  00098C  8E1C               	bsf	___ftmul@f1+1,7,c
  4086  00098E  8E1F               	bsf	___ftmul@f2+1,7,c
  4087  000990  0EFF               	movlw	255
  4088  000992  161E               	andwf	___ftmul@f2,f,c
  4089  000994  0EFF               	movlw	255
  4090  000996  161F               	andwf	___ftmul@f2+1,f,c
  4091  000998  0E00               	movlw	0
  4092  00099A  1620               	andwf	___ftmul@f2+2,f,c
  4093  00099C  0E00               	movlw	0
  4094  00099E  6E25               	movwf	___ftmul@f3_as_product,c
  4095  0009A0  0E00               	movlw	0
  4096  0009A2  6E26               	movwf	___ftmul@f3_as_product+1,c
  4097  0009A4  0E00               	movlw	0
  4098  0009A6  6E27               	movwf	___ftmul@f3_as_product+2,c
  4099  0009A8  0E07               	movlw	7
  4100  0009AA  6E28               	movwf	___ftmul@cntr,c
  4101  0009AC                     l1945:
  4102  0009AC  A01B               	btfss	___ftmul@f1,0,c
  4103  0009AE  D006               	goto	l1949
  4104  0009B0  501E               	movf	___ftmul@f2,w,c
  4105  0009B2  2625               	addwf	___ftmul@f3_as_product,f,c
  4106  0009B4  501F               	movf	___ftmul@f2+1,w,c
  4107  0009B6  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  4108  0009B8  5020               	movf	___ftmul@f2+2,w,c
  4109  0009BA  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  4110  0009BC                     l1949:
  4111  0009BC  90D8               	bcf	status,0,c
  4112  0009BE  321D               	rrcf	___ftmul@f1+2,f,c
  4113  0009C0  321C               	rrcf	___ftmul@f1+1,f,c
  4114  0009C2  321B               	rrcf	___ftmul@f1,f,c
  4115  0009C4  90D8               	bcf	status,0,c
  4116  0009C6  361E               	rlcf	___ftmul@f2,f,c
  4117  0009C8  361F               	rlcf	___ftmul@f2+1,f,c
  4118  0009CA  3620               	rlcf	___ftmul@f2+2,f,c
  4119  0009CC  2E28               	decfsz	___ftmul@cntr,f,c
  4120  0009CE  D7EE               	goto	l1945
  4121  0009D0  0E09               	movlw	9
  4122  0009D2  6E28               	movwf	___ftmul@cntr,c
  4123  0009D4                     l1955:
  4124  0009D4  A01B               	btfss	___ftmul@f1,0,c
  4125  0009D6  D006               	goto	l1959
  4126  0009D8  501E               	movf	___ftmul@f2,w,c
  4127  0009DA  2625               	addwf	___ftmul@f3_as_product,f,c
  4128  0009DC  501F               	movf	___ftmul@f2+1,w,c
  4129  0009DE  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  4130  0009E0  5020               	movf	___ftmul@f2+2,w,c
  4131  0009E2  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  4132  0009E4                     l1959:
  4133  0009E4  90D8               	bcf	status,0,c
  4134  0009E6  321D               	rrcf	___ftmul@f1+2,f,c
  4135  0009E8  321C               	rrcf	___ftmul@f1+1,f,c
  4136  0009EA  321B               	rrcf	___ftmul@f1,f,c
  4137  0009EC  90D8               	bcf	status,0,c
  4138  0009EE  3227               	rrcf	___ftmul@f3_as_product+2,f,c
  4139  0009F0  3226               	rrcf	___ftmul@f3_as_product+1,f,c
  4140  0009F2  3225               	rrcf	___ftmul@f3_as_product,f,c
  4141  0009F4  2E28               	decfsz	___ftmul@cntr,f,c
  4142  0009F6  D7EE               	goto	l1955
  4143  0009F8  C025  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4144  0009FC  C026  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4145  000A00  C027  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4146  000A04  C024  F004         	movff	___ftmul@exp,___ftpack@exp
  4147  000A08  C029  F005         	movff	___ftmul@sign,___ftpack@sign
  4148  000A0C  ECE9  F005         	call	___ftpack	;wreg free
  4149  000A10  C001  F01B         	movff	?___ftpack,?___ftmul
  4150  000A14  C002  F01C         	movff	?___ftpack+1,?___ftmul+1
  4151  000A18  C003  F01D         	movff	?___ftpack+2,?___ftmul+2
  4152  000A1C  0012               	return	
  4153  000A1E                     __end_of___ftmul:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           indf0	equ	0xFEF
  4163                           postinc0	equ	0xFEE
  4164                           fsr0h	equ	0xFEA
  4165                           fsr0l	equ	0xFE9
  4166                           wreg	equ	0xFE8
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           postdec2	equ	0xFDD
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function ___ftdiv *****************
  4175 ;; Defined at:
  4176 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  f1              3   11[COMRAM] float 
  4179 ;;  f2              3   14[COMRAM] float 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  f3              3   21[COMRAM] float 
  4182 ;;  sign            1   25[COMRAM] unsigned char 
  4183 ;;  exp             1   24[COMRAM] unsigned char 
  4184 ;;  cntr            1   20[COMRAM] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  3   11[COMRAM] float 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4194 ;;      Params:         6       0       0       0       0       0       0
  4195 ;;      Locals:         6       0       0       0       0       0       0
  4196 ;;      Temps:          3       0       0       0       0       0       0
  4197 ;;      Totals:        15       0       0       0       0       0       0
  4198 ;;Total ram usage:       15 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    1
  4201 ;; This function calls:
  4202 ;;		___ftpack
  4203 ;; This function is called by:
  4204 ;;		_main
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text39
  4209  000A1E                     __ptext39:
  4210                           	opt stack 0
  4211  000A1E                     ___ftdiv:
  4212                           	opt stack 29
  4213                           
  4214                           ;incstack = 0
  4215  000A1E  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  4216  000A22  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4217  000A24  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4218  000A26  340D               	rlcf	___ftdiv@f1+1,w,c
  4219  000A28  3612               	rlcf	??___ftdiv& (0+255),f,c
  4220  000A2A  E301               	bnc	u1491
  4221  000A2C  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4222  000A2E                     u1491:
  4223  000A2E  5012               	movf	??___ftdiv,w,c
  4224  000A30  6E19               	movwf	___ftdiv@exp,c
  4225  000A32  5019               	movf	___ftdiv@exp,w,c
  4226  000A34  A4D8               	btfss	status,2,c
  4227  000A36  D007               	goto	l1879
  4228  000A38  0E00               	movlw	0
  4229  000A3A  6E0C               	movwf	?___ftdiv,c
  4230  000A3C  0E00               	movlw	0
  4231  000A3E  6E0D               	movwf	?___ftdiv+1,c
  4232  000A40  0E00               	movlw	0
  4233  000A42  6E0E               	movwf	?___ftdiv+2,c
  4234  000A44  0012               	return	
  4235  000A46                     l1879:
  4236  000A46  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  4237  000A4A  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4238  000A4C  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4239  000A4E  3410               	rlcf	___ftdiv@f2+1,w,c
  4240  000A50  3612               	rlcf	??___ftdiv& (0+255),f,c
  4241  000A52  E301               	bnc	u1511
  4242  000A54  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4243  000A56                     u1511:
  4244  000A56  5012               	movf	??___ftdiv,w,c
  4245  000A58  6E1A               	movwf	___ftdiv@sign,c
  4246  000A5A  501A               	movf	___ftdiv@sign,w,c
  4247  000A5C  A4D8               	btfss	status,2,c
  4248  000A5E  D007               	goto	l1885
  4249  000A60  0E00               	movlw	0
  4250  000A62  6E0C               	movwf	?___ftdiv,c
  4251  000A64  0E00               	movlw	0
  4252  000A66  6E0D               	movwf	?___ftdiv+1,c
  4253  000A68  0E00               	movlw	0
  4254  000A6A  6E0E               	movwf	?___ftdiv+2,c
  4255  000A6C  0012               	return	
  4256  000A6E                     l1885:
  4257  000A6E  0E00               	movlw	0
  4258  000A70  6E16               	movwf	___ftdiv@f3,c
  4259  000A72  0E00               	movlw	0
  4260  000A74  6E17               	movwf	___ftdiv@f3+1,c
  4261  000A76  0E00               	movlw	0
  4262  000A78  6E18               	movwf	___ftdiv@f3+2,c
  4263  000A7A  501A               	movf	___ftdiv@sign,w,c
  4264  000A7C  0F89               	addlw	137
  4265  000A7E  5E19               	subwf	___ftdiv@exp,f,c
  4266  000A80  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  4267  000A84  5011               	movf	___ftdiv@f2+2,w,c
  4268  000A86  1A1A               	xorwf	___ftdiv@sign,f,c
  4269  000A88  0E80               	movlw	128
  4270  000A8A  161A               	andwf	___ftdiv@sign,f,c
  4271  000A8C  8E0D               	bsf	___ftdiv@f1+1,7,c
  4272  000A8E  0EFF               	movlw	255
  4273  000A90  160C               	andwf	___ftdiv@f1,f,c
  4274  000A92  0EFF               	movlw	255
  4275  000A94  160D               	andwf	___ftdiv@f1+1,f,c
  4276  000A96  0E00               	movlw	0
  4277  000A98  160E               	andwf	___ftdiv@f1+2,f,c
  4278  000A9A  8E10               	bsf	___ftdiv@f2+1,7,c
  4279  000A9C  0EFF               	movlw	255
  4280  000A9E  160F               	andwf	___ftdiv@f2,f,c
  4281  000AA0  0EFF               	movlw	255
  4282  000AA2  1610               	andwf	___ftdiv@f2+1,f,c
  4283  000AA4  0E00               	movlw	0
  4284  000AA6  1611               	andwf	___ftdiv@f2+2,f,c
  4285  000AA8  0E18               	movlw	24
  4286  000AAA  6E15               	movwf	___ftdiv@cntr,c
  4287  000AAC                     l1905:
  4288  000AAC  90D8               	bcf	status,0,c
  4289  000AAE  3616               	rlcf	___ftdiv@f3,f,c
  4290  000AB0  3617               	rlcf	___ftdiv@f3+1,f,c
  4291  000AB2  3618               	rlcf	___ftdiv@f3+2,f,c
  4292  000AB4  500F               	movf	___ftdiv@f2,w,c
  4293  000AB6  5C0C               	subwf	___ftdiv@f1,w,c
  4294  000AB8  5010               	movf	___ftdiv@f2+1,w,c
  4295  000ABA  580D               	subwfb	___ftdiv@f1+1,w,c
  4296  000ABC  5011               	movf	___ftdiv@f2+2,w,c
  4297  000ABE  580E               	subwfb	___ftdiv@f1+2,w,c
  4298  000AC0  A0D8               	btfss	status,0,c
  4299  000AC2  D007               	goto	l557
  4300  000AC4  500F               	movf	___ftdiv@f2,w,c
  4301  000AC6  5E0C               	subwf	___ftdiv@f1,f,c
  4302  000AC8  5010               	movf	___ftdiv@f2+1,w,c
  4303  000ACA  5A0D               	subwfb	___ftdiv@f1+1,f,c
  4304  000ACC  5011               	movf	___ftdiv@f2+2,w,c
  4305  000ACE  5A0E               	subwfb	___ftdiv@f1+2,f,c
  4306  000AD0  8016               	bsf	___ftdiv@f3,0,c
  4307  000AD2                     l557:
  4308  000AD2  90D8               	bcf	status,0,c
  4309  000AD4  360C               	rlcf	___ftdiv@f1,f,c
  4310  000AD6  360D               	rlcf	___ftdiv@f1+1,f,c
  4311  000AD8  360E               	rlcf	___ftdiv@f1+2,f,c
  4312  000ADA  2E15               	decfsz	___ftdiv@cntr,f,c
  4313  000ADC  D7E7               	goto	l1905
  4314  000ADE  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  4315  000AE2  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4316  000AE6  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4317  000AEA  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  4318  000AEE  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  4319  000AF2  ECE9  F005         	call	___ftpack	;wreg free
  4320  000AF6  C001  F00C         	movff	?___ftpack,?___ftdiv
  4321  000AFA  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  4322  000AFE  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  4323  000B02  0012               	return	
  4324  000B04                     __end_of___ftdiv:
  4325                           	opt stack 0
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           intcon	equ	0xFF2
  4333                           indf0	equ	0xFEF
  4334                           postinc0	equ	0xFEE
  4335                           fsr0h	equ	0xFEA
  4336                           fsr0l	equ	0xFE9
  4337                           wreg	equ	0xFE8
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function ___ftpack *****************
  4346 ;; Defined at:
  4347 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  arg             3    0[COMRAM] unsigned um
  4350 ;;  exp             1    3[COMRAM] unsigned char 
  4351 ;;  sign            1    4[COMRAM] unsigned char 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  3    0[COMRAM] float 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4363 ;;      Params:         5       0       0       0       0       0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0
  4365 ;;      Temps:          3       0       0       0       0       0       0
  4366 ;;      Totals:         8       0       0       0       0       0       0
  4367 ;;Total ram usage:        8 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		___ftdiv
  4373 ;;		___ftmul
  4374 ;;		___lwtoft
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text40
  4379  000BD2                     __ptext40:
  4380                           	opt stack 0
  4381  000BD2                     ___ftpack:
  4382                           	opt stack 29
  4383                           
  4384                           ;incstack = 0
  4385  000BD2  5004               	movf	___ftpack@exp,w,c
  4386  000BD4  B4D8               	btfsc	status,2,c
  4387  000BD6  D005               	goto	l1559
  4388  000BD8  5001               	movf	___ftpack@arg,w,c
  4389  000BDA  1002               	iorwf	___ftpack@arg+1,w,c
  4390  000BDC  1003               	iorwf	___ftpack@arg+2,w,c
  4391  000BDE  A4D8               	btfss	status,2,c
  4392  000BE0  D00C               	goto	l1565
  4393  000BE2                     l1559:
  4394  000BE2  0E00               	movlw	0
  4395  000BE4  6E01               	movwf	?___ftpack,c
  4396  000BE6  0E00               	movlw	0
  4397  000BE8  6E02               	movwf	?___ftpack+1,c
  4398  000BEA  0E00               	movlw	0
  4399  000BEC  6E03               	movwf	?___ftpack+2,c
  4400  000BEE  0012               	return	
  4401  000BF0                     l1563:
  4402  000BF0  2A04               	incf	___ftpack@exp,f,c
  4403  000BF2  90D8               	bcf	status,0,c
  4404  000BF4  3203               	rrcf	___ftpack@arg+2,f,c
  4405  000BF6  3202               	rrcf	___ftpack@arg+1,f,c
  4406  000BF8  3201               	rrcf	___ftpack@arg,f,c
  4407  000BFA                     l1565:
  4408  000BFA  0E00               	movlw	0
  4409  000BFC  1401               	andwf	___ftpack@arg,w,c
  4410  000BFE  6E06               	movwf	??___ftpack& (0+255),c
  4411  000C00  0E00               	movlw	0
  4412  000C02  1402               	andwf	___ftpack@arg+1,w,c
  4413  000C04  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4414  000C06  0EFE               	movlw	254
  4415  000C08  1403               	andwf	___ftpack@arg+2,w,c
  4416  000C0A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4417  000C0C  5006               	movf	??___ftpack,w,c
  4418  000C0E  1007               	iorwf	??___ftpack+1,w,c
  4419  000C10  1008               	iorwf	??___ftpack+2,w,c
  4420  000C12  B4D8               	btfsc	status,2,c
  4421  000C14  D00C               	goto	l1571
  4422  000C16  D7EC               	goto	l1563
  4423  000C18                     l1567:
  4424  000C18  2A04               	incf	___ftpack@exp,f,c
  4425  000C1A  0E01               	movlw	1
  4426  000C1C  2601               	addwf	___ftpack@arg,f,c
  4427  000C1E  0E00               	movlw	0
  4428  000C20  2202               	addwfc	___ftpack@arg+1,f,c
  4429  000C22  0E00               	movlw	0
  4430  000C24  2203               	addwfc	___ftpack@arg+2,f,c
  4431  000C26  90D8               	bcf	status,0,c
  4432  000C28  3203               	rrcf	___ftpack@arg+2,f,c
  4433  000C2A  3202               	rrcf	___ftpack@arg+1,f,c
  4434  000C2C  3201               	rrcf	___ftpack@arg,f,c
  4435  000C2E                     l1571:
  4436  000C2E  0E00               	movlw	0
  4437  000C30  1401               	andwf	___ftpack@arg,w,c
  4438  000C32  6E06               	movwf	??___ftpack& (0+255),c
  4439  000C34  0E00               	movlw	0
  4440  000C36  1402               	andwf	___ftpack@arg+1,w,c
  4441  000C38  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4442  000C3A  0EFF               	movlw	255
  4443  000C3C  1403               	andwf	___ftpack@arg+2,w,c
  4444  000C3E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4445  000C40  5006               	movf	??___ftpack,w,c
  4446  000C42  1007               	iorwf	??___ftpack+1,w,c
  4447  000C44  1008               	iorwf	??___ftpack+2,w,c
  4448  000C46  B4D8               	btfsc	status,2,c
  4449  000C48  D006               	goto	l1575
  4450  000C4A  D7E6               	goto	l1567
  4451  000C4C                     l1573:
  4452  000C4C  0604               	decf	___ftpack@exp,f,c
  4453  000C4E  90D8               	bcf	status,0,c
  4454  000C50  3601               	rlcf	___ftpack@arg,f,c
  4455  000C52  3602               	rlcf	___ftpack@arg+1,f,c
  4456  000C54  3603               	rlcf	___ftpack@arg+2,f,c
  4457  000C56                     l1575:
  4458  000C56  BE02               	btfsc	___ftpack@arg+1,7,c
  4459  000C58  D003               	goto	l499
  4460  000C5A  0E02               	movlw	2
  4461  000C5C  6004               	cpfslt	___ftpack@exp,c
  4462  000C5E  D7F6               	goto	l1573
  4463  000C60                     l499:
  4464  000C60  A004               	btfss	___ftpack@exp,0,c
  4465  000C62  9E02               	bcf	___ftpack@arg+1,7,c
  4466  000C64  90D8               	bcf	status,0,c
  4467  000C66  3204               	rrcf	___ftpack@exp,f,c
  4468  000C68  5004               	movf	___ftpack@exp,w,c
  4469  000C6A  1203               	iorwf	___ftpack@arg+2,f,c
  4470  000C6C  5005               	movf	___ftpack@sign,w,c
  4471  000C6E  A4D8               	btfss	status,2,c
  4472  000C70  8E03               	bsf	___ftpack@arg+2,7,c
  4473  000C72  C001  F001         	movff	___ftpack@arg,?___ftpack
  4474  000C76  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4475  000C7A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4476  000C7E  0012               	return	
  4477  000C80                     __end_of___ftpack:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           intcon	equ	0xFF2
  4486                           indf0	equ	0xFEF
  4487                           postinc0	equ	0xFEE
  4488                           fsr0h	equ	0xFEA
  4489                           fsr0l	equ	0xFE9
  4490                           wreg	equ	0xFE8
  4491                           indf2	equ	0xFDF
  4492                           postinc2	equ	0xFDE
  4493                           postdec2	equ	0xFDD
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodh	equ	0xFF4
  4502                           prodl	equ	0xFF3
  4503                           intcon	equ	0xFF2
  4504                           indf0	equ	0xFEF
  4505                           postinc0	equ	0xFEE
  4506                           fsr0h	equ	0xFEA
  4507                           fsr0l	equ	0xFE9
  4508                           wreg	equ	0xFE8
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516                           	psect	rparam
  4517  0000                     tblptru	equ	0xFF8
  4518                           tblptrh	equ	0xFF7
  4519                           tblptrl	equ	0xFF6
  4520                           tablat	equ	0xFF5
  4521                           prodh	equ	0xFF4
  4522                           prodl	equ	0xFF3
  4523                           intcon	equ	0xFF2
  4524                           indf0	equ	0xFEF
  4525                           postinc0	equ	0xFEE
  4526                           fsr0h	equ	0xFEA
  4527                           fsr0l	equ	0xFE9
  4528                           wreg	equ	0xFE8
  4529                           indf2	equ	0xFDF
  4530                           postinc2	equ	0xFDE
  4531                           postdec2	equ	0xFDD
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    10
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     43      48
    BANK0           128      0      86
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 86
		 -> buff(BANK0[86]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    uartPuts@str	PTR unsigned char  size(2) Largest target is 86
		 -> buff(BANK0[86]), 

    lcdPuts@str	PTR unsigned char  size(2) Largest target is 86
		 -> buff(BANK0[86]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _uartPuts->_uartWrite
    _uartOpen->_uartIntMode
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdPuts->_lcdPutc
    _lcdPutc->_lcdByte
    _lcdInit->_lcdCmd
    _lcdGotoxy->_lcdCmd
    _lcdCmd->_lcdByte
    _lcdByte->_lcdNible
    _adcRead->_adcSetChannel
    _adcInit->_acdVoltRef
    _adcInit->_adcAcqTime
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   11130
                                             41 COMRAM     2     2      0
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                            _adcInit
                            _adcRead
                          _lcdGotoxy
                            _lcdInit
                            _lcdPuts
                            _sprintf
                           _uartOpen
                           _uartPuts
 ---------------------------------------------------------------------------------
 (1) _uartPuts                                             2     0      2     130
                                              1 COMRAM     2     0      2
                           _uartBusy
                          _uartWrite
 ---------------------------------------------------------------------------------
 (2) _uartWrite                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartBusy                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uartOpen                                             0     0      0     262
                   _uartBaudrateMode
                        _uartBitMode
                        _uartIntMode
                         _uartRxMode
                    _uartSetBaudrate
                          _uartStart
                       _uartSyncMode
                      _uartSynchMode
 ---------------------------------------------------------------------------------
 (2) _uartSynchMode                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartSyncMode                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartStart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _uartSetBaudrate                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartRxMode                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIntMode                                          2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _uartBitMode                                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartBaudrateMode                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    2285
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdPuts                                              2     0      2     327
                                              5 COMRAM     2     0      2
                            _lcdPutc
 ---------------------------------------------------------------------------------
 (2) _lcdPutc                                              1     1      0     154
                                              4 COMRAM     1     1      0
                            _lcdByte
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0     242
                                              5 COMRAM     1     1      0
                             _lcdCmd
                           _lcdNible
 ---------------------------------------------------------------------------------
 (1) _lcdGotoxy                                            2     1      1     394
                                              5 COMRAM     2     1      1
                             _lcdCmd
 ---------------------------------------------------------------------------------
 (2) _lcdCmd                                               1     1      0     154
                                              4 COMRAM     1     1      0
                            _lcdByte
 ---------------------------------------------------------------------------------
 (3) _lcdByte                                              1     1      0     132
                                              3 COMRAM     1     1      0
                           _lcdNible
 ---------------------------------------------------------------------------------
 (4) _lcdNible                                             3     3      0      88
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _adcRead                                             11     9      2     113
                                              2 COMRAM    11     9      2
                            _adcBusy
                      _adcSetChannel
                           _adcStart
                            _adcStop
 ---------------------------------------------------------------------------------
 (2) _adcStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adcStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adcSetChannel                                        2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcBusy                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0     132
                         _acdVoltRef
                         _adcAcqTime
                           _adcClock
                       _adcInterrupt
                      _adcPortConfig
                      _adcResultJust
 ---------------------------------------------------------------------------------
 (2) _adcResultJust                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcPortConfig                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcInterrupt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcClock                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adcAcqTime                                           2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _acdVoltRef                                           2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2117
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    2587
                                             26 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2541
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _adcInit
     _acdVoltRef
     _adcAcqTime
     _adcClock
     _adcInterrupt
     _adcPortConfig
     _adcResultJust
   _adcRead
     _adcBusy
     _adcSetChannel
     _adcStart
     _adcStop
   _lcdGotoxy
     _lcdCmd
       _lcdByte
         _lcdNible
   _lcdInit
     _lcdCmd
       _lcdByte
         _lcdNible
     _lcdNible
   _lcdPuts
     _lcdPutc
       _lcdByte
         _lcdNible
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _uartOpen
     _uartBaudrateMode
     _uartBitMode
     _uartIntMode
     _uartRxMode
     _uartSetBaudrate
     _uartStart
     _uartSyncMode
     _uartSynchMode
   _uartPuts
     _uartBusy
     _uartWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      56       5       67.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2B      30       1       37.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      86      15        0.0%
DATA                 0      0      86       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 01 23:39:17 2017

                       _ad 002F        ___wmul@multiplicand 0003                __CFG_BORV$3 000000  
              __CFG_OSC$HS 000000                __CFG_LVP$ON 000000                        l557 0AD2  
                      l682 0DEE                        l499 0C60                        l692 0E82  
                      u825 0D3E                        u905 1100                        u906 1102  
                      u835 0D5E                        u915 10F2                        u916 10F4  
                      u845 0D80                        u925 10E4                        u870 115E  
                      u926 10E6                        u855 112A                        u935 1054  
                      u856 112C                        u936 1056                        u865 10C6  
                      u945 105E                        u866 10C8                        u946 1060  
                      u955 10D6                        u956 10D8                        u885 103C  
                      u886 103E                        u895 1046                        u896 1048  
             _adcInterrupt 10BC             acdVoltRef@vref 0002                        wreg 000FE8  
          _uartSetBaudrate 116A               ___ftdiv@cntr 0015               ___ftdiv@sign 001A  
             __CFG_WDT$OFF 000000                       l1601 0DC8                       l1621 0E64  
                     l1533 1152                       l1703 0E22                       l1609 0DE4  
                     l1625 0E78                       l1617 0E58                       l1545 102A  
                     l1801 07FE                       l1713 063E                       l1571 0C2E  
                     l1563 0BF0                       l1619 0E60                       l1715 064C  
                     l1707 0624                       l1573 0C4C                       l1565 0BFA  
                     l1805 0822                       l1725 0680                       l1733 06DC  
                     l1575 0C56                       l1567 0C18                       l1559 0BE2  
                     l1647 0EDA                       l1831 0890                       l1815 084A  
                     l1823 086A                       l1807 082A                       l1751 0756  
                     l1743 0716                       l1719 0652                       l1905 0AAC  
                     l1841 08F8                       l1825 0872                       l1761 077E  
                     l1745 072C                       l1931 097A                       l1843 08FC  
                     l1739 06F8                       l1925 0952                       l1597 0DBC  
                     l1837 08AA                       l1781 07BC                       l1749 0730  
                     l1845 0904                       l1863 0EBC                       l1855 0E9C  
                     l1599 0DC4                       l1767 078C                       l1847 091C  
                     l1945 09AC                       l1785 07D2                       l1769 0790  
                     l1955 09D4                       l1859 0EAC                       l1699 0DFA  
                     l1867 0F7E                       l1885 0A6E                       l1949 09BC  
                     l1789 07E4                       l1879 0A46                       l1959 09E4  
                     l1979 0B1C                       STR_1 060B                       STR_2 0612  
                     u1140 0E1A                       u1150 0E42                       u1147 0E10  
                     u1157 0E38                       u1511 0A56                       u1541 093A  
                     u1607 0BC2                       u1561 0962                       u1617 0C94  
                     u1491 0A2E                       u1627 0CAA                       u1637 0CC0  
                     u1647 0CD6                       u1657 0D0A                       u1667 1074  
                     u1677 0D98                       u1687 0DA0              _adcSetChannel 1092  
                     _buff 0080                       _main 0B04               ___ftpack@arg 0001  
             ___ftpack@exp 0004                       fsr0h 000FEA                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000           uartSyncMode@mode 0001  
            __CFG_MCLRE$ON 000000               ___ftmul@cntr 0028               ___param_bank 000000  
             ___ftmul@sign 0029              adcAcqTime@tad 0002                      ?_main 0001  
          __end_of_adcBusy 1162            __end_of_adcInit 0F7E            __end_of_adcRead 0F10  
          __end_of___ftdiv 0B04          uartIntMode@rxMode 0001            __end_of_adcStop 117E  
          __end_of___ftmul 0A1E          uartIntMode@txMode 0002            __end_of___lwdiv 0DF8  
          __end_of___lwmod 0E8C                      _RCREG 000FAE                      _RCSTA 000FAB  
                    _SPBRG 000FAF                      _TXREG 000FAD                      _TXSTA 000FAC  
            _adcResultJust 1120              __CFG_PWRT$OFF 000000              _adcPortConfig 112E  
          __end_of_lcdByte 107A            __end_of_lcdInit 0D16             __CFG_FCMEN$OFF 000000  
          __end_of_lcdPutc 1112            __end_of_lcdPuts 0E4A            __end_of_dpowers 060B  
          __end_of_isdigit 1032              ___ftpack@sign 0005          ?_uartBaudrateMode 0001  
           __CFG_BOREN$OFF 000000             ?_adcSetChannel 0001                      tablat 000FF5  
       ??_uartBaudrateMode 0001                      status 000FD8            __end_of_sprintf 092A  
     uartSetBaudrate@spbrg 0001            __initialization 0FF4               __end_of_main 0BD2  
                   ??_main 002A              __activetblptr 000002    __end_of_uartSetBaudrate 1172  
           ?_adcResultJust 0001             ?_adcPortConfig 0001           __end_of_adcClock 114A  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _ADCON2 000FC0  
                   _ADRESH 000FC4                     _ADRESL 000FC3           __end_of___ftpack 0C80  
         __end_of_adcStart 1184           __end_of___lwtoft 0FF4               ?_uartBitMode 0001  
         __end_of_lcdNible 0DA6             __CFG_XINST$OFF 000000               ?_uartIntMode 0001  
                   ___wmul 0FAA                  ??_adcBusy 0001                  ??_adcInit 0003  
                ??_adcRead 0005             __CFG_STVREN$ON 000000                  ??___ftdiv 0012  
                ??_adcStop 0001                     _lcdCmd 1112                  ??___ftmul 0021  
                ??___lwdiv 0005                  ??___lwmod 000C                     clear_0 0FFA  
                ??_lcdByte 0004                  ??_lcdInit 0006                  ??_lcdPutc 0005  
                ??_lcdPuts 0008      ___ftmul@f3_as_product 0025       adcSetChannel@channel 0002  
                ??_isdigit 0001           __end_of_uartBusy 1156           __end_of_uartOpen 0F4C  
         __end_of_uartPuts 0FAA               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                 _adcAcqTime 107A  
          ??_adcSetChannel 0001                  ??_sprintf 0013          uartSynchMode@mode 0001  
               __accesstop 0080    __end_of__initialization 100A            __CFG_PBADEN$OFF 000000  
            ___rparam_used 000001                 ___ftdiv@f1 000C                 ___ftdiv@f2 000F  
               ___ftdiv@f3 0016                 _acdVoltRef 10A8                 ___ftmul@f1 001B  
               ___ftmul@f2 001E             __pcstackCOMRAM 0001            ??_adcResultJust 0001  
               ___lwtoft@c 0009            ??_adcPortConfig 0001           ?_uartSetBaudrate 0001  
       __size_of_lcdGotoxy 0042               sprintf@width 001C                 __pbssBANK0 0080  
                  ?___wmul 0001      __end_of_uartSynchMode 10DA                    ?_lcdCmd 0001  
                ?_adcClock 0001                  ?___ftpack 0001                  ?_adcStart 0001  
                ?___lwtoft 0009         __size_of_uartStart 0006           adcRead@adcResult 000B  
       __size_of_uartWrite 0008                  ?_lcdNible 0001          adcResultJust@just 0001  
              ?_adcAcqTime 0001          __end_of_lcdGotoxy 0ECE                    __Hparam 0000  
              ?_acdVoltRef 0001                    __Lparam 0000                  ?_uartBusy 0001  
                ?_uartOpen 0001       __size_of_uartBitMode 0018                  ?_uartPuts 0002  
                  _adcBusy 1156                    _adcInit 0F4C                    _adcRead 0ECE  
__size_of_uartBaudrateMode 000E                    ___ftdiv 0A1E            __size_of___wmul 0026  
                  _adcStop 1178                    ___ftmul 092A                    ___lwdiv 0DA6  
                  ___lwmod 0E4A            __size_of_lcdCmd 000E                 ??_adcClock 0001  
     __size_of_uartIntMode 0018               __psmallconst 0600                    __pcinit 0FF4  
               ??___ftpack 0006                 ??_adcStart 0001                    __ramtop 0600  
                  _lcdByte 1062                    _lcdInit 0C80                    __ptext0 0B04  
                  __ptext1 0F7E                    __ptext2 1162                    __ptext3 114A  
                  __ptext4 0F10                    __ptext5 10CC                    __ptext6 10DA  
                  __ptext7 1172                    __ptext8 116A                    __ptext9 10E8  
                  _lcdPutc 1104                    _lcdPuts 0DF8                 ??___lwtoft 000C  
                  _dpowers 0601                    _isdigit 1014              ?_uartSyncMode 0001  
               ??_lcdNible 0001                    _sprintf 061A                    _voltage 002C  
     end_of_initialization 100A              __Lmediumconst 0000          __end_of_uartStart 1178  
        __end_of_uartWrite 116A                 ??_uartBusy 0001                uartPuts@str 0002  
               ??_uartOpen 0003                 ??_uartPuts 0004                  _RCSTAbits 000FAB  
                  postdec2 000FDD                 _uartRxMode 10E8                    postinc0 000FEE  
                  postinc2 000FDE        __size_of_adcAcqTime 0018                 lcdPutc@chr 0005  
               lcdPuts@str 0006             ??_uartSyncMode 0001                  _TRISDbits 000F95  
      __size_of_acdVoltRef 0014                ___ftdiv@exp 0019                  _TXSTAbits 000FAC  
              ___ftmul@exp 0024             __end_of___wmul 0FD0                adcClock@clk 0001  
           __end_of_lcdCmd 1120              ?_adcInterrupt 0001        start_initialization 0FF4  
    __end_of_adcSetChannel 10A8                ?_uartRxMode 0001                   ??___wmul 0005  
         _uartBaudrateMode 10F6                   ??_lcdCmd 0005           __CFG_LPT1OSC$OFF 000000  
           ??_adcInterrupt 0001          __size_of_adcClock 000E      __end_of_adcResultJust 112E  
        __size_of___ftpack 00AE          __size_of_adcStart 0006      __end_of_adcPortConfig 113C  
              __pbssCOMRAM 002C          __size_of___lwtoft 0024               ??_adcAcqTime 0001  
           uartRxMode@mode 0001                  adcRead@ch 000D   __size_of_uartSetBaudrate 0008  
        __size_of_lcdNible 0090                sprintf@flag 0019                sprintf@prec 001E  
             ??_acdVoltRef 0001           ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000  
     __end_of_uartSyncMode 10E8                   ?_adcBusy 0001                   ?_adcInit 0001  
                 ?_adcRead 0003                  _lcdGotoxy 0E8C                   ?___ftdiv 000C  
                 ?_adcStop 0001                   ?___ftmul 001B                   ?___lwdiv 0001  
        __size_of_uartBusy 000C                   ?___lwmod 0008          __size_of_uartOpen 003C  
        __size_of_uartPuts 002C         __end_of_adcAcqTime 1092                   ?_lcdByte 0001  
                 ?_lcdInit 0001                   ?_lcdPutc 0001                   ?_lcdPuts 0006  
              __smallconst 0600                   ?_isdigit 0001            uartBitMode@mode 0001  
         ___lwdiv@quotient 0005         __end_of_acdVoltRef 10BC                   ?_sprintf 000D  
      __size_of_uartRxMode 000E     __size_of_uartSynchMode 000E             ___wmul@product 0005  
                 _LATDbits 000F8C                  lcdCmd@cmd 0005              ??_uartBitMode 0001  
                 _PIE1bits 000F9D                   _PIR1bits 000F9E              ??_uartIntMode 0002  
         __CFG_WDTPS$32768 000000                  _uartStart 1172                  _uartWrite 1162  
               ?_lcdGotoxy 0006                 _ADCON0bits 000FC2                 _ADCON1bits 000FC1  
               _ADCON2bits 000FC0          ___wmul@multiplier 0001              lcdNible@nible 0003  
      adcPortConfig@config 0001       __end_of_adcInterrupt 10CC                   __Hrparam 0000  
        ??_uartSetBaudrate 0001                   __Lrparam 0000                 ?_uartStart 0001  
               ?_uartWrite 0001        __end_of_uartBitMode 1062              _uartSynchMode 10CC  
         __size_of_adcBusy 000C           __size_of_adcInit 0032           __size_of_adcRead 0042  
                 _adcClock 113C           __size_of___ftdiv 00E6           __size_of_adcStop 0006  
         __size_of___ftmul 00F4           __size_of___lwdiv 0052           __size_of___lwmod 0042  
                 ___ftpack 0BD2                   _adcStart 117E        __end_of_uartIntMode 104A  
              _isdigit$926 0002                   ___lwtoft 0FD0           __size_of_lcdByte 0018  
         __size_of_lcdInit 0096           __size_of_lcdPutc 000E           __size_of_lcdPuts 0052  
               sprintf@val 001A         adcInterrupt@config 0001           __size_of_isdigit 001E  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007                   _lcdNible 0D16  
                 __ptext10 1032                   __ptext11 104A                   __ptext20 0C80  
                 __ptext12 10F6                   __ptext21 0E8C                   __ptext13 061A  
                 __ptext30 0F4C                   __ptext22 1112                   __ptext14 1014  
                 __ptext31 1120                   __ptext23 1062                   __ptext15 0FAA  
                 __ptext40 0BD2                   __ptext32 112E                   __ptext24 0D16  
                 __ptext16 0E4A                   __ptext33 10BC                   __ptext25 0ECE  
                 __ptext17 0DA6                   __ptext34 113C                   __ptext26 1178  
                 __ptext18 0DF8                   __ptext35 107A                   __ptext27 117E  
                 __ptext19 1104                   __ptext36 10A8                   __ptext28 1092  
                 __ptext37 0FD0                   __ptext29 1156                   __ptext38 092A  
                 __ptext39 0A1E   __end_of_uartBaudrateMode 1104           __size_of_sprintf 0310  
      adcRead@adcResultLSB 0009        adcRead@adcResultMSB 0007              __size_of_main 00CE  
    __size_of_uartSyncMode 000E                   _uartBusy 114A                   _uartOpen 0F10  
                 _uartPuts 0F7E               ??_uartRxMode 0001                ??_lcdGotoxy 0007  
           ?_uartSynchMode 0001                 _INTCONbits 000FF2              uartWrite@data 0001  
                 isdigit@c 0003               _uartSyncMode 10DA               lcdGotoxy@col 0007  
             lcdGotoxy@row 0006                  sprintf@ap 0017         __end_of_uartRxMode 10F6  
                sprintf@sp 000D           ___lwmod@dividend 0008                _uartBitMode 104A  
              lcdByte@byte 0004                _uartIntMode 1032                ??_uartStart 0001  
              ??_uartWrite 0001     __size_of_adcSetChannel 0016                   sprintf@c 001F  
                 sprintf@f 000F            ___lwmod@divisor 000A            ___lwmod@counter 000C  
     uartBaudrateMode@mode 0001      __size_of_adcInterrupt 0010     __size_of_adcResultJust 000E  
   __size_of_adcPortConfig 000E            ??_uartSynchMode 0001  
